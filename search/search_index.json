{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Documenta\u00e7\u00e3o Amasso","text":"<p>Bem-vindo \u00e0 documenta\u00e7\u00e3o t\u00e9cnica completa da plataforma Amasso - uma plataforma de v\u00eddeos com sistema de afiliados e comissionamento automatizado.</p>"},{"location":"#o-que-e-o-amasso","title":"O que \u00e9 o Amasso?","text":"<p>O Amasso \u00e9 uma plataforma inovadora que permite:</p> <ul> <li>Venda de v\u00eddeos exclusivos por criadores de conte\u00fado</li> <li>Sistema de afiliados onde promoters ganham comiss\u00e3o por vendas</li> <li>Comissionamento autom\u00e1tico para influencers que participam dos v\u00eddeos</li> <li>Pagamentos seguros via Iugu com split autom\u00e1tico</li> <li>Gest\u00e3o de KYC para compliance financeiro</li> </ul>"},{"location":"#stack-tecnologico","title":"Stack Tecnol\u00f3gico","text":"Componente Tecnologia Backend API .NET 8, Entity Framework Core, PostgreSQL Email API .NET 8, Hangfire, SMTP, Z-API WhatsApp Frontend React 18, TypeScript, Redux Toolkit Banco de Dados PostgreSQL 16 Gateway de Pagamento Iugu (Conta Master + Subcontas) CDN de V\u00eddeos Cloudinary"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#para-desenvolvedores","title":"Para Desenvolvedores","text":"<ol> <li> <p>Clone o reposit\u00f3rio <pre><code>git clone https://github.com/seu-usuario/amasso-monorepo.git\ncd amasso-monorepo\n</code></pre></p> </li> <li> <p>Configure o Backend <pre><code>cd backend-api\ndotnet restore\ndotnet ef database update\ndotnet run\n</code></pre></p> </li> <li> <p>Configure o Frontend <pre><code>cd frontend-react\nnpm install\nnpm run dev\n</code></pre></p> </li> <li> <p>Configure o Email API <pre><code>cd email-api\ndotnet restore\ndotnet run\n</code></pre></p> </li> </ol> <p>Consulte a se\u00e7\u00e3o Guias &gt; Configura\u00e7\u00e3o do Ambiente para instru\u00e7\u00f5es detalhadas.</p>"},{"location":"#navegacao-da-documentacao","title":"Navega\u00e7\u00e3o da Documenta\u00e7\u00e3o","text":""},{"location":"#visao-geral","title":"\ud83c\udfaf Vis\u00e3o Geral","text":"<p>Entenda o prop\u00f3sito da plataforma, conceitos principais e gloss\u00e1rio de termos.</p>"},{"location":"#arquitetura","title":"\ud83c\udfd7\ufe0f Arquitetura","text":"<p>Explore a arquitetura dos tr\u00eas projetos e como eles se comunicam.</p>"},{"location":"#pagamentos-iugu","title":"\ud83d\udcb3 Pagamentos Iugu","text":"<p>Aprenda sobre o sistema de conta master/subcontas, KYC e split de pagamento.</p>"},{"location":"#banco-de-dados","title":"\ud83d\uddc4\ufe0f Banco de Dados","text":"<p>Consulte o modelo ER completo e documenta\u00e7\u00e3o de todas as tabelas.</p>"},{"location":"#perfis-de-usuario","title":"\ud83d\udc65 Perfis de Usu\u00e1rio","text":"<p>Entenda os 4 perfis: Admin, Default, Promoter e Influencer.</p>"},{"location":"#fluxos-de-negocio","title":"\ud83d\udd04 Fluxos de Neg\u00f3cio","text":"<p>Veja os fluxos completos: autentica\u00e7\u00e3o, compra, KYC, comiss\u00f5es e mais.</p>"},{"location":"#apis","title":"\ud83d\udd0c APIs","text":"<p>Refer\u00eancia completa dos endpoints do Backend API e Email API.</p>"},{"location":"#guias","title":"\ud83d\udcda Guias","text":"<p>Tutoriais passo a passo para setup, desenvolvimento e boas pr\u00e1ticas.</p>"},{"location":"#casos-de-uso","title":"\ud83d\udccb Casos de Uso","text":"<p>Jornadas completas com c\u00f3digo de exemplo para cada cen\u00e1rio.</p>"},{"location":"#principais-funcionalidades","title":"Principais Funcionalidades","text":""},{"location":"#sistema-de-videos","title":"Sistema de V\u00eddeos","text":"<ul> <li>Upload e armazenamento via Cloudinary</li> <li>Trailers p\u00fablicos e conte\u00fado premium pago</li> <li>Configura\u00e7\u00e3o de pre\u00e7os e promo\u00e7\u00f5es</li> <li>Agendamento de lan\u00e7amentos</li> </ul>"},{"location":"#sistema-de-comissoes","title":"Sistema de Comiss\u00f5es","text":"<ul> <li>Configura\u00e7\u00e3o por v\u00eddeo (admin define %)</li> <li>V\u00eddeos com 0% para promoter n\u00e3o aparecem para links</li> <li>Split autom\u00e1tico no pagamento</li> <li>Relat\u00f3rios de income por perfil</li> </ul>"},{"location":"#sistema-de-afiliados","title":"Sistema de Afiliados","text":"<ul> <li>Links \u00fanicos por promoter</li> <li>Rastreamento de convers\u00f5es</li> <li>Comiss\u00e3o autom\u00e1tica nas vendas</li> <li>Dashboard com m\u00e9tricas</li> </ul>"},{"location":"#sistema-de-pagamentos","title":"Sistema de Pagamentos","text":"<ul> <li>Integra\u00e7\u00e3o completa com Iugu</li> <li>Conta master (plataforma) + subcontas (promoters/influencers)</li> <li>Split autom\u00e1tico no momento do pagamento</li> <li>Webhooks para confirma\u00e7\u00e3o</li> </ul>"},{"location":"#kyc-e-compliance","title":"KYC e Compliance","text":"<ul> <li>Processo de aprova\u00e7\u00e3o para promoters e influencers</li> <li>Valida\u00e7\u00e3o de documentos pelo admin</li> <li>Cria\u00e7\u00e3o de subcontas Iugu ap\u00f3s aprova\u00e7\u00e3o</li> <li>Status: Pendente, Aprovado, Rejeitado</li> </ul>"},{"location":"#contribuindo","title":"Contribuindo","text":"<p>Esta documenta\u00e7\u00e3o \u00e9 mantida em conjunto com o c\u00f3digo. Para contribuir:</p> <ol> <li>Edite os arquivos markdown em <code>documentation/docs/</code></li> <li>Teste localmente: <code>mkdocs serve</code></li> <li>Commit e push - o GitHub Actions far\u00e1 o deploy autom\u00e1tico</li> </ol>"},{"location":"#suporte","title":"Suporte","text":"<p>Para d\u00favidas sobre a plataforma ou esta documenta\u00e7\u00e3o:</p> <ul> <li>Abra uma issue no reposit\u00f3rio</li> <li>Entre em contato com a equipe t\u00e9cnica</li> <li>Consulte os casos de uso para exemplos pr\u00e1ticos</li> </ul> <p>\u00daltima atualiza\u00e7\u00e3o: Esta documenta\u00e7\u00e3o \u00e9 automaticamente atualizada via Git.</p>"},{"location":"apis/backend-api/autenticacao/","title":"Backend API - Autentica\u00e7\u00e3o","text":""},{"location":"apis/backend-api/autenticacao/#endpoints","title":"Endpoints","text":""},{"location":"apis/backend-api/autenticacao/#post-apisignup","title":"POST /api/signup","text":"<p>Cria uma nova conta de usu\u00e1rio.</p> <p>Request: <pre><code>POST /api/signup\nContent-Type: application/json\n\n{\n  \"email\": \"user@example.com\",\n  \"password\": \"Senha@123\",\n  \"firstName\": \"Jo\u00e3o\",\n  \"lastName\": \"Silva\",\n  \"cpf\": \"12345678901\",\n  \"birthDate\": \"1990-01-15\",\n  \"telephone\": \"11987654321\",\n  \"type\": \"Default\"\n}\n</code></pre></p> <p>Response (200): <pre><code>{\n  \"message\": \"Cadastro realizado! Verifique seu email.\"\n}\n</code></pre></p> <p>Errors: - <code>400</code>: Email j\u00e1 cadastrado - <code>400</code>: CPF inv\u00e1lido - <code>400</code>: Menor de 18 anos</p>"},{"location":"apis/backend-api/autenticacao/#post-apisignupactivate","title":"POST /api/signup/activate","text":"<p>Ativa a conta do usu\u00e1rio com c\u00f3digo recebido por email.</p> <p>Request: <pre><code>POST /api/signup/activate\nContent-Type: application/json\n\n{\n  \"email\": \"user@example.com\",\n  \"code\": \"123456\"\n}\n</code></pre></p> <p>Response (200): <pre><code>{\n  \"message\": \"Conta ativada com sucesso!\"\n}\n</code></pre></p>"},{"location":"apis/backend-api/autenticacao/#post-apilogin","title":"POST /api/login","text":"<p>Autentica um usu\u00e1rio e retorna JWT token.</p> <p>Request: <pre><code>POST /api/login\nContent-Type: application/json\n\n{\n  \"email\": \"user@example.com\",\n  \"password\": \"Senha@123\"\n}\n</code></pre></p> <p>Response (200) - Sem MFA: <pre><code>{\n  \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n  \"user\": {\n    \"id\": 1,\n    \"email\": \"user@example.com\",\n    \"firstName\": \"Jo\u00e3o\",\n    \"lastName\": \"Silva\",\n    \"type\": \"Default\"\n  }\n}\n</code></pre></p> <p>Response (200) - Com MFA: <pre><code>{\n  \"requireMfa\": true,\n  \"message\": \"C\u00f3digo MFA enviado para seu email\"\n}\n</code></pre></p>"},{"location":"apis/backend-api/autenticacao/#post-apiloginverify-mfa","title":"POST /api/login/verify-mfa","text":"<p>Verifica c\u00f3digo MFA e retorna token.</p> <p>Request: <pre><code>POST /api/login/verify-mfa\nContent-Type: application/json\n\n{\n  \"email\": \"user@example.com\",\n  \"code\": \"123456\"\n}\n</code></pre></p> <p>Response (200): <pre><code>{\n  \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n  \"user\": { ... }\n}\n</code></pre></p>"},{"location":"apis/backend-api/autenticacao/#post-apiforgot-password","title":"POST /api/forgot-password","text":"<p>Inicia processo de recupera\u00e7\u00e3o de senha.</p> <p>Request: <pre><code>POST /api/forgot-password\nContent-Type: application/json\n\n{\n  \"email\": \"user@example.com\"\n}\n</code></pre></p> <p>Response (200): <pre><code>{\n  \"message\": \"C\u00f3digo enviado para seu email\"\n}\n</code></pre></p>"},{"location":"apis/backend-api/autenticacao/#post-apireset-password","title":"POST /api/reset-password","text":"<p>Redefine a senha com c\u00f3digo recebido.</p> <p>Request: <pre><code>POST /api/reset-password\nContent-Type: application/json\n\n{\n  \"email\": \"user@example.com\",\n  \"code\": \"123456\",\n  \"newPassword\": \"NovaSenha@123\"\n}\n</code></pre></p> <p>Response (200): <pre><code>{\n  \"message\": \"Senha alterada com sucesso!\"\n}\n</code></pre></p>"},{"location":"apis/backend-api/autenticacao/#exemplos-com-curl","title":"Exemplos com cURL","text":""},{"location":"apis/backend-api/autenticacao/#cadastro","title":"Cadastro","text":"<pre><code>curl -X POST http://localhost:7080/api/signup \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"email\": \"test@example.com\",\n    \"password\": \"Senha@123\",\n    \"firstName\": \"Teste\",\n    \"lastName\": \"Usuario\",\n    \"cpf\": \"12345678901\",\n    \"birthDate\": \"1990-01-01\",\n    \"telephone\": \"11999999999\",\n    \"type\": \"Default\"\n  }'\n</code></pre>"},{"location":"apis/backend-api/autenticacao/#login","title":"Login","text":"<pre><code>curl -X POST http://localhost:7080/api/login \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"email\": \"test@example.com\",\n    \"password\": \"Senha@123\"\n  }'\n</code></pre>"},{"location":"apis/backend-api/autenticacao/#seguranca","title":"Seguran\u00e7a","text":"<ul> <li>Senhas com hash bcrypt</li> <li>JWT com expira\u00e7\u00e3o de 24h</li> <li>Rate limiting (5 tentativas/15min)</li> <li>C\u00f3digos MFA expiram em 5 minutos</li> <li>C\u00f3digos de ativa\u00e7\u00e3o expiram em 24 horas</li> </ul>"},{"location":"apis/backend-api/visao-geral/","title":"Backend API - Vis\u00e3o Geral","text":""},{"location":"apis/backend-api/visao-geral/#descricao","title":"Descri\u00e7\u00e3o","text":"<p>A Backend API \u00e9 constru\u00edda com ASP.NET Core 8 usando Minimal APIs e fornece todos os endpoints para o frontend React se comunicar com o sistema.</p>"},{"location":"apis/backend-api/visao-geral/#tecnologias","title":"Tecnologias","text":"<ul> <li>.NET 8: Framework</li> <li>Minimal APIs: Arquitetura de endpoints</li> <li>Entity Framework Core: ORM</li> <li>Npgsql: Driver PostgreSQL</li> <li>JWT Bearer: Autentica\u00e7\u00e3o</li> <li>BCrypt: Hash de senhas</li> <li>Cloudinary: Armazenamento de m\u00eddia</li> <li>Iugu SDK: Gateway de pagamento</li> </ul>"},{"location":"apis/backend-api/visao-geral/#base-url","title":"Base URL","text":"<pre><code>Desenvolvimento: http://localhost:7080\nProdu\u00e7\u00e3o: https://api.amasso.com.br\n</code></pre>"},{"location":"apis/backend-api/visao-geral/#autenticacao","title":"Autentica\u00e7\u00e3o","text":"<p>Todos os endpoints protegidos requerem um JWT Token no header:</p> <pre><code>Authorization: Bearer {token}\n</code></pre>"},{"location":"apis/backend-api/visao-geral/#obter-token","title":"Obter Token","text":"<pre><code>POST /api/login\nContent-Type: application/json\n\n{\n  \"email\": \"user@example.com\",\n  \"password\": \"senha123\"\n}\n</code></pre> <p>Response: <pre><code>{\n  \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n  \"user\": {\n    \"id\": 1,\n    \"email\": \"user@example.com\",\n    \"firstName\": \"Jo\u00e3o\",\n    \"lastName\": \"Silva\",\n    \"type\": \"Default\"\n  }\n}\n</code></pre></p>"},{"location":"apis/backend-api/visao-geral/#estrutura-de-endpoints","title":"Estrutura de Endpoints","text":"<p>Os endpoints s\u00e3o organizados por dom\u00ednio:</p> Dom\u00ednio Arquivo Endpoints Autentica\u00e7\u00e3o <code>LoginEndpoints.cs</code> <code>/api/login</code>, <code>/api/signup</code> MFA <code>MfaEndpoints.cs</code> <code>/api/login/verify-mfa</code> Usu\u00e1rios <code>UserEndpoints.cs</code> <code>/api/users/*</code> V\u00eddeos <code>VideoEndpoints.cs</code> <code>/api/videos/*</code> Pedidos <code>OrderEndpoints.cs</code> <code>/api/orders/*</code> Pagamentos <code>PaymentEndpoints.cs</code> <code>/api/payments/*</code> Webhooks <code>WebHookEndpoint.cs</code> <code>/api/webhooks/iugu</code> Admin <code>AdminEndpoints.cs</code> <code>/api/admin/*</code> Owners <code>OwnerEndpoints.cs</code> <code>/api/owners/*</code> Promoter <code>PromoterEndpoint.cs</code> <code>/api/promoter/*</code> Influencer <code>InfluencerDashboardEndpoints.cs</code> <code>/api/influencer/*</code>"},{"location":"apis/backend-api/visao-geral/#padrao-de-response","title":"Padr\u00e3o de Response","text":""},{"location":"apis/backend-api/visao-geral/#sucesso","title":"Sucesso","text":"<pre><code>{\n  \"data\": { ... },\n  \"message\": \"Opera\u00e7\u00e3o realizada com sucesso\"\n}\n</code></pre>"},{"location":"apis/backend-api/visao-geral/#erro","title":"Erro","text":"<pre><code>{\n  \"error\": \"Mensagem de erro\",\n  \"details\": { ... }\n}\n</code></pre>"},{"location":"apis/backend-api/visao-geral/#status-codes","title":"Status Codes","text":"C\u00f3digo Significado 200 OK Sucesso 201 Created Recurso criado 400 Bad Request Dados inv\u00e1lidos 401 Unauthorized N\u00e3o autenticado 403 Forbidden Sem permiss\u00e3o 404 Not Found N\u00e3o encontrado 500 Internal Server Error Erro no servidor"},{"location":"apis/backend-api/visao-geral/#paginacao","title":"Pagina\u00e7\u00e3o","text":"<p>Endpoints que retornam listas suportam pagina\u00e7\u00e3o:</p> <pre><code>GET /api/videos?page=1&amp;perPage=20\n</code></pre> <p>Response: <pre><code>{\n  \"data\": [...],\n  \"page\": 1,\n  \"perPage\": 20,\n  \"total\": 150,\n  \"totalPages\": 8\n}\n</code></pre></p>"},{"location":"apis/backend-api/visao-geral/#filtros-e-ordenacao","title":"Filtros e Ordena\u00e7\u00e3o","text":"<pre><code>GET /api/videos?sortBy=price&amp;direction=asc&amp;minPrice=10&amp;maxPrice=100\n</code></pre>"},{"location":"apis/backend-api/visao-geral/#cors","title":"CORS","text":"<p>A API permite requisi\u00e7\u00f5es do frontend:</p> <pre><code>builder.Services.AddCors(options =&gt;\n{\n    options.AddDefaultPolicy(policy =&gt;\n    {\n        policy.WithOrigins(\"http://localhost:5173\", \"https://amasso.com.br\")\n              .AllowAnyMethod()\n              .AllowAnyHeader();\n    });\n});\n</code></pre>"},{"location":"apis/backend-api/visao-geral/#rate-limiting","title":"Rate Limiting","text":"<ul> <li>Por IP: 100 requisi\u00e7\u00f5es/minuto</li> <li>Login: 5 tentativas/15 minutos</li> </ul>"},{"location":"apis/backend-api/visao-geral/#logs","title":"Logs","text":"<p>Todas as requisi\u00e7\u00f5es s\u00e3o logadas com: - Timestamp - User ID (se autenticado) - Endpoint - Status Code - Dura\u00e7\u00e3o</p>"},{"location":"apis/backend-api/visao-geral/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<ul> <li>Veja Autentica\u00e7\u00e3o para endpoints de login</li> <li>Consulte V\u00eddeos para cat\u00e1logo</li> <li>Entenda Orders para compras</li> </ul>"},{"location":"apis/backend-api/endpoints/admin/","title":"Endpoints: Admin","text":""},{"location":"apis/backend-api/endpoints/admin/#descricao","title":"Descri\u00e7\u00e3o","text":"<p>Endpoints administrativos para gerenciar a plataforma. Requerem tipo de usu\u00e1rio <code>Admin</code>.</p>"},{"location":"apis/backend-api/endpoints/admin/#post-apiadminvideos","title":"POST /api/admin/videos","text":"<p>Cria um novo v\u00eddeo na plataforma.</p> <p>Auth: Requerido (Admin)</p> <p>Request: <pre><code>POST /api/admin/videos\nAuthorization: Bearer {token}\nContent-Type: multipart/form-data\n\n{\n  \"title\": \"V\u00eddeo Exclusivo\",\n  \"description\": \"Descri\u00e7\u00e3o do v\u00eddeo\",\n  \"price\": 99.90,\n  \"videoFile\": &lt;file&gt;,\n  \"releaseDate\": \"2025-12-01\",\n  \"expirationSaleDate\": \"2025-12-31\",\n  \"expirationViewDate\": \"2026-01-31\"\n}\n</code></pre></p> <p>Response (201): <pre><code>{\n  \"id\": 123,\n  \"title\": \"V\u00eddeo Exclusivo\",\n  \"cloudinaryPublicId\": \"videos/abc123\",\n  \"price\": 99.90,\n  \"isActive\": false,\n  \"createdAt\": \"2025-01-15T10:00:00Z\"\n}\n</code></pre></p> <p>C\u00f3digo Backend: <pre><code>// backend-api/Endpoints/AdminEndpoints.cs\napp.MapPost(\"/api/admin/videos\", async (\n    HttpRequest request,\n    ICloudinaryService cloudinary,\n    ApplicationDbContext context) =&gt;\n{\n    var form = await request.ReadFormAsync();\n    var videoFile = form.Files[\"videoFile\"];\n\n    // Upload para Cloudinary\n    var uploadResult = await cloudinary.UploadVideoAsync(videoFile);\n\n    // Criar v\u00eddeo\n    var video = new Video\n    {\n        Title = form[\"title\"],\n        Description = form[\"description\"],\n        CloudinaryPublicId = uploadResult.PublicId,\n        DurationSeconds = uploadResult.Duration,\n        ThumbImgUrl = uploadResult.ThumbnailUrl,\n        Price = decimal.Parse(form[\"price\"]),\n        ReleaseDate = DateTime.Parse(form[\"releaseDate\"]),\n        ExpirationSaleDate = DateTime.Parse(form[\"expirationSaleDate\"]),\n        ExpirationViewDate = DateTime.Parse(form[\"expirationViewDate\"]),\n        IsActive = false, // Ativar ap\u00f3s configurar comiss\u00f5es\n        CreatedAt = DateTime.UtcNow\n    };\n\n    await context.Videos.AddAsync(video);\n    await context.SaveChangesAsync();\n\n    return Results.Created($\"/api/videos/{video.Id}\", video);\n})\n.RequireAuthorization(\"Admin\")\n.DisableAntiforgery()\n.WithName(\"CreateVideo\");\n</code></pre></p>"},{"location":"apis/backend-api/endpoints/admin/#post-apiadminvideosidrevenue-config","title":"POST /api/admin/videos/:id/revenue-config","text":"<p>Configura as comiss\u00f5es do v\u00eddeo.</p> <p>Auth: Requerido (Admin)</p> <p>Request: <pre><code>POST /api/admin/videos/123/revenue-config\nAuthorization: Bearer {token}\nContent-Type: application/json\n\n{\n  \"platformPercentage\": 20,\n  \"ownerPercentage\": 50,\n  \"promoterPercentage\": 30\n}\n</code></pre></p> <p>Response (200): <pre><code>{\n  \"videoId\": 123,\n  \"platformPercentage\": 20,\n  \"ownerPercentage\": 50,\n  \"promoterPercentage\": 30,\n  \"createdAt\": \"2025-01-15T10:05:00Z\"\n}\n</code></pre></p> <p>Valida\u00e7\u00e3o: - Soma deve ser 100% - Todos &gt;= 0</p> <p>C\u00f3digo Backend: <pre><code>app.MapPost(\"/api/admin/videos/{id:long}/revenue-config\", async (\n    long id,\n    VideoRevenueConfigDto dto,\n    ApplicationDbContext context) =&gt;\n{\n    // Validar soma = 100%\n    if (dto.PlatformPercentage + dto.OwnerPercentage + dto.PromoterPercentage != 100)\n        return Results.BadRequest(\"Soma deve ser 100%\");\n\n    var config = new VideoRevenueConfig\n    {\n        VideoId = id,\n        PlatformPercentage = dto.PlatformPercentage,\n        OwnerPercentage = dto.OwnerPercentage,\n        PromoterPercentage = dto.PromoterPercentage,\n        CreatedAt = DateTime.UtcNow\n    };\n\n    await context.VideoRevenueConfigs.AddAsync(config);\n\n    // Ativar v\u00eddeo\n    var video = await context.Videos.FindAsync(id);\n    video.IsActive = true;\n    video.UpdatedAt = DateTime.UtcNow;\n\n    await context.SaveChangesAsync();\n\n    return Results.Ok(config);\n})\n.RequireAuthorization(\"Admin\");\n</code></pre></p>"},{"location":"apis/backend-api/endpoints/admin/#get-apiadminkycpending","title":"GET /api/admin/kyc/pending","text":"<p>Lista KYCs pendentes de aprova\u00e7\u00e3o.</p> <p>Auth: Requerido (Admin)</p> <p>Response (200): <pre><code>[\n  {\n    \"ownerId\": 5,\n    \"userId\": 10,\n    \"userName\": \"Jo\u00e3o Silva\",\n    \"email\": \"joao@example.com\",\n    \"type\": \"Promoter\",\n    \"cpf\": \"123.456.789-01\",\n    \"submittedAt\": \"2025-01-10T14:00:00Z\",\n    \"documents\": {\n      \"cpfUrl\": \"https://cloudinary.com/cpf123\",\n      \"rgUrl\": \"https://cloudinary.com/rg123\",\n      \"addressProofUrl\": \"https://cloudinary.com/address123\",\n      \"selfieUrl\": \"https://cloudinary.com/selfie123\"\n    }\n  }\n]\n</code></pre></p> <p>C\u00f3digo Backend: <pre><code>app.MapGet(\"/api/admin/kyc/pending\", async (ApplicationDbContext context) =&gt;\n{\n    var pendingKyc = await context.Owners\n        .Include(o =&gt; o.User)\n        .Where(o =&gt; o.SubAccountStatus == OwnerSubAccountStatusEnum.Pending)\n        .OrderBy(o =&gt; o.UpdatedAt)\n        .Select(o =&gt; new\n        {\n            OwnerId = o.Id,\n            UserId = o.UserId,\n            UserName = $\"{o.User.FirstName} {o.User.LastName}\",\n            Email = o.User.Email,\n            Type = o.Type,\n            Cpf = o.CpfCnpj,\n            SubmittedAt = o.UpdatedAt,\n            Documents = new\n            {\n                CpfUrl = o.DocumentCpfUrl,\n                RgUrl = o.DocumentRgUrl,\n                AddressProofUrl = o.DocumentAddressProofUrl,\n                SelfieUrl = o.DocumentSelfieUrl\n            }\n        })\n        .ToListAsync();\n\n    return Results.Ok(pendingKyc);\n})\n.RequireAuthorization(\"Admin\")\n.WithName(\"GetPendingKyc\");\n</code></pre></p>"},{"location":"apis/backend-api/endpoints/admin/#post-apiadminkycidapprove","title":"POST /api/admin/kyc/:id/approve","text":"<p>Aprova o KYC de um promoter/influencer.</p> <p>Auth: Requerido (Admin)</p> <p>Request: <pre><code>POST /api/admin/kyc/5/approve\nAuthorization: Bearer {token}\n</code></pre></p> <p>Response (200): <pre><code>{\n  \"ownerId\": 5,\n  \"status\": \"Approved\",\n  \"approvedAt\": \"2025-01-15T10:30:00Z\"\n}\n</code></pre></p> <p>C\u00f3digo Backend: <pre><code>app.MapPost(\"/api/admin/kyc/{id:long}/approve\", async (\n    long id,\n    AdminService service,\n    HttpRequest request) =&gt;\n{\n    var adminUserId = GetUserIdFromToken(request);\n\n    await service.ApproveKycAsync(id, adminUserId);\n\n    return Results.Ok(new\n    {\n        OwnerId = id,\n        Status = \"Approved\",\n        ApprovedAt = DateTime.UtcNow\n    });\n})\n.RequireAuthorization(\"Admin\")\n.WithName(\"ApproveKyc\");\n</code></pre></p>"},{"location":"apis/backend-api/endpoints/admin/#post-apiadminkycidreject","title":"POST /api/admin/kyc/:id/reject","text":"<p>Rejeita o KYC com motivo.</p> <p>Auth: Requerido (Admin)</p> <p>Request: <pre><code>POST /api/admin/kyc/5/reject\nAuthorization: Bearer {token}\nContent-Type: application/json\n\n{\n  \"reason\": \"Documentos ileg\u00edveis. Por favor, envie fotos mais claras.\"\n}\n</code></pre></p> <p>Response (200): <pre><code>{\n  \"ownerId\": 5,\n  \"status\": \"Rejected\",\n  \"reason\": \"Documentos ileg\u00edveis. Por favor, envie fotos mais claras.\",\n  \"rejectedAt\": \"2025-01-15T10:35:00Z\"\n}\n</code></pre></p> <p>C\u00f3digo Backend: <pre><code>app.MapPost(\"/api/admin/kyc/{id:long}/reject\", async (\n    long id,\n    RejectKycDto dto,\n    AdminService service,\n    HttpRequest request) =&gt;\n{\n    var adminUserId = GetUserIdFromToken(request);\n\n    await service.RejectKycAsync(id, dto.Reason, adminUserId);\n\n    return Results.Ok(new\n    {\n        OwnerId = id,\n        Status = \"Rejected\",\n        Reason = dto.Reason,\n        RejectedAt = DateTime.UtcNow\n    });\n})\n.RequireAuthorization(\"Admin\")\n.WithName(\"RejectKyc\");\n</code></pre></p>"},{"location":"apis/backend-api/endpoints/admin/#post-apiadminvideosidadd-influencer","title":"POST /api/admin/videos/:id/add-influencer","text":"<p>Vincula um influencer a um v\u00eddeo.</p> <p>Auth: Requerido (Admin)</p> <p>Request: <pre><code>POST /api/admin/videos/123/add-influencer\nAuthorization: Bearer {token}\nContent-Type: application/json\n\n{\n  \"influencerId\": 5\n}\n</code></pre></p> <p>Response (200): <pre><code>{\n  \"videoId\": 123,\n  \"influencerId\": 5,\n  \"createdAt\": \"2025-01-15T11:00:00Z\"\n}\n</code></pre></p> <p>C\u00f3digo Backend: <pre><code>app.MapPost(\"/api/admin/videos/{videoId:long}/add-influencer\", async (\n    long videoId,\n    AddInfluencerDto dto,\n    ApplicationDbContext context) =&gt;\n{\n    // Verificar se \u00e9 influencer e tem KYC aprovado\n    var owner = await context.Owners\n        .FirstOrDefaultAsync(o =&gt; o.Id == dto.InfluencerId &amp;&amp;\n                                  o.Type == OwnerTypeEnum.Influencer);\n\n    if (owner == null)\n        return Results.BadRequest(\"Influencer n\u00e3o encontrado\");\n\n    if (owner.SubAccountStatus != OwnerSubAccountStatusEnum.Approved)\n        return Results.BadRequest(\"KYC do influencer n\u00e3o aprovado\");\n\n    // Verificar se j\u00e1 est\u00e1 vinculado\n    var exists = await context.OwnerVideos\n        .AnyAsync(ov =&gt; ov.VideoId == videoId &amp;&amp; ov.OwnerId == dto.InfluencerId);\n\n    if (exists)\n        return Results.BadRequest(\"Influencer j\u00e1 vinculado a este v\u00eddeo\");\n\n    var ownerVideo = new OwnerVideo\n    {\n        VideoId = videoId,\n        OwnerId = dto.InfluencerId,\n        CreatedAt = DateTime.UtcNow\n    };\n\n    await context.OwnerVideos.AddAsync(ownerVideo);\n    await context.SaveChangesAsync();\n\n    return Results.Ok(ownerVideo);\n})\n.RequireAuthorization(\"Admin\");\n</code></pre></p>"},{"location":"apis/backend-api/endpoints/admin/#frontend-exemplo-de-uso","title":"Frontend - Exemplo de Uso","text":"<pre><code>// frontend-react/src/services/api/adminApi.ts\nexport const adminApi = {\n  getPendingKyc: async () =&gt; {\n    const response = await httpClient.get('/api/admin/kyc/pending')\n    return response.data\n  },\n\n  approveKyc: async (ownerId: number) =&gt; {\n    const response = await httpClient.post(`/api/admin/kyc/${ownerId}/approve`)\n    return response.data\n  },\n\n  rejectKyc: async (ownerId: number, reason: string) =&gt; {\n    const response = await httpClient.post(`/api/admin/kyc/${ownerId}/reject`, {\n      reason\n    })\n    return response.data\n  },\n\n  createVideo: async (formData: FormData) =&gt; {\n    const response = await httpClient.post('/api/admin/videos', formData, {\n      headers: { 'Content-Type': 'multipart/form-data' }\n    })\n    return response.data\n  }\n}\n\n// frontend-react/src/pages/Admin/KycApprovals.tsx\nconst KycApprovals = () =&gt; {\n  const { data: pendingKyc, refetch } = useQuery({\n    queryKey: ['pending-kyc'],\n    queryFn: adminApi.getPendingKyc\n  })\n\n  const handleApprove = async (ownerId: number) =&gt; {\n    if (!confirm('Aprovar este KYC?')) return\n\n    await adminApi.approveKyc(ownerId)\n    toast.success('KYC aprovado!')\n    refetch()\n  }\n\n  const handleReject = async (ownerId: number) =&gt; {\n    const reason = prompt('Motivo da rejei\u00e7\u00e3o:')\n    if (!reason) return\n\n    await adminApi.rejectKyc(ownerId, reason)\n    toast.success('KYC rejeitado')\n    refetch()\n  }\n\n  return (\n    &lt;Table&gt;\n      {pendingKyc?.map(kyc =&gt; (\n        &lt;tr key={kyc.ownerId}&gt;\n          &lt;td&gt;{kyc.userName}&lt;/td&gt;\n          &lt;td&gt;{kyc.type}&lt;/td&gt;\n          &lt;td&gt;\n            &lt;Button onClick={() =&gt; window.open(kyc.documents.cpfUrl)}&gt;\n              Ver CPF\n            &lt;/Button&gt;\n            &lt;Button onClick={() =&gt; window.open(kyc.documents.rgUrl)}&gt;\n              Ver RG\n            &lt;/Button&gt;\n          &lt;/td&gt;\n          &lt;td&gt;\n            &lt;Button onClick={() =&gt; handleApprove(kyc.ownerId)} color=\"green\"&gt;\n              Aprovar\n            &lt;/Button&gt;\n            &lt;Button onClick={() =&gt; handleReject(kyc.ownerId)} color=\"red\"&gt;\n              Rejeitar\n            &lt;/Button&gt;\n          &lt;/td&gt;\n        &lt;/tr&gt;\n      ))}\n    &lt;/Table&gt;\n  )\n}\n</code></pre>"},{"location":"apis/backend-api/endpoints/admin/#regras-de-negocio","title":"Regras de Neg\u00f3cio","text":"<ol> <li>Apenas Admins: Todos os endpoints requerem tipo <code>Admin</code></li> <li>KYC: Influencer/Promoter deve ter KYC aprovado para operar</li> <li>Revenue Config: Soma das porcentagens deve ser 100%</li> <li>Promoter %: Se 0%, v\u00eddeo n\u00e3o aparece para promoters gerarem links</li> <li>V\u00eddeo ativo: S\u00f3 fica ativo ap\u00f3s configurar comiss\u00f5es</li> </ol>"},{"location":"apis/backend-api/endpoints/admin/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<ul> <li>Perfil Admin</li> <li>Processo KYC</li> <li>Gest\u00e3o de V\u00eddeos</li> </ul>"},{"location":"apis/backend-api/endpoints/order/","title":"Endpoints: Order","text":""},{"location":"apis/backend-api/endpoints/order/#descricao","title":"Descri\u00e7\u00e3o","text":"<p>Endpoints relacionados a pedidos de compra de v\u00eddeos.</p>"},{"location":"apis/backend-api/endpoints/order/#post-apiorders","title":"POST /api/orders","text":"<p>Cria um novo pedido de compra de v\u00eddeo.</p> <p>Auth: Requerido (JWT)</p> <p>Request: <pre><code>POST /api/orders\nAuthorization: Bearer {token}\nContent-Type: application/json\n\n{\n  \"videoId\": 123,\n  \"affiliateCode\": \"ABC12345\"\n}\n</code></pre></p> <p>Response (201): <pre><code>{\n  \"orderId\": 456,\n  \"videoId\": 123,\n  \"amount\": 9990,\n  \"platformAmount\": 1998,\n  \"ownerAmount\": 4995,\n  \"promoterAmount\": 2997,\n  \"payment\": {\n    \"id\": 789,\n    \"iuguInvoiceId\": \"ABC123XYZ\",\n    \"iuguSecureUrl\": \"https://faturas.iugu.com/abc123\",\n    \"status\": \"Pending\",\n    \"amount\": 9990\n  },\n  \"createdAt\": \"2025-01-15T10:30:00Z\"\n}\n</code></pre></p> <p>Errors: - <code>400 Bad Request</code>: Dados inv\u00e1lidos ou v\u00eddeo j\u00e1 comprado - <code>401 Unauthorized</code>: Token inv\u00e1lido - <code>404 Not Found</code>: V\u00eddeo n\u00e3o encontrado</p> <p>Exemplo cURL: <pre><code># Compra direta (sem promoter)\ncurl -X POST http://localhost:7080/api/orders \\\n  -H \"Authorization: Bearer {token}\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"videoId\": 123\n  }'\n\n# Compra via link de afiliado\ncurl -X POST http://localhost:7080/api/orders \\\n  -H \"Authorization: Bearer {token}\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"videoId\": 123,\n    \"affiliateCode\": \"ABC12345\"\n  }'\n</code></pre></p> <p>C\u00f3digo Backend: <pre><code>// backend-api/Endpoints/OrderEndpoints.cs\napp.MapPost(\"/api/orders\", async (\n    CreateOrderDto dto,\n    HttpRequest request,\n    OrderService service) =&gt;\n{\n    var userId = GetUserIdFromToken(request);\n\n    try\n    {\n        var order = await service.CreateOrderAsync(dto, userId);\n\n        return Results.Created($\"/api/orders/{order.Id}\", new\n        {\n            OrderId = order.Id,\n            VideoId = order.VideoId,\n            Amount = order.Amount,\n            PlatformAmount = order.PlatformAmount,\n            OwnerAmount = order.OwnerAmount,\n            PromoterAmount = order.PromoterAmount,\n            Payment = new\n            {\n                Id = order.Payment.Id,\n                IuguInvoiceId = order.Payment.IuguInvoiceId,\n                IuguSecureUrl = order.Payment.IuguSecureUrl,\n                Status = order.Payment.Status,\n                Amount = order.Payment.Amount\n            },\n            CreatedAt = order.CreatedAt\n        });\n    }\n    catch (InvalidOperationException ex)\n    {\n        return Results.BadRequest(new { error = ex.Message });\n    }\n})\n.RequireAuthorization()\n.WithName(\"CreateOrder\");\n</code></pre></p> <p>Service: <pre><code>// backend-api/Services/OrderService.cs\npublic async Task&lt;Order&gt; CreateOrderAsync(CreateOrderDto dto, long userId)\n{\n    // Verificar se j\u00e1 comprou\n    var alreadyPurchased = await _context.Orders\n        .Include(o =&gt; o.Payment)\n        .AnyAsync(o =&gt; o.UserId == userId &amp;&amp;\n                      o.VideoId == dto.VideoId &amp;&amp;\n                      o.Payment.Status == PaymentStatusEnum.Paid);\n\n    if (alreadyPurchased)\n        throw new InvalidOperationException(\"Voc\u00ea j\u00e1 possui este v\u00eddeo\");\n\n    // Buscar v\u00eddeo\n    var video = await _context.Videos\n        .Include(v =&gt; v.VideoRevenueConfig)\n        .Include(v =&gt; v.OwnerVideos)\n        .ThenInclude(ov =&gt; ov.Owner)\n        .FirstAsync(v =&gt; v.Id == dto.VideoId);\n\n    var config = video.VideoRevenueConfig;\n    var totalCents = (int)(video.Price * 100);\n\n    // Calcular split\n    var platformCents = (int)(totalCents * config.PlatformPercentage / 100);\n    var ownerCents = (int)(totalCents * config.OwnerPercentage / 100);\n    var promoterCents = (int)(totalCents * config.PromoterPercentage / 100);\n\n    // Buscar promoter (se houver)\n    Owner? promoter = null;\n    if (!string.IsNullOrEmpty(dto.AffiliateCode))\n    {\n        var link = await _context.VideoAffiliateLinks\n            .Include(l =&gt; l.Owner)\n            .FirstOrDefaultAsync(l =&gt; l.UniqueCode == dto.AffiliateCode);\n\n        if (link != null &amp;&amp; \n            link.Owner.SubAccountStatus == OwnerSubAccountStatusEnum.Approved)\n        {\n            promoter = link.Owner;\n        }\n    }\n\n    // Se n\u00e3o tem promoter, owner recebe a parte\n    if (promoter == null)\n    {\n        ownerCents += promoterCents;\n        promoterCents = 0;\n    }\n\n    // Ajustar arredondamento\n    var diff = totalCents - (platformCents + ownerCents + promoterCents);\n    if (diff != 0) ownerCents += diff;\n\n    // Criar order\n    var order = new Order\n    {\n        UserId = userId,\n        VideoId = dto.VideoId,\n        PromoterId = promoter?.Id,\n        Amount = totalCents,\n        PlatformAmount = platformCents,\n        OwnerAmount = ownerCents,\n        PromoterAmount = promoterCents,\n        CreatedAt = DateTime.UtcNow\n    };\n\n    await _context.Orders.AddAsync(order);\n    await _context.SaveChangesAsync();\n\n    // Criar invoice no Iugu com split\n    var invoice = await _iuguService.CreateInvoiceWithSplitAsync(order);\n\n    // Criar payment\n    var payment = new Payment\n    {\n        OrderId = order.Id,\n        IuguInvoiceId = invoice.Id,\n        IuguSecureUrl = invoice.SecureUrl,\n        Status = PaymentStatusEnum.Pending,\n        Amount = order.Amount,\n        CreatedAt = DateTime.UtcNow\n    };\n\n    await _context.Payments.AddAsync(payment);\n    await _context.SaveChangesAsync();\n\n    order.Payment = payment;\n\n    return order;\n}\n</code></pre></p>"},{"location":"apis/backend-api/endpoints/order/#get-apiordersmy-orders","title":"GET /api/orders/my-orders","text":"<p>Lista todos os pedidos do usu\u00e1rio logado.</p> <p>Auth: Requerido (JWT)</p> <p>Query Parameters:</p> Par\u00e2metro Tipo Descri\u00e7\u00e3o Padr\u00e3o <code>status</code> string Filtrar por status: <code>Pending</code>, <code>Paid</code>, <code>Cancelled</code> - <p>Request: <pre><code>GET /api/orders/my-orders?status=Paid\nAuthorization: Bearer {token}\n</code></pre></p> <p>Response (200): <pre><code>[\n  {\n    \"orderId\": 456,\n    \"video\": {\n      \"id\": 123,\n      \"title\": \"V\u00eddeo Exclusivo\",\n      \"thumbImgUrl\": \"https://cloudinary.com/...\"\n    },\n    \"amount\": 9990,\n    \"payment\": {\n      \"status\": \"Paid\",\n      \"iuguPaidAt\": \"2025-01-15T11:00:00Z\"\n    },\n    \"promoter\": {\n      \"id\": 5,\n      \"name\": \"Jo\u00e3o Silva\"\n    },\n    \"createdAt\": \"2025-01-15T10:30:00Z\"\n  }\n]\n</code></pre></p> <p>C\u00f3digo Backend: <pre><code>// backend-api/Endpoints/OrderEndpoints.cs\napp.MapGet(\"/api/orders/my-orders\", async (\n    HttpRequest request,\n    ApplicationDbContext context,\n    string? status = null) =&gt;\n{\n    var userId = GetUserIdFromToken(request);\n\n    var query = context.Orders\n        .Include(o =&gt; o.Video)\n        .Include(o =&gt; o.Payment)\n        .Include(o =&gt; o.Promoter)\n        .ThenInclude(p =&gt; p.User)\n        .Where(o =&gt; o.UserId == userId);\n\n    if (!string.IsNullOrEmpty(status) &amp;&amp; Enum.TryParse&lt;PaymentStatusEnum&gt;(status, out var statusEnum))\n    {\n        query = query.Where(o =&gt; o.Payment.Status == statusEnum);\n    }\n\n    var orders = await query\n        .OrderByDescending(o =&gt; o.CreatedAt)\n        .ToListAsync();\n\n    return Results.Ok(orders.Select(o =&gt; new\n    {\n        OrderId = o.Id,\n        Video = new\n        {\n            Id = o.Video.Id,\n            Title = o.Video.Title,\n            ThumbImgUrl = o.Video.ThumbImgUrl\n        },\n        Amount = o.Amount,\n        Payment = new\n        {\n            Status = o.Payment.Status,\n            IuguPaidAt = o.Payment.IuguPaidAt\n        },\n        Promoter = o.Promoter != null ? new\n        {\n            Id = o.Promoter.Id,\n            Name = $\"{o.Promoter.User.FirstName} {o.Promoter.User.LastName}\"\n        } : null,\n        CreatedAt = o.CreatedAt\n    }));\n})\n.RequireAuthorization()\n.WithName(\"GetMyOrders\");\n</code></pre></p>"},{"location":"apis/backend-api/endpoints/order/#frontend-exemplo-de-uso","title":"Frontend - Exemplo de Uso","text":"<pre><code>// frontend-react/src/services/api/orderApi.ts\nexport const orderApi = {\n  create: async (data: CreateOrderDto) =&gt; {\n    const response = await httpClient.post('/api/orders', data)\n    return response.data\n  },\n\n  getMyOrders: async (status?: string) =&gt; {\n    const response = await httpClient.get('/api/orders/my-orders', {\n      params: { status }\n    })\n    return response.data\n  }\n}\n\n// frontend-react/src/pages/Checkout/VideoCheckout.tsx\nconst VideoCheckout = () =&gt; {\n  const { videoId } = useParams()\n  const navigate = useNavigate()\n\n  const handleCheckout = async () =&gt; {\n    try {\n      // Pegar affiliate code do localStorage (se houver)\n      const affiliateCode = localStorage.getItem('affiliateRef')\n\n      const order = await orderApi.create({\n        videoId: parseInt(videoId),\n        affiliateCode\n      })\n\n      // Remover affiliate code\n      localStorage.removeItem('affiliateRef')\n\n      // Redirecionar para Iugu\n      window.location.href = order.payment.iuguSecureUrl\n    } catch (error: any) {\n      toast.error(error.response?.data?.error || 'Erro ao criar pedido')\n    }\n  }\n\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Finalizar Compra&lt;/h1&gt;\n      &lt;VideoSummary videoId={videoId} /&gt;\n      &lt;button onClick={handleCheckout}&gt;\n        Ir para Pagamento\n      &lt;/button&gt;\n    &lt;/div&gt;\n  )\n}\n</code></pre>"},{"location":"apis/backend-api/endpoints/order/#split-de-valores-exemplo","title":"Split de Valores - Exemplo","text":""},{"location":"apis/backend-api/endpoints/order/#cenario-video-r-10000-com-promoter","title":"Cen\u00e1rio: V\u00eddeo R$ 100,00 com Promoter","text":"<p>Config: Platform 20% | Owner 50% | Promoter 30%</p> <pre><code>{\n  \"amount\": 10000,           // R$ 100,00\n  \"platformAmount\": 2000,    // R$ 20,00 (20%)\n  \"ownerAmount\": 5000,       // R$ 50,00 (50%)\n  \"promoterAmount\": 3000     // R$ 30,00 (30%)\n}\n</code></pre>"},{"location":"apis/backend-api/endpoints/order/#cenario-video-r-10000-sem-promoter","title":"Cen\u00e1rio: V\u00eddeo R$ 100,00 sem Promoter","text":"<p>Config: Platform 20% | Owner 50% | Promoter 30%</p> <pre><code>{\n  \"amount\": 10000,           // R$ 100,00\n  \"platformAmount\": 2000,    // R$ 20,00 (20%)\n  \"ownerAmount\": 8000,       // R$ 80,00 (50% + 30%)\n  \"promoterAmount\": 0        // R$ 0,00\n}\n</code></pre>"},{"location":"apis/backend-api/endpoints/order/#regras-de-negocio","title":"Regras de Neg\u00f3cio","text":"<ol> <li>Compra \u00fanica: Usu\u00e1rio n\u00e3o pode comprar mesmo v\u00eddeo duas vezes</li> <li>Split calculado: Valores j\u00e1 calculados no momento do order</li> <li>Affiliate code opcional: Se inv\u00e1lido ou expirado, compra segue sem promoter</li> <li>KYC promoter: Se promoter n\u00e3o tem KYC aprovado, link n\u00e3o funciona</li> <li>Arredondamento: Diferen\u00e7a de centavos vai para owner</li> <li>Imut\u00e1vel: Order n\u00e3o pode ser alterado ap\u00f3s criado</li> </ol>"},{"location":"apis/backend-api/endpoints/order/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<ul> <li>Payments - Webhooks e confirma\u00e7\u00e3o</li> <li>Fluxo de Compra</li> <li>Split de Pagamento</li> </ul>"},{"location":"apis/backend-api/endpoints/owner/","title":"Endpoints: Owner","text":""},{"location":"apis/backend-api/endpoints/owner/#descricao","title":"Descri\u00e7\u00e3o","text":"<p>Endpoints para Promoters e Influencers gerenciarem seus dados como \"owners\" (donos de subcontas Iugu).</p>"},{"location":"apis/backend-api/endpoints/owner/#post-apiownerskyc","title":"POST /api/owners/kyc","text":"<p>Envia documentos KYC para aprova\u00e7\u00e3o.</p> <p>Auth: Requerido (Promoter ou Influencer)</p> <p>Request: <pre><code>POST /api/owners/kyc\nAuthorization: Bearer {token}\nContent-Type: multipart/form-data\n\n{\n  \"cpf\": \"12345678901\",\n  \"rg\": \"123456789\",\n  \"birthDate\": \"1990-01-15\",\n  \"addressStreet\": \"Rua Exemplo\",\n  \"addressNumber\": \"123\",\n  \"addressComplement\": \"Apto 45\",\n  \"addressNeighborhood\": \"Centro\",\n  \"addressCity\": \"S\u00e3o Paulo\",\n  \"addressState\": \"SP\",\n  \"addressZipcode\": \"01234567\",\n  \"bankCode\": \"001\",\n  \"bankAgency\": \"1234\",\n  \"bankAccount\": \"12345678\",\n  \"bankAccountType\": \"corrente\",\n  \"cpfFile\": &lt;file&gt;,\n  \"rgFile\": &lt;file&gt;,\n  \"addressProofFile\": &lt;file&gt;,\n  \"selfieFile\": &lt;file&gt;\n}\n</code></pre></p> <p>Response (200): <pre><code>{\n  \"ownerId\": 5,\n  \"iuguAccountId\": \"ABC123XYZ\",\n  \"subAccountStatus\": \"Pending\",\n  \"message\": \"Documentos enviados com sucesso! Aguarde aprova\u00e7\u00e3o do admin.\"\n}\n</code></pre></p> <p>Errors: - <code>400 Bad Request</code>: Documentos inv\u00e1lidos ou faltando - <code>401 Unauthorized</code>: Token inv\u00e1lido</p> <p>C\u00f3digo Backend: <pre><code>// backend-api/Endpoints/OwnerEndpoints.cs\napp.MapPost(\"/api/owners/kyc\", async (\n    HttpRequest request,\n    OwnerService service,\n    ICloudinaryService cloudinary,\n    IIuguService iugu) =&gt;\n{\n    var userId = GetUserIdFromToken(request);\n    var form = await request.ReadFormAsync();\n\n    // Upload documentos para Cloudinary\n    var cpfUrl = await cloudinary.UploadAsync(form.Files[\"cpfFile\"]);\n    var rgUrl = await cloudinary.UploadAsync(form.Files[\"rgFile\"]);\n    var addressProofUrl = await cloudinary.UploadAsync(form.Files[\"addressProofFile\"]);\n    var selfieUrl = await cloudinary.UploadAsync(form.Files[\"selfieFile\"]);\n\n    var dto = new SubmitKycDto\n    {\n        Cpf = form[\"cpf\"],\n        Rg = form[\"rg\"],\n        BirthDate = DateTime.Parse(form[\"birthDate\"]),\n        AddressStreet = form[\"addressStreet\"],\n        AddressNumber = form[\"addressNumber\"],\n        AddressComplement = form[\"addressComplement\"],\n        AddressNeighborhood = form[\"addressNeighborhood\"],\n        AddressCity = form[\"addressCity\"],\n        AddressState = form[\"addressState\"],\n        AddressZipcode = form[\"addressZipcode\"],\n        BankCode = form[\"bankCode\"],\n        BankAgency = form[\"bankAgency\"],\n        BankAccount = form[\"bankAccount\"],\n        BankAccountType = form[\"bankAccountType\"],\n        DocumentCpfUrl = cpfUrl,\n        DocumentRgUrl = rgUrl,\n        DocumentAddressProofUrl = addressProofUrl,\n        DocumentSelfieUrl = selfieUrl\n    };\n\n    var owner = await service.SubmitKycAsync(userId, dto, iugu);\n\n    return Results.Ok(new\n    {\n        OwnerId = owner.Id,\n        IuguAccountId = owner.IuguAccountId,\n        SubAccountStatus = owner.SubAccountStatus,\n        Message = \"Documentos enviados com sucesso! Aguarde aprova\u00e7\u00e3o do admin.\"\n    });\n})\n.RequireAuthorization()\n.DisableAntiforgery()\n.WithName(\"SubmitKyc\");\n</code></pre></p> <p>Service: <pre><code>// backend-api/Services/OwnerService.cs\npublic async Task&lt;Owner&gt; SubmitKycAsync(\n    long userId, \n    SubmitKycDto dto, \n    IIuguService iugu)\n{\n    var user = await _context.Users.FindAsync(userId);\n\n    // Verificar se \u00e9 Promoter ou Influencer\n    if (user.Type != UserTypeEnum.Promoter &amp;&amp; \n        user.Type != UserTypeEnum.Influencer)\n    {\n        throw new InvalidOperationException(\"Apenas Promoters e Influencers podem enviar KYC\");\n    }\n\n    var owner = await _context.Owners\n        .FirstOrDefaultAsync(o =&gt; o.UserId == userId);\n\n    if (owner == null)\n    {\n        owner = new Owner\n        {\n            UserId = userId,\n            Type = user.Type == UserTypeEnum.Promoter \n                ? OwnerTypeEnum.Promoter \n                : OwnerTypeEnum.Influencer,\n            CreatedAt = DateTime.UtcNow\n        };\n\n        await _context.Owners.AddAsync(owner);\n        await _context.SaveChangesAsync();\n    }\n\n    // Atualizar dados\n    owner.CpfCnpj = dto.Cpf;\n    owner.Rg = dto.Rg;\n    owner.BirthDate = dto.BirthDate;\n    owner.AddressStreet = dto.AddressStreet;\n    owner.AddressNumber = dto.AddressNumber;\n    owner.AddressComplement = dto.AddressComplement;\n    owner.AddressNeighborhood = dto.AddressNeighborhood;\n    owner.AddressCity = dto.AddressCity;\n    owner.AddressState = dto.AddressState;\n    owner.AddressZipcode = dto.AddressZipcode;\n    owner.BankCode = dto.BankCode;\n    owner.BankAgency = dto.BankAgency;\n    owner.BankAccount = dto.BankAccount;\n    owner.BankAccountType = dto.BankAccountType;\n    owner.DocumentCpfUrl = dto.DocumentCpfUrl;\n    owner.DocumentRgUrl = dto.DocumentRgUrl;\n    owner.DocumentAddressProofUrl = dto.DocumentAddressProofUrl;\n    owner.DocumentSelfieUrl = dto.DocumentSelfieUrl;\n\n    // Criar ou atualizar subconta Iugu\n    if (string.IsNullOrEmpty(owner.IuguAccountId))\n    {\n        var subAccount = await iugu.CreateSubAccountAsync(owner);\n        owner.IuguAccountId = subAccount.AccountId;\n    }\n    else\n    {\n        await iugu.UpdateSubAccountAsync(owner);\n    }\n\n    owner.SubAccountStatus = OwnerSubAccountStatusEnum.Pending;\n    owner.UpdatedAt = DateTime.UtcNow;\n\n    await _context.SaveChangesAsync();\n\n    // Notificar admin\n    await _notificationService.NotifyAdminKycPendingAsync(owner.Id);\n\n    return owner;\n}\n</code></pre></p>"},{"location":"apis/backend-api/endpoints/owner/#get-apiownersme","title":"GET /api/owners/me","text":"<p>Retorna dados do owner (promoter/influencer) logado.</p> <p>Auth: Requerido (Promoter ou Influencer)</p> <p>Request: <pre><code>GET /api/owners/me\nAuthorization: Bearer {token}\n</code></pre></p> <p>Response (200): <pre><code>{\n  \"id\": 5,\n  \"userId\": 10,\n  \"type\": \"Promoter\",\n  \"iuguAccountId\": \"ABC123XYZ\",\n  \"subAccountStatus\": \"Approved\",\n  \"cpfCnpj\": \"123.456.789-01\",\n  \"bankAccount\": \"12345-6\",\n  \"canOperate\": true,\n  \"createdAt\": \"2025-01-10T10:00:00Z\"\n}\n</code></pre></p> <p>Response (404): Se usu\u00e1rio n\u00e3o \u00e9 Promoter/Influencer</p> <p>C\u00f3digo Backend: <pre><code>// backend-api/Endpoints/OwnerEndpoints.cs\napp.MapGet(\"/api/owners/me\", async (\n    HttpRequest request,\n    ApplicationDbContext context) =&gt;\n{\n    var userId = GetUserIdFromToken(request);\n\n    var owner = await context.Owners\n        .FirstOrDefaultAsync(o =&gt; o.UserId == userId);\n\n    if (owner == null)\n        return Results.NotFound(new { message = \"Owner not found\" });\n\n    return Results.Ok(new\n    {\n        Id = owner.Id,\n        UserId = owner.UserId,\n        Type = owner.Type,\n        IuguAccountId = owner.IuguAccountId,\n        SubAccountStatus = owner.SubAccountStatus,\n        CpfCnpj = owner.CpfCnpj,\n        BankAccount = $\"{owner.BankAgency}-{owner.BankAccount}\",\n        CanOperate = owner.SubAccountStatus == OwnerSubAccountStatusEnum.Approved,\n        CreatedAt = owner.CreatedAt\n    });\n})\n.RequireAuthorization()\n.WithName(\"GetMyOwner\");\n</code></pre></p>"},{"location":"apis/backend-api/endpoints/owner/#frontend-exemplo-de-uso","title":"Frontend - Exemplo de Uso","text":"<pre><code>// frontend-react/src/services/api/ownerApi.ts\nexport const ownerApi = {\n  submitKyc: async (formData: FormData) =&gt; {\n    const response = await httpClient.post('/api/owners/kyc', formData, {\n      headers: { 'Content-Type': 'multipart/form-data' }\n    })\n    return response.data\n  },\n\n  getMe: async () =&gt; {\n    const response = await httpClient.get('/api/owners/me')\n    return response.data\n  }\n}\n\n// frontend-react/src/pages/Owner/KycSubmission.tsx\nconst KycSubmission = () =&gt; {\n  const { register, handleSubmit } = useForm&lt;KycForm&gt;()\n  const [isSubmitting, setIsSubmitting] = useState(false)\n\n  const onSubmit = async (data: KycForm) =&gt; {\n    setIsSubmitting(true)\n\n    try {\n      const formData = new FormData()\n\n      // Dados pessoais\n      formData.append('cpf', data.cpf)\n      formData.append('rg', data.rg)\n      formData.append('birthDate', data.birthDate)\n\n      // Endere\u00e7o\n      formData.append('addressStreet', data.addressStreet)\n      formData.append('addressNumber', data.addressNumber)\n      formData.append('addressCity', data.addressCity)\n      formData.append('addressState', data.addressState)\n      formData.append('addressZipcode', data.addressZipcode)\n\n      // Dados banc\u00e1rios\n      formData.append('bankCode', data.bankCode)\n      formData.append('bankAgency', data.bankAgency)\n      formData.append('bankAccount', data.bankAccount)\n      formData.append('bankAccountType', data.bankAccountType)\n\n      // Documentos\n      formData.append('cpfFile', data.cpfFile[0])\n      formData.append('rgFile', data.rgFile[0])\n      formData.append('addressProofFile', data.addressProofFile[0])\n      formData.append('selfieFile', data.selfieFile[0])\n\n      await ownerApi.submitKyc(formData)\n\n      toast.success('Documentos enviados com sucesso! Aguarde aprova\u00e7\u00e3o.')\n      navigate('/dashboard')\n    } catch (error) {\n      toast.error('Erro ao enviar documentos')\n    } finally {\n      setIsSubmitting(false)\n    }\n  }\n\n  return (\n    &lt;form onSubmit={handleSubmit(onSubmit)}&gt;\n      &lt;h1&gt;Enviar Documentos KYC&lt;/h1&gt;\n\n      &lt;input {...register('cpf')} placeholder=\"CPF\" /&gt;\n      &lt;input {...register('rg')} placeholder=\"RG\" /&gt;\n      &lt;input type=\"date\" {...register('birthDate')} /&gt;\n\n      {/* Endere\u00e7o */}\n      &lt;input {...register('addressStreet')} placeholder=\"Rua\" /&gt;\n      &lt;input {...register('addressNumber')} placeholder=\"N\u00famero\" /&gt;\n\n      {/* Dados banc\u00e1rios */}\n      &lt;input {...register('bankCode')} placeholder=\"Banco\" /&gt;\n      &lt;input {...register('bankAgency')} placeholder=\"Ag\u00eancia\" /&gt;\n      &lt;input {...register('bankAccount')} placeholder=\"Conta\" /&gt;\n\n      {/* Documentos */}\n      &lt;label&gt;\n        CPF (frente e verso):\n        &lt;input type=\"file\" {...register('cpfFile')} accept=\"image/*,application/pdf\" /&gt;\n      &lt;/label&gt;\n\n      &lt;label&gt;\n        RG (frente e verso):\n        &lt;input type=\"file\" {...register('rgFile')} accept=\"image/*,application/pdf\" /&gt;\n      &lt;/label&gt;\n\n      &lt;label&gt;\n        Comprovante de Endere\u00e7o:\n        &lt;input type=\"file\" {...register('addressProofFile')} accept=\"image/*,application/pdf\" /&gt;\n      &lt;/label&gt;\n\n      &lt;label&gt;\n        Selfie com Documento:\n        &lt;input type=\"file\" {...register('selfieFile')} accept=\"image/*\" /&gt;\n      &lt;/label&gt;\n\n      &lt;button type=\"submit\" disabled={isSubmitting}&gt;\n        {isSubmitting ? 'Enviando...' : 'Enviar Documentos'}\n      &lt;/button&gt;\n    &lt;/form&gt;\n  )\n}\n</code></pre>"},{"location":"apis/backend-api/endpoints/owner/#documentos-necessarios","title":"Documentos Necess\u00e1rios","text":"<ol> <li>CPF: Frente e verso (imagem ou PDF)</li> <li>RG: Frente e verso (imagem ou PDF)</li> <li>Comprovante de Endere\u00e7o: M\u00e1ximo 3 meses</li> <li>Selfie com Documento: Foto segurando documento</li> </ol>"},{"location":"apis/backend-api/endpoints/owner/#regras-de-negocio","title":"Regras de Neg\u00f3cio","text":"<ol> <li>Apenas Promoter/Influencer: Outros tipos n\u00e3o podem enviar KYC</li> <li>Subconta Iugu: Criada automaticamente ao enviar documentos</li> <li>Status Pending: Aguarda aprova\u00e7\u00e3o do admin</li> <li>Reenvio: Pode reenviar documentos se rejeitado</li> <li>Obrigat\u00f3rio para operar: Sem KYC aprovado, n\u00e3o pode receber comiss\u00f5es</li> </ol>"},{"location":"apis/backend-api/endpoints/owner/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<ul> <li>Processo KYC</li> <li>Perfil Promoter</li> <li>Perfil Influencer</li> </ul>"},{"location":"apis/backend-api/endpoints/payment/","title":"Endpoints: Payment","text":""},{"location":"apis/backend-api/endpoints/payment/#descricao","title":"Descri\u00e7\u00e3o","text":"<p>Endpoint para receber webhooks do Iugu sobre status de pagamentos.</p>"},{"location":"apis/backend-api/endpoints/payment/#post-apiwebhooksiugu","title":"POST /api/webhooks/iugu","text":"<p>Recebe notifica\u00e7\u00f5es do Iugu sobre mudan\u00e7as de status de invoice (pagamento).</p> <p>Auth: Webhook (valida\u00e7\u00e3o de assinatura)</p> <p>Headers: <pre><code>X-Iugu-Signature: sha256=abc123...\nContent-Type: application/json\n</code></pre></p> <p>Request: <pre><code>{\n  \"event\": \"invoice.status_changed\",\n  \"data\": {\n    \"id\": \"ABC123XYZ\",\n    \"status\": \"paid\",\n    \"total_cents\": 9990,\n    \"paid_at\": \"2025-01-15T11:00:00Z\",\n    \"payer\": {\n      \"email\": \"user@example.com\",\n      \"name\": \"Jo\u00e3o Silva\"\n    }\n  }\n}\n</code></pre></p> <p>Response (200): <pre><code>{\n  \"received\": true,\n  \"processed\": true,\n  \"paymentId\": 789\n}\n</code></pre></p> <p>Errors: - <code>401 Unauthorized</code>: Assinatura inv\u00e1lida - <code>404 Not Found</code>: Payment n\u00e3o encontrado - <code>200 OK</code>: J\u00e1 processado (idempot\u00eancia)</p> <p>C\u00f3digo Backend: <pre><code>// backend-api/Endpoints/WebHookEndpoint.cs\napp.MapPost(\"/api/webhooks/iugu\", async (\n    HttpRequest request,\n    PaymentService service,\n    IConfiguration config) =&gt;\n{\n    // Ler body\n    var body = await new StreamReader(request.Body).ReadToEndAsync();\n    var signature = request.Headers[\"X-Iugu-Signature\"].ToString();\n\n    // Validar assinatura\n    if (!ValidateSignature(body, signature, config[\"Iugu:WebhookSecret\"]))\n    {\n        _logger.LogWarning(\"Invalid Iugu webhook signature\");\n        return Results.Unauthorized();\n    }\n\n    var webhook = JsonSerializer.Deserialize&lt;IuguWebhook&gt;(body);\n\n    if (webhook.Event == \"invoice.status_changed\")\n    {\n        var processed = await service.HandleInvoiceStatusChangedAsync(webhook.Data);\n\n        return Results.Ok(new\n        {\n            Received = true,\n            Processed = processed.Success,\n            PaymentId = processed.PaymentId\n        });\n    }\n\n    return Results.Ok(new { Received = true, Processed = false });\n})\n.AllowAnonymous()\n.WithName(\"IuguWebhook\");\n\n// Valida\u00e7\u00e3o de assinatura HMAC SHA256\nprivate bool ValidateSignature(string body, string signature, string secret)\n{\n    var expectedHash = signature.Replace(\"sha256=\", \"\");\n\n    using var hmac = new HMACSHA256(Encoding.UTF8.GetBytes(secret));\n    var hash = hmac.ComputeHash(Encoding.UTF8.GetBytes(body));\n    var computedHash = BitConverter.ToString(hash).Replace(\"-\", \"\").ToLower();\n\n    return computedHash.Equals(expectedHash, StringComparison.OrdinalIgnoreCase);\n}\n</code></pre></p> <p>Service - Processar Status: <pre><code>// backend-api/Services/PaymentService.cs\npublic async Task&lt;ProcessResult&gt; HandleInvoiceStatusChangedAsync(IuguInvoiceData data)\n{\n    var payment = await _context.Payments\n        .Include(p =&gt; p.Order)\n        .ThenInclude(o =&gt; o.Video)\n        .ThenInclude(v =&gt; v.OwnerVideos)\n        .ThenInclude(ov =&gt; ov.Owner)\n        .FirstOrDefaultAsync(p =&gt; p.IuguInvoiceId == data.Id);\n\n    if (payment == null)\n    {\n        _logger.LogWarning(\"Payment not found for invoice {InvoiceId}\", data.Id);\n        return new ProcessResult { Success = false };\n    }\n\n    // Idempot\u00eancia - n\u00e3o processar se j\u00e1 foi pago\n    if (payment.Status == PaymentStatusEnum.Paid)\n    {\n        _logger.LogInformation(\"Payment {PaymentId} already processed\", payment.Id);\n        return new ProcessResult { Success = true, PaymentId = payment.Id };\n    }\n\n    using var transaction = await _context.Database.BeginTransactionAsync();\n\n    try\n    {\n        if (data.Status == \"paid\")\n        {\n            await ConfirmPaymentAsync(payment);\n        }\n        else if (data.Status == \"canceled\")\n        {\n            payment.Status = PaymentStatusEnum.Cancelled;\n            payment.UpdatedAt = DateTime.UtcNow;\n        }\n        else if (data.Status == \"refunded\")\n        {\n            payment.Status = PaymentStatusEnum.Refunded;\n            payment.UpdatedAt = DateTime.UtcNow;\n        }\n\n        await _context.SaveChangesAsync();\n        await transaction.CommitAsync();\n\n        return new ProcessResult { Success = true, PaymentId = payment.Id };\n    }\n    catch (Exception ex)\n    {\n        _logger.LogError(ex, \"Error processing webhook for payment {PaymentId}\", payment.Id);\n        await transaction.RollbackAsync();\n        throw;\n    }\n}\n\npublic async Task ConfirmPaymentAsync(Payment payment)\n{\n    // Atualizar payment\n    payment.Status = PaymentStatusEnum.Paid;\n    payment.IuguPaidAt = DateTime.UtcNow;\n    payment.UpdatedAt = DateTime.UtcNow;\n\n    // Criar incomes\n    var incomes = new List&lt;Income&gt;();\n\n    // 1. Plataforma\n    incomes.Add(new Income\n    {\n        OrderId = payment.Order.Id,\n        OwnerId = null,\n        Amount = payment.Order.PlatformAmount,\n        Type = IncomeTypeEnum.Platform,\n        Description = \"Comiss\u00e3o da plataforma\",\n        CreatedAt = DateTime.UtcNow\n    });\n\n    // 2. Owner\n    var owner = payment.Order.Video.OwnerVideos.First().Owner;\n    incomes.Add(new Income\n    {\n        OrderId = payment.Order.Id,\n        OwnerId = owner.Id,\n        Amount = payment.Order.OwnerAmount,\n        Type = IncomeTypeEnum.Owner,\n        Description = $\"Venda do v\u00eddeo: {payment.Order.Video.Title}\",\n        CreatedAt = DateTime.UtcNow\n    });\n\n    // 3. Promoter (se houver)\n    if (payment.Order.PromoterId.HasValue &amp;&amp; payment.Order.PromoterAmount &gt; 0)\n    {\n        incomes.Add(new Income\n        {\n            OrderId = payment.Order.Id,\n            OwnerId = payment.Order.PromoterId.Value,\n            Amount = payment.Order.PromoterAmount,\n            Type = IncomeTypeEnum.Promoter,\n            Description = $\"Comiss\u00e3o por divulga\u00e7\u00e3o: {payment.Order.Video.Title}\",\n            CreatedAt = DateTime.UtcNow\n        });\n    }\n\n    await _context.Incomes.AddRangeAsync(incomes);\n\n    // Criar notifica\u00e7\u00e3o\n    var user = await _context.Users.FindAsync(payment.Order.UserId);\n\n    var notification = new Notification\n    {\n        Type = NotificationTypeEnum.PaymentConfirmed,\n        Channel = user.NotificationPreference ?? NotificationChannelEnum.Email,\n        Email = user.Email,\n        Phone = user.Telephone,\n        MetadataJson = JsonSerializer.Serialize(new\n        {\n            OrderId = payment.Order.Id,\n            VideoTitle = payment.Order.Video.Title,\n            Amount = payment.Amount / 100m\n        }),\n        CreatedAt = DateTime.UtcNow\n    };\n\n    await _context.Notifications.AddAsync(notification);\n\n    _logger.LogInformation(\"Payment {PaymentId} confirmed successfully\", payment.Id);\n}\n</code></pre></p>"},{"location":"apis/backend-api/endpoints/payment/#idempotencia","title":"Idempot\u00eancia","text":"<p>O webhook pode chegar m\u00faltiplas vezes para o mesmo evento. \u00c9 crucial implementar idempot\u00eancia:</p> <pre><code>// Verificar se j\u00e1 foi processado\nif (payment.Status == PaymentStatusEnum.Paid)\n{\n    _logger.LogInformation(\"Payment already processed\");\n    return Results.Ok(new { Received = true, AlreadyProcessed = true });\n}\n</code></pre>"},{"location":"apis/backend-api/endpoints/payment/#eventos-iugu","title":"Eventos Iugu","text":"Evento Descri\u00e7\u00e3o A\u00e7\u00e3o <code>invoice.status_changed</code> (paid) Pagamento confirmado Confirmar payment, criar incomes <code>invoice.status_changed</code> (canceled) Pagamento cancelado Atualizar status para Cancelled <code>invoice.refunded</code> Pagamento estornado Atualizar status para Refunded <code>invoice.payment_failed</code> Falha no pagamento Logar (opcional: notificar usu\u00e1rio)"},{"location":"apis/backend-api/endpoints/payment/#validacao-de-assinatura","title":"Valida\u00e7\u00e3o de Assinatura","text":"<p>Importante: SEMPRE validar a assinatura para garantir que o webhook veio realmente do Iugu.</p> <pre><code>private bool ValidateSignature(string body, string signature, string secret)\n{\n    if (string.IsNullOrEmpty(signature))\n        return false;\n\n    var expectedHash = signature.Replace(\"sha256=\", \"\");\n\n    using var hmac = new HMACSHA256(Encoding.UTF8.GetBytes(secret));\n    var hash = hmac.ComputeHash(Encoding.UTF8.GetBytes(body));\n    var computedHash = BitConverter.ToString(hash).Replace(\"-\", \"\").ToLower();\n\n    return computedHash.Equals(expectedHash, StringComparison.OrdinalIgnoreCase);\n}\n</code></pre>"},{"location":"apis/backend-api/endpoints/payment/#configuracao-no-iugu","title":"Configura\u00e7\u00e3o no Iugu","text":"<ol> <li>Acesse https://app.iugu.com/webhooks</li> <li>Adicione URL: <code>https://seu-dominio.com/api/webhooks/iugu</code></li> <li>Selecione eventos: <code>invoice.status_changed</code>, <code>invoice.refunded</code></li> <li>Copie o Webhook Secret para <code>appsettings.json</code>:</li> </ol> <pre><code>{\n  \"Iugu\": {\n    \"ApiKey\": \"sua_api_key\",\n    \"WebhookSecret\": \"seu_webhook_secret\"\n  }\n}\n</code></pre>"},{"location":"apis/backend-api/endpoints/payment/#logs","title":"Logs","text":"<pre><code>_logger.LogInformation(\"Webhook received: {Event} for invoice {InvoiceId}\", \n    webhook.Event, webhook.Data.Id);\n\n_logger.LogWarning(\"Invalid webhook signature from IP {IP}\", \n    request.HttpContext.Connection.RemoteIpAddress);\n\n_logger.LogError(ex, \"Error processing webhook for payment {PaymentId}\", \n    payment.Id);\n</code></pre>"},{"location":"apis/backend-api/endpoints/payment/#monitoramento","title":"Monitoramento","text":""},{"location":"apis/backend-api/endpoints/payment/#webhooks-com-falha","title":"Webhooks com Falha","text":"<pre><code>SELECT \n    p.id,\n    p.iugu_invoice_id,\n    p.status,\n    p.updated_at,\n    EXTRACT(EPOCH FROM (NOW() - p.created_at))/3600 as hours_pending\nFROM payments p\nWHERE p.status = 'Pending'\n  AND p.created_at &lt; NOW() - INTERVAL '6 hours'\nORDER BY p.created_at;\n</code></pre>"},{"location":"apis/backend-api/endpoints/payment/#reprocessar-manualmente","title":"Reprocessar Manualmente","text":"<pre><code>// Criar endpoint admin para reprocessar\napp.MapPost(\"/api/admin/payments/{id:long}/reprocess\", async (\n    long id,\n    PaymentService service) =&gt;\n{\n    var payment = await _context.Payments.FindAsync(id);\n\n    if (payment == null)\n        return Results.NotFound();\n\n    // Buscar status no Iugu\n    var invoice = await _iuguService.GetInvoiceAsync(payment.IuguInvoiceId);\n\n    if (invoice.Status == \"paid\" &amp;&amp; payment.Status != PaymentStatusEnum.Paid)\n    {\n        await service.ConfirmPaymentAsync(payment);\n        await _context.SaveChangesAsync();\n\n        return Results.Ok(new { message = \"Payment reprocessed successfully\" });\n    }\n\n    return Results.Ok(new { message = \"No action needed\" });\n})\n.RequireAuthorization(\"Admin\");\n</code></pre>"},{"location":"apis/backend-api/endpoints/payment/#teste-local-com-ngrok","title":"Teste Local com ngrok","text":"<p>Para testar webhooks localmente:</p> <pre><code># Instalar ngrok\nbrew install ngrok\n\n# Criar t\u00fanel\nngrok http 7080\n\n# Usar URL gerada no Iugu\n# https://abc123.ngrok.io/api/webhooks/iugu\n</code></pre>"},{"location":"apis/backend-api/endpoints/payment/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<ul> <li>Orders - Criar pedidos</li> <li>Webhooks Iugu - Detalhes completos</li> <li>Split de Pagamento</li> </ul>"},{"location":"apis/backend-api/endpoints/promoter/","title":"Endpoints: Promoter","text":""},{"location":"apis/backend-api/endpoints/promoter/#descricao","title":"Descri\u00e7\u00e3o","text":"<p>Endpoints espec\u00edficos para Promoters (afiliados) gerenciarem links e acompanharem convers\u00f5es.</p>"},{"location":"apis/backend-api/endpoints/promoter/#post-apipromoteraffiliate-links","title":"POST /api/promoter/affiliate-links","text":"<p>Cria um novo link de afiliado para um v\u00eddeo.</p> <p>Auth: Requerido (Promoter com KYC aprovado)</p> <p>Request: <pre><code>POST /api/promoter/affiliate-links\nAuthorization: Bearer {token}\nContent-Type: application/json\n\n{\n  \"videoId\": 123\n}\n</code></pre></p> <p>Response (201): <pre><code>{\n  \"id\": 456,\n  \"videoId\": 123,\n  \"uniqueCode\": \"ABC12345\",\n  \"fullLink\": \"https://amasso.com.br/videos/123?ref=ABC12345\",\n  \"clicks\": 0,\n  \"createdAt\": \"2025-01-15T10:00:00Z\"\n}\n</code></pre></p> <p>Errors: - <code>400 Bad Request</code>: KYC n\u00e3o aprovado ou v\u00eddeo sem comiss\u00e3o - <code>401 Unauthorized</code>: Token inv\u00e1lido - <code>404 Not Found</code>: V\u00eddeo n\u00e3o encontrado</p> <p>C\u00f3digo Backend: <pre><code>// backend-api/Endpoints/PromoterEndpoint.cs\napp.MapPost(\"/api/promoter/affiliate-links\", async (\n    CreateAffiliateLinkDto dto,\n    HttpRequest request,\n    ApplicationDbContext context,\n    IConfiguration config) =&gt;\n{\n    var userId = GetUserIdFromToken(request);\n\n    var owner = await context.Owners\n        .FirstAsync(o =&gt; o.UserId == userId);\n\n    // Verificar KYC aprovado\n    if (owner.SubAccountStatus != OwnerSubAccountStatusEnum.Approved)\n    {\n        return Results.BadRequest(new \n        { \n            error = \"KYC n\u00e3o aprovado. Envie seus documentos primeiro.\" \n        });\n    }\n\n    // Verificar se v\u00eddeo tem comiss\u00e3o para promoters\n    var video = await context.Videos\n        .Include(v =&gt; v.VideoRevenueConfig)\n        .FirstAsync(v =&gt; v.Id == dto.VideoId);\n\n    if (video.VideoRevenueConfig.PromoterPercentage &lt;= 0)\n    {\n        return Results.BadRequest(new \n        { \n            error = \"Este v\u00eddeo n\u00e3o tem comiss\u00e3o para promoters\" \n        });\n    }\n\n    // Verificar se j\u00e1 existe link\n    var existingLink = await context.VideoAffiliateLinks\n        .FirstOrDefaultAsync(l =&gt; l.OwnerId == owner.Id &amp;&amp; \n                                  l.VideoId == dto.VideoId);\n\n    if (existingLink != null)\n    {\n        var baseUrl = config[\"App:BaseUrl\"];\n        return Results.Ok(new\n        {\n            Id = existingLink.Id,\n            VideoId = existingLink.VideoId,\n            UniqueCode = existingLink.UniqueCode,\n            FullLink = $\"{baseUrl}/videos/{existingLink.VideoId}?ref={existingLink.UniqueCode}\",\n            Clicks = existingLink.Clicks,\n            CreatedAt = existingLink.CreatedAt\n        });\n    }\n\n    // Criar novo link\n    var link = new VideoAffiliateLink\n    {\n        OwnerId = owner.Id,\n        VideoId = dto.VideoId,\n        UniqueCode = GenerateUniqueCode(),\n        Clicks = 0,\n        CreatedAt = DateTime.UtcNow\n    };\n\n    await context.VideoAffiliateLinks.AddAsync(link);\n    await context.SaveChangesAsync();\n\n    var fullLink = $\"{config[\"App:BaseUrl\"]}/videos/{link.VideoId}?ref={link.UniqueCode}\";\n\n    return Results.Created($\"/api/promoter/affiliate-links/{link.Id}\", new\n    {\n        Id = link.Id,\n        VideoId = link.VideoId,\n        UniqueCode = link.UniqueCode,\n        FullLink = fullLink,\n        Clicks = link.Clicks,\n        CreatedAt = link.CreatedAt\n    });\n})\n.RequireAuthorization()\n.WithName(\"CreateAffiliateLink\");\n\nprivate string GenerateUniqueCode()\n{\n    return Convert.ToBase64String(Guid.NewGuid().ToByteArray())\n        .Replace(\"+\", \"\").Replace(\"/\", \"\").Replace(\"=\", \"\")\n        .Substring(0, 8)\n        .ToUpper();\n}\n</code></pre></p>"},{"location":"apis/backend-api/endpoints/promoter/#get-apipromoteraffiliate-links","title":"GET /api/promoter/affiliate-links","text":"<p>Lista todos os links de afiliado do promoter.</p> <p>Auth: Requerido (Promoter)</p> <p>Response (200): <pre><code>[\n  {\n    \"id\": 456,\n    \"video\": {\n      \"id\": 123,\n      \"title\": \"V\u00eddeo Exclusivo\",\n      \"price\": 99.90,\n      \"promoterPercentage\": 30\n    },\n    \"uniqueCode\": \"ABC12345\",\n    \"fullLink\": \"https://amasso.com.br/videos/123?ref=ABC12345\",\n    \"clicks\": 150,\n    \"conversions\": 5,\n    \"conversionRate\": 3.33,\n    \"totalCommission\": 149.85,\n    \"createdAt\": \"2025-01-10T10:00:00Z\"\n  }\n]\n</code></pre></p> <p>C\u00f3digo Backend: <pre><code>app.MapGet(\"/api/promoter/affiliate-links\", async (\n    HttpRequest request,\n    ApplicationDbContext context,\n    IConfiguration config) =&gt;\n{\n    var userId = GetUserIdFromToken(request);\n    var owner = await context.Owners.FirstAsync(o =&gt; o.UserId == userId);\n\n    var links = await context.VideoAffiliateLinks\n        .Include(l =&gt; l.Video)\n        .ThenInclude(v =&gt; v.VideoRevenueConfig)\n        .Where(l =&gt; l.OwnerId == owner.Id)\n        .OrderByDescending(l =&gt; l.CreatedAt)\n        .ToListAsync();\n\n    var baseUrl = config[\"App:BaseUrl\"];\n\n    var result = links.Select(l =&gt;\n    {\n        var conversions = context.Orders\n            .Where(o =&gt; o.VideoAffiliateLinkId == l.Id &amp;&amp;\n                       o.Payment.Status == PaymentStatusEnum.Paid)\n            .Count();\n\n        var totalCommission = context.Incomes\n            .Where(i =&gt; i.OwnerId == owner.Id &amp;&amp;\n                       i.Type == IncomeTypeEnum.Promoter &amp;&amp;\n                       i.Order.VideoAffiliateLinkId == l.Id)\n            .Sum(i =&gt; i.Amount) / 100m;\n\n        return new\n        {\n            Id = l.Id,\n            Video = new\n            {\n                Id = l.Video.Id,\n                Title = l.Video.Title,\n                Price = l.Video.Price,\n                PromoterPercentage = l.Video.VideoRevenueConfig.PromoterPercentage\n            },\n            UniqueCode = l.UniqueCode,\n            FullLink = $\"{baseUrl}/videos/{l.VideoId}?ref={l.UniqueCode}\",\n            Clicks = l.Clicks,\n            Conversions = conversions,\n            ConversionRate = l.Clicks &gt; 0 ? (decimal)conversions / l.Clicks * 100 : 0,\n            TotalCommission = totalCommission,\n            CreatedAt = l.CreatedAt\n        };\n    });\n\n    return Results.Ok(result);\n})\n.RequireAuthorization()\n.WithName(\"GetAffiliateLinks\");\n</code></pre></p>"},{"location":"apis/backend-api/endpoints/promoter/#get-apipromoterdashboard","title":"GET /api/promoter/dashboard","text":"<p>Retorna dashboard com m\u00e9tricas do promoter.</p> <p>Auth: Requerido (Promoter)</p> <p>Response (200): <pre><code>{\n  \"totalEarnings\": 1498.50,\n  \"totalConversions\": 50,\n  \"totalClicks\": 1500,\n  \"conversionRate\": 3.33,\n  \"averageCommission\": 29.97,\n  \"topVideos\": [\n    {\n      \"videoId\": 123,\n      \"videoTitle\": \"V\u00eddeo Exclusivo\",\n      \"conversions\": 20,\n      \"earnings\": 599.40\n    }\n  ],\n  \"recentConversions\": [\n    {\n      \"orderId\": 789,\n      \"videoTitle\": \"V\u00eddeo Exclusivo\",\n      \"amount\": 99.90,\n      \"commission\": 29.97,\n      \"paidAt\": \"2025-01-15T11:00:00Z\"\n    }\n  ]\n}\n</code></pre></p> <p>C\u00f3digo Backend: <pre><code>app.MapGet(\"/api/promoter/dashboard\", async (\n    HttpRequest request,\n    ApplicationDbContext context) =&gt;\n{\n    var userId = GetUserIdFromToken(request);\n    var owner = await context.Owners.FirstAsync(o =&gt; o.UserId == userId);\n\n    var incomes = await context.Incomes\n        .Include(i =&gt; i.Order)\n        .ThenInclude(o =&gt; o.Video)\n        .Where(i =&gt; i.OwnerId == owner.Id &amp;&amp;\n                    i.Type == IncomeTypeEnum.Promoter)\n        .ToListAsync();\n\n    var links = await context.VideoAffiliateLinks\n        .Where(l =&gt; l.OwnerId == owner.Id)\n        .ToListAsync();\n\n    var totalClicks = links.Sum(l =&gt; l.Clicks);\n    var totalConversions = incomes.Count;\n\n    var dashboard = new\n    {\n        TotalEarnings = incomes.Sum(i =&gt; i.Amount) / 100m,\n        TotalConversions = totalConversions,\n        TotalClicks = totalClicks,\n        ConversionRate = totalClicks &gt; 0 \n            ? (decimal)totalConversions / totalClicks * 100 \n            : 0,\n        AverageCommission = totalConversions &gt; 0\n            ? incomes.Average(i =&gt; i.Amount) / 100m\n            : 0,\n        TopVideos = incomes\n            .GroupBy(i =&gt; i.Order.Video)\n            .OrderByDescending(g =&gt; g.Sum(i =&gt; i.Amount))\n            .Take(5)\n            .Select(g =&gt; new\n            {\n                VideoId = g.Key.Id,\n                VideoTitle = g.Key.Title,\n                Conversions = g.Count(),\n                Earnings = g.Sum(i =&gt; i.Amount) / 100m\n            }),\n        RecentConversions = incomes\n            .OrderByDescending(i =&gt; i.CreatedAt)\n            .Take(10)\n            .Select(i =&gt; new\n            {\n                OrderId = i.OrderId,\n                VideoTitle = i.Order.Video.Title,\n                Amount = i.Order.Amount / 100m,\n                Commission = i.Amount / 100m,\n                PaidAt = i.Order.Payment.IuguPaidAt\n            })\n    };\n\n    return Results.Ok(dashboard);\n})\n.RequireAuthorization()\n.WithName(\"GetPromoterDashboard\");\n</code></pre></p>"},{"location":"apis/backend-api/endpoints/promoter/#get-apipromoterconversions","title":"GET /api/promoter/conversions","text":"<p>Lista todas as convers\u00f5es (vendas) do promoter.</p> <p>Auth: Requerido (Promoter)</p> <p>Query Parameters:</p> Par\u00e2metro Tipo Descri\u00e7\u00e3o <code>startDate</code> date Data inicial <code>endDate</code> date Data final <code>videoId</code> int Filtrar por v\u00eddeo <p>Response (200): <pre><code>[\n  {\n    \"orderId\": 789,\n    \"video\": {\n      \"id\": 123,\n      \"title\": \"V\u00eddeo Exclusivo\"\n    },\n    \"buyer\": {\n      \"name\": \"Jo\u00e3o Silva\"\n    },\n    \"orderAmount\": 99.90,\n    \"commissionAmount\": 29.97,\n    \"paidAt\": \"2025-01-15T11:00:00Z\"\n  }\n]\n</code></pre></p> <p>C\u00f3digo Backend: <pre><code>app.MapGet(\"/api/promoter/conversions\", async (\n    HttpRequest request,\n    ApplicationDbContext context,\n    DateTime? startDate = null,\n    DateTime? endDate = null,\n    long? videoId = null) =&gt;\n{\n    var userId = GetUserIdFromToken(request);\n    var owner = await context.Owners.FirstAsync(o =&gt; o.UserId == userId);\n\n    var query = context.Incomes\n        .Include(i =&gt; i.Order)\n        .ThenInclude(o =&gt; o.Video)\n        .Include(i =&gt; i.Order)\n        .ThenInclude(o =&gt; o.User)\n        .Include(i =&gt; i.Order)\n        .ThenInclude(o =&gt; o.Payment)\n        .Where(i =&gt; i.OwnerId == owner.Id &amp;&amp;\n                    i.Type == IncomeTypeEnum.Promoter);\n\n    if (startDate.HasValue)\n        query = query.Where(i =&gt; i.CreatedAt &gt;= startDate.Value);\n\n    if (endDate.HasValue)\n        query = query.Where(i =&gt; i.CreatedAt &lt;= endDate.Value);\n\n    if (videoId.HasValue)\n        query = query.Where(i =&gt; i.Order.VideoId == videoId.Value);\n\n    var conversions = await query\n        .OrderByDescending(i =&gt; i.CreatedAt)\n        .Select(i =&gt; new\n        {\n            OrderId = i.OrderId,\n            Video = new\n            {\n                Id = i.Order.Video.Id,\n                Title = i.Order.Video.Title\n            },\n            Buyer = new\n            {\n                Name = $\"{i.Order.User.FirstName} {i.Order.User.LastName}\"\n            },\n            OrderAmount = i.Order.Amount / 100m,\n            CommissionAmount = i.Amount / 100m,\n            PaidAt = i.Order.Payment.IuguPaidAt\n        })\n        .ToListAsync();\n\n    return Results.Ok(conversions);\n})\n.RequireAuthorization()\n.WithName(\"GetPromoterConversions\");\n</code></pre></p>"},{"location":"apis/backend-api/endpoints/promoter/#frontend-exemplo-de-uso","title":"Frontend - Exemplo de Uso","text":"<pre><code>// frontend-react/src/services/api/promoterApi.ts\nexport const promoterApi = {\n  createAffiliateLink: async (videoId: number) =&gt; {\n    const response = await httpClient.post('/api/promoter/affiliate-links', {\n      videoId\n    })\n    return response.data\n  },\n\n  getAffiliateLinks: async () =&gt; {\n    const response = await httpClient.get('/api/promoter/affiliate-links')\n    return response.data\n  },\n\n  getDashboard: async () =&gt; {\n    const response = await httpClient.get('/api/promoter/dashboard')\n    return response.data\n  },\n\n  getConversions: async (filters?: ConversionFilters) =&gt; {\n    const response = await httpClient.get('/api/promoter/conversions', {\n      params: filters\n    })\n    return response.data\n  }\n}\n\n// frontend-react/src/pages/Promoter/PromoterDashboard.tsx\nconst PromoterDashboard = () =&gt; {\n  const { data: dashboard } = useQuery({\n    queryKey: ['promoter-dashboard'],\n    queryFn: promoterApi.getDashboard\n  })\n\n  const { data: links } = useQuery({\n    queryKey: ['affiliate-links'],\n    queryFn: promoterApi.getAffiliateLinks\n  })\n\n  const handleCopyLink = (link: string) =&gt; {\n    navigator.clipboard.writeText(link)\n    toast.success('Link copiado!')\n  }\n\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Dashboard do Promoter&lt;/h1&gt;\n\n      &lt;Grid cols={4}&gt;\n        &lt;Card&gt;\n          &lt;h3&gt;Total de Comiss\u00f5es&lt;/h3&gt;\n          &lt;p className=\"text-3xl\"&gt;R$ {dashboard?.totalEarnings.toFixed(2)}&lt;/p&gt;\n        &lt;/Card&gt;\n\n        &lt;Card&gt;\n          &lt;h3&gt;Convers\u00f5es&lt;/h3&gt;\n          &lt;p className=\"text-3xl\"&gt;{dashboard?.totalConversions}&lt;/p&gt;\n        &lt;/Card&gt;\n\n        &lt;Card&gt;\n          &lt;h3&gt;Cliques&lt;/h3&gt;\n          &lt;p className=\"text-3xl\"&gt;{dashboard?.totalClicks}&lt;/p&gt;\n        &lt;/Card&gt;\n\n        &lt;Card&gt;\n          &lt;h3&gt;Taxa de Convers\u00e3o&lt;/h3&gt;\n          &lt;p className=\"text-3xl\"&gt;{dashboard?.conversionRate.toFixed(2)}%&lt;/p&gt;\n        &lt;/Card&gt;\n      &lt;/Grid&gt;\n\n      &lt;h2&gt;Meus Links&lt;/h2&gt;\n      &lt;Table&gt;\n        {links?.map(link =&gt; (\n          &lt;tr key={link.id}&gt;\n            &lt;td&gt;{link.video.title}&lt;/td&gt;\n            &lt;td&gt;{link.clicks}&lt;/td&gt;\n            &lt;td&gt;{link.conversions}&lt;/td&gt;\n            &lt;td&gt;R$ {link.totalCommission.toFixed(2)}&lt;/td&gt;\n            &lt;td&gt;\n              &lt;Button onClick={() =&gt; handleCopyLink(link.fullLink)}&gt;\n                Copiar Link\n              &lt;/Button&gt;\n            &lt;/td&gt;\n          &lt;/tr&gt;\n        ))}\n      &lt;/Table&gt;\n    &lt;/div&gt;\n  )\n}\n</code></pre>"},{"location":"apis/backend-api/endpoints/promoter/#regras-de-negocio","title":"Regras de Neg\u00f3cio","text":"<ol> <li>KYC aprovado: Obrigat\u00f3rio para criar links</li> <li>V\u00eddeos com comiss\u00e3o: Apenas v\u00eddeos com <code>promoter_percentage &gt; 0%</code></li> <li>Link \u00fanico: 1 link por v\u00eddeo por promoter</li> <li>Rastreamento de cliques: Incrementado automaticamente</li> <li>Comiss\u00f5es autom\u00e1ticas: Creditadas quando pagamento confirmado</li> </ol>"},{"location":"apis/backend-api/endpoints/promoter/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<ul> <li>Perfil Promoter</li> <li>Fluxo de Link de Afiliado</li> <li>Caso de Uso: Promoter Gera Link</li> </ul>"},{"location":"apis/backend-api/endpoints/user/","title":"Endpoints: User","text":""},{"location":"apis/backend-api/endpoints/user/#descricao","title":"Descri\u00e7\u00e3o","text":"<p>Endpoints relacionados ao perfil do usu\u00e1rio logado.</p>"},{"location":"apis/backend-api/endpoints/user/#get-apiusersme","title":"GET /api/users/me","text":"<p>Retorna o perfil do usu\u00e1rio autenticado.</p> <p>Auth: Requerido (JWT)</p> <p>Request: <pre><code>GET /api/users/me\nAuthorization: Bearer {token}\n</code></pre></p> <p>Response (200): <pre><code>{\n  \"id\": 1,\n  \"email\": \"user@example.com\",\n  \"firstName\": \"Jo\u00e3o\",\n  \"lastName\": \"Silva\",\n  \"type\": \"Default\",\n  \"cpf\": \"12345678901\",\n  \"birthDate\": \"1990-01-15\",\n  \"telephone\": \"11987654321\",\n  \"notificationPreference\": \"All\",\n  \"isActive\": true,\n  \"createdAt\": \"2025-01-01T10:00:00Z\"\n}\n</code></pre></p> <p>Exemplo cURL: <pre><code>curl -X GET http://localhost:7080/api/users/me \\\n  -H \"Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"\n</code></pre></p> <p>C\u00f3digo Backend: <pre><code>// backend-api/Endpoints/UserEndpoints.cs\napp.MapGet(\"/api/users/me\", async (\n    HttpRequest request,\n    ApplicationDbContext context) =&gt;\n{\n    var userId = GetUserIdFromToken(request);\n\n    var user = await context.Users\n        .FirstOrDefaultAsync(u =&gt; u.Id == userId);\n\n    if (user == null)\n        return Results.NotFound();\n\n    return Results.Ok(new UserDto\n    {\n        Id = user.Id,\n        Email = user.Email,\n        FirstName = user.FirstName,\n        LastName = user.LastName,\n        Type = user.Type,\n        Cpf = user.Cpf,\n        BirthDate = user.BirthDate,\n        Telephone = user.Telephone,\n        NotificationPreference = user.NotificationPreference,\n        IsActive = user.IsActive,\n        CreatedAt = user.CreatedAt\n    });\n})\n.RequireAuthorization()\n.WithName(\"GetMyProfile\");\n</code></pre></p>"},{"location":"apis/backend-api/endpoints/user/#put-apiusersme","title":"PUT /api/users/me","text":"<p>Atualiza o perfil do usu\u00e1rio autenticado.</p> <p>Auth: Requerido (JWT)</p> <p>Request: <pre><code>PUT /api/users/me\nAuthorization: Bearer {token}\nContent-Type: application/json\n\n{\n  \"firstName\": \"Jo\u00e3o\",\n  \"lastName\": \"Silva\",\n  \"telephone\": \"11987654321\",\n  \"notificationPreference\": \"Email\"\n}\n</code></pre></p> <p>Response (200): <pre><code>{\n  \"id\": 1,\n  \"email\": \"user@example.com\",\n  \"firstName\": \"Jo\u00e3o\",\n  \"lastName\": \"Silva\",\n  \"telephone\": \"11987654321\",\n  \"notificationPreference\": \"Email\",\n  \"updatedAt\": \"2025-01-15T14:30:00Z\"\n}\n</code></pre></p> <p>Errors: - <code>400 Bad Request</code>: Dados inv\u00e1lidos - <code>401 Unauthorized</code>: Token inv\u00e1lido - <code>404 Not Found</code>: Usu\u00e1rio n\u00e3o encontrado</p> <p>Exemplo cURL: <pre><code>curl -X PUT http://localhost:7080/api/users/me \\\n  -H \"Authorization: Bearer {token}\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"firstName\": \"Jo\u00e3o\",\n    \"lastName\": \"Silva\",\n    \"telephone\": \"11987654321\",\n    \"notificationPreference\": \"Email\"\n  }'\n</code></pre></p> <p>C\u00f3digo Backend: <pre><code>// backend-api/Endpoints/UserEndpoints.cs\napp.MapPut(\"/api/users/me\", async (\n    UpdateUserDto dto,\n    HttpRequest request,\n    ApplicationDbContext context) =&gt;\n{\n    var userId = GetUserIdFromToken(request);\n\n    var user = await context.Users.FindAsync(userId);\n\n    if (user == null)\n        return Results.NotFound();\n\n    user.FirstName = dto.FirstName;\n    user.LastName = dto.LastName;\n    user.Telephone = dto.Telephone;\n    user.NotificationPreference = dto.NotificationPreference;\n    user.UpdatedAt = DateTime.UtcNow;\n\n    await context.SaveChangesAsync();\n\n    return Results.Ok(new UserDto\n    {\n        Id = user.Id,\n        Email = user.Email,\n        FirstName = user.FirstName,\n        LastName = user.LastName,\n        Telephone = user.Telephone,\n        NotificationPreference = user.NotificationPreference,\n        UpdatedAt = user.UpdatedAt\n    });\n})\n.RequireAuthorization()\n.WithName(\"UpdateMyProfile\");\n</code></pre></p> <p>DTO: <pre><code>// backend-api/Data/Dtos/UpdateUserDto.cs\npublic record UpdateUserDto\n{\n    public string FirstName { get; init; }\n    public string LastName { get; init; }\n    public string? Telephone { get; init; }\n    public NotificationChannelEnum? NotificationPreference { get; init; }\n}\n</code></pre></p>"},{"location":"apis/backend-api/endpoints/user/#frontend-exemplo-de-uso","title":"Frontend - Exemplo de Uso","text":"<pre><code>// frontend-react/src/services/api/userApi.ts\nexport const userApi = {\n  getMe: async () =&gt; {\n    const response = await httpClient.get('/api/users/me')\n    return response.data\n  },\n\n  updateMe: async (data: UpdateUserDto) =&gt; {\n    const response = await httpClient.put('/api/users/me', data)\n    return response.data\n  }\n}\n\n// frontend-react/src/pages/Profile/EditProfile.tsx\nconst EditProfile = () =&gt; {\n  const { data: user } = useQuery({\n    queryKey: ['user-profile'],\n    queryFn: userApi.getMe\n  })\n\n  const { register, handleSubmit } = useForm&lt;UpdateUserDto&gt;({\n    defaultValues: user\n  })\n\n  const onSubmit = async (data: UpdateUserDto) =&gt; {\n    await userApi.updateMe(data)\n    toast.success('Perfil atualizado!')\n  }\n\n  return (\n    &lt;form onSubmit={handleSubmit(onSubmit)}&gt;\n      &lt;input {...register('firstName')} /&gt;\n      &lt;input {...register('lastName')} /&gt;\n      &lt;input {...register('telephone')} /&gt;\n      &lt;select {...register('notificationPreference')}&gt;\n        &lt;option value=\"Email\"&gt;Email&lt;/option&gt;\n        &lt;option value=\"WhatsApp\"&gt;WhatsApp&lt;/option&gt;\n        &lt;option value=\"All\"&gt;Ambos&lt;/option&gt;\n      &lt;/select&gt;\n      &lt;button type=\"submit\"&gt;Salvar&lt;/button&gt;\n    &lt;/form&gt;\n  )\n}\n</code></pre>"},{"location":"apis/backend-api/endpoints/user/#regras-de-negocio","title":"Regras de Neg\u00f3cio","text":"<ol> <li>Email: N\u00e3o pode ser alterado via este endpoint</li> <li>Type: N\u00e3o pode ser alterado (definido no cadastro)</li> <li>NotificationPreference: Opcional (null = sem prefer\u00eancia)</li> <li>Telephone: Formato: DDD + n\u00famero (10-11 d\u00edgitos)</li> </ol>"},{"location":"apis/backend-api/endpoints/user/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<ul> <li>Autentica\u00e7\u00e3o</li> <li>Perfis de Usu\u00e1rio</li> </ul>"},{"location":"apis/backend-api/endpoints/video/","title":"Endpoints: Video","text":""},{"location":"apis/backend-api/endpoints/video/#descricao","title":"Descri\u00e7\u00e3o","text":"<p>Endpoints relacionados ao cat\u00e1logo de v\u00eddeos.</p>"},{"location":"apis/backend-api/endpoints/video/#get-apivideos","title":"GET /api/videos","text":"<p>Lista todos os v\u00eddeos dispon\u00edveis com filtros opcionais.</p> <p>Auth: Opcional (p\u00fablica)</p> <p>Query Parameters:</p> Par\u00e2metro Tipo Descri\u00e7\u00e3o Padr\u00e3o <code>page</code> int P\u00e1gina atual 1 <code>perPage</code> int Itens por p\u00e1gina (max 100) 20 <code>search</code> string Busca no t\u00edtulo/descri\u00e7\u00e3o - <code>minPrice</code> decimal Pre\u00e7o m\u00ednimo - <code>maxPrice</code> decimal Pre\u00e7o m\u00e1ximo - <code>sortBy</code> string Ordena\u00e7\u00e3o: <code>newest</code>, <code>oldest</code>, <code>price_asc</code>, <code>price_desc</code> <code>newest</code> <p>Request: <pre><code>GET /api/videos?page=1&amp;perPage=20&amp;sortBy=newest\n</code></pre></p> <p>Response (200): <pre><code>{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"title\": \"V\u00eddeo Exclusivo\",\n      \"description\": \"Descri\u00e7\u00e3o do v\u00eddeo\",\n      \"thumbImgUrl\": \"https://cloudinary.com/...\",\n      \"price\": 99.90,\n      \"durationSeconds\": 3600,\n      \"releaseDate\": \"2025-01-01\",\n      \"expirationSaleDate\": \"2025-12-31\",\n      \"isActive\": true\n    }\n  ],\n  \"page\": 1,\n  \"perPage\": 20,\n  \"total\": 150,\n  \"totalPages\": 8\n}\n</code></pre></p> <p>Exemplo cURL: <pre><code># Buscar v\u00eddeos\ncurl \"http://localhost:7080/api/videos?search=exclusivo&amp;minPrice=50&amp;maxPrice=200\"\n\n# Ordenar por pre\u00e7o\ncurl \"http://localhost:7080/api/videos?sortBy=price_asc\"\n</code></pre></p> <p>C\u00f3digo Backend: <pre><code>// backend-api/Endpoints/VideoEndpoints.cs\napp.MapGet(\"/api/videos\", async (\n    ApplicationDbContext context,\n    int page = 1,\n    int perPage = 20,\n    string? search = null,\n    decimal? minPrice = null,\n    decimal? maxPrice = null,\n    string sortBy = \"newest\") =&gt;\n{\n    var query = context.Videos\n        .Include(v =&gt; v.VideoRevenueConfig)\n        .Where(v =&gt; v.IsActive &amp;&amp;\n                    (v.ReleaseDate == null || v.ReleaseDate &lt;= DateTime.Today) &amp;&amp;\n                    (v.ExpirationSaleDate == null || v.ExpirationSaleDate &gt;= DateTime.Today));\n\n    // Filtros\n    if (!string.IsNullOrEmpty(search))\n    {\n        query = query.Where(v =&gt; v.Title.Contains(search) || \n                                 v.Description.Contains(search));\n    }\n\n    if (minPrice.HasValue)\n        query = query.Where(v =&gt; v.Price &gt;= minPrice.Value);\n\n    if (maxPrice.HasValue)\n        query = query.Where(v =&gt; v.Price &lt;= maxPrice.Value);\n\n    // Ordena\u00e7\u00e3o\n    query = sortBy switch\n    {\n        \"oldest\" =&gt; query.OrderBy(v =&gt; v.CreatedAt),\n        \"price_asc\" =&gt; query.OrderBy(v =&gt; v.Price),\n        \"price_desc\" =&gt; query.OrderByDescending(v =&gt; v.Price),\n        _ =&gt; query.OrderByDescending(v =&gt; v.CreatedAt)\n    };\n\n    var total = await query.CountAsync();\n    var videos = await query\n        .Skip((page - 1) * perPage)\n        .Take(perPage)\n        .ToListAsync();\n\n    return Results.Ok(new\n    {\n        Data = videos.Select(v =&gt; new VideoListDto\n        {\n            Id = v.Id,\n            Title = v.Title,\n            Description = v.Description,\n            ThumbImgUrl = v.ThumbImgUrl,\n            Price = v.Price,\n            DurationSeconds = v.DurationSeconds,\n            ReleaseDate = v.ReleaseDate,\n            ExpirationSaleDate = v.ExpirationSaleDate,\n            IsActive = v.IsActive\n        }),\n        Page = page,\n        PerPage = perPage,\n        Total = total,\n        TotalPages = (int)Math.Ceiling((double)total / perPage)\n    });\n})\n.AllowAnonymous()\n.WithName(\"ListVideos\");\n</code></pre></p>"},{"location":"apis/backend-api/endpoints/video/#get-apivideosid","title":"GET /api/videos/:id","text":"<p>Retorna detalhes completos de um v\u00eddeo espec\u00edfico.</p> <p>Auth: Opcional (p\u00fablica)</p> <p>Request: <pre><code>GET /api/videos/123\n</code></pre></p> <p>Response (200): <pre><code>{\n  \"id\": 123,\n  \"title\": \"V\u00eddeo Exclusivo\",\n  \"description\": \"Descri\u00e7\u00e3o completa do v\u00eddeo\",\n  \"cloudinaryPublicId\": \"videos/abc123\",\n  \"thumbImgUrl\": \"https://cloudinary.com/...\",\n  \"price\": 99.90,\n  \"durationSeconds\": 3600,\n  \"releaseDate\": \"2025-01-01\",\n  \"expirationSaleDate\": \"2025-12-31\",\n  \"expirationViewDate\": \"2026-01-31\",\n  \"videoRevenueConfig\": {\n    \"platformPercentage\": 20,\n    \"ownerPercentage\": 50,\n    \"promoterPercentage\": 30\n  },\n  \"influencers\": [\n    {\n      \"id\": 5,\n      \"name\": \"Jo\u00e3o Silva\",\n      \"percentage\": 50\n    }\n  ],\n  \"trailers\": [\n    {\n      \"url\": \"https://cloudinary.com/trailer123\",\n      \"durationSeconds\": 30\n    }\n  ]\n}\n</code></pre></p> <p>Errors: - <code>404 Not Found</code>: V\u00eddeo n\u00e3o encontrado ou inativo</p> <p>C\u00f3digo Backend: <pre><code>// backend-api/Endpoints/VideoEndpoints.cs\napp.MapGet(\"/api/videos/{id:long}\", async (\n    long id,\n    ApplicationDbContext context) =&gt;\n{\n    var video = await context.Videos\n        .Include(v =&gt; v.VideoRevenueConfig)\n        .Include(v =&gt; v.OwnerVideos)\n        .ThenInclude(ov =&gt; ov.Owner)\n        .ThenInclude(o =&gt; o.User)\n        .Include(v =&gt; v.VideoTrailers)\n        .FirstOrDefaultAsync(v =&gt; v.Id == id &amp;&amp; v.IsActive);\n\n    if (video == null)\n        return Results.NotFound();\n\n    return Results.Ok(new VideoDetailDto\n    {\n        Id = video.Id,\n        Title = video.Title,\n        Description = video.Description,\n        CloudinaryPublicId = video.CloudinaryPublicId,\n        ThumbImgUrl = video.ThumbImgUrl,\n        Price = video.Price,\n        DurationSeconds = video.DurationSeconds,\n        ReleaseDate = video.ReleaseDate,\n        ExpirationSaleDate = video.ExpirationSaleDate,\n        ExpirationViewDate = video.ExpirationViewDate,\n        VideoRevenueConfig = new RevenueConfigDto\n        {\n            PlatformPercentage = video.VideoRevenueConfig.PlatformPercentage,\n            OwnerPercentage = video.VideoRevenueConfig.OwnerPercentage,\n            PromoterPercentage = video.VideoRevenueConfig.PromoterPercentage\n        },\n        Influencers = video.OwnerVideos.Select(ov =&gt; new InfluencerDto\n        {\n            Id = ov.Owner.Id,\n            Name = $\"{ov.Owner.User.FirstName} {ov.Owner.User.LastName}\",\n            Percentage = video.VideoRevenueConfig.OwnerPercentage\n        }).ToList(),\n        Trailers = video.VideoTrailers.Select(vt =&gt; new TrailerDto\n        {\n            Url = vt.CloudinaryPublicId,\n            DurationSeconds = vt.DurationSeconds\n        }).ToList()\n    });\n})\n.AllowAnonymous()\n.WithName(\"GetVideoDetails\");\n</code></pre></p>"},{"location":"apis/backend-api/endpoints/video/#get-apivideosidcheck-access","title":"GET /api/videos/:id/check-access","text":"<p>Verifica se o usu\u00e1rio logado tem acesso ao v\u00eddeo (comprou).</p> <p>Auth: Requerido (JWT)</p> <p>Request: <pre><code>GET /api/videos/123/check-access\nAuthorization: Bearer {token}\n</code></pre></p> <p>Response (200): <pre><code>{\n  \"hasAccess\": true,\n  \"purchasedAt\": \"2025-01-10T15:30:00Z\",\n  \"canWatch\": true,\n  \"expirationViewDate\": \"2026-01-31\"\n}\n</code></pre></p> <p>C\u00f3digo Backend: <pre><code>// backend-api/Endpoints/VideoEndpoints.cs\napp.MapGet(\"/api/videos/{id:long}/check-access\", async (\n    long id,\n    HttpRequest request,\n    ApplicationDbContext context) =&gt;\n{\n    var userId = GetUserIdFromToken(request);\n\n    var order = await context.Orders\n        .Include(o =&gt; o.Payment)\n        .Include(o =&gt; o.Video)\n        .FirstOrDefaultAsync(o =&gt; o.UserId == userId &amp;&amp;\n                                  o.VideoId == id &amp;&amp;\n                                  o.Payment.Status == PaymentStatusEnum.Paid);\n\n    if (order == null)\n    {\n        return Results.Ok(new\n        {\n            HasAccess = false,\n            CanWatch = false\n        });\n    }\n\n    var canWatch = order.Video.ExpirationViewDate == null ||\n                   order.Video.ExpirationViewDate &gt;= DateTime.Today;\n\n    return Results.Ok(new\n    {\n        HasAccess = true,\n        PurchasedAt = order.Payment.IuguPaidAt,\n        CanWatch = canWatch,\n        ExpirationViewDate = order.Video.ExpirationViewDate\n    });\n})\n.RequireAuthorization()\n.WithName(\"CheckVideoAccess\");\n</code></pre></p>"},{"location":"apis/backend-api/endpoints/video/#frontend-exemplo-de-uso","title":"Frontend - Exemplo de Uso","text":"<pre><code>// frontend-react/src/services/api/videoApi.ts\nexport const videoApi = {\n  getAll: async (params?: VideoFilters) =&gt; {\n    const response = await httpClient.get('/api/videos', { params })\n    return response.data\n  },\n\n  getById: async (id: number) =&gt; {\n    const response = await httpClient.get(`/api/videos/${id}`)\n    return response.data\n  },\n\n  checkAccess: async (id: number) =&gt; {\n    const response = await httpClient.get(`/api/videos/${id}/check-access`)\n    return response.data\n  }\n}\n\n// frontend-react/src/pages/Videos/VideoList.tsx\nconst VideoList = () =&gt; {\n  const [filters, setFilters] = useState&lt;VideoFilters&gt;({\n    search: '',\n    sortBy: 'newest'\n  })\n\n  const { data } = useQuery({\n    queryKey: ['videos', filters],\n    queryFn: () =&gt; videoApi.getAll(filters)\n  })\n\n  return (\n    &lt;div&gt;\n      &lt;input\n        value={filters.search}\n        onChange={(e) =&gt; setFilters({ ...filters, search: e.target.value })}\n        placeholder=\"Buscar v\u00eddeos...\"\n      /&gt;\n\n      &lt;select\n        value={filters.sortBy}\n        onChange={(e) =&gt; setFilters({ ...filters, sortBy: e.target.value })}\n      &gt;\n        &lt;option value=\"newest\"&gt;Mais Recentes&lt;/option&gt;\n        &lt;option value=\"price_asc\"&gt;Menor Pre\u00e7o&lt;/option&gt;\n        &lt;option value=\"price_desc\"&gt;Maior Pre\u00e7o&lt;/option&gt;\n      &lt;/select&gt;\n\n      &lt;VideoGrid videos={data.data} /&gt;\n\n      &lt;Pagination\n        currentPage={data.page}\n        totalPages={data.totalPages}\n      /&gt;\n    &lt;/div&gt;\n  )\n}\n</code></pre>"},{"location":"apis/backend-api/endpoints/video/#regras-de-negocio","title":"Regras de Neg\u00f3cio","text":"<ol> <li>V\u00eddeos p\u00fablicos: Listagem n\u00e3o requer autentica\u00e7\u00e3o</li> <li>ReleaseDate: V\u00eddeo s\u00f3 aparece ap\u00f3s esta data</li> <li>ExpirationSaleDate: V\u00eddeo n\u00e3o aparece se passada esta data</li> <li>ExpirationViewDate: Usu\u00e1rio que comprou n\u00e3o pode assistir ap\u00f3s esta data</li> <li>IsActive: Apenas v\u00eddeos ativos aparecem</li> </ol>"},{"location":"apis/backend-api/endpoints/video/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<ul> <li>Orders - Como comprar v\u00eddeos</li> <li>Fluxo de Compra</li> <li>Gest\u00e3o de V\u00eddeos</li> </ul>"},{"location":"apis/email-api/hangfire-jobs/","title":"Hangfire Jobs","text":""},{"location":"apis/email-api/hangfire-jobs/#descricao","title":"Descri\u00e7\u00e3o","text":"<p>Hangfire \u00e9 utilizado para processamento de jobs em background, incluindo envio de notifica\u00e7\u00f5es e limpeza de dados antigos.</p>"},{"location":"apis/email-api/hangfire-jobs/#dashboard","title":"Dashboard","text":"<p>Acesse: <code>http://localhost:5014/dashboard</code></p>"},{"location":"apis/email-api/hangfire-jobs/#autenticacao","title":"Autentica\u00e7\u00e3o","text":"<pre><code>// email-api/Program.cs\napp.UseHangfireDashboard(\"/dashboard\", new DashboardOptions\n{\n    Authorization = new[]\n    {\n        new HangfireAuthorizationFilter()\n    },\n    DashboardTitle = \"Amasso - Email API Jobs\"\n});\n\npublic class HangfireAuthorizationFilter : IDashboardAuthorizationFilter\n{\n    public bool Authorize(DashboardContext context)\n    {\n        var httpContext = context.GetHttpContext();\n\n        // B\u00e1sico: usu\u00e1rio/senha\n        var auth = httpContext.Request.Headers[\"Authorization\"].ToString();\n\n        if (string.IsNullOrEmpty(auth))\n        {\n            httpContext.Response.StatusCode = 401;\n            httpContext.Response.Headers[\"WWW-Authenticate\"] = \"Basic realm=\\\"Hangfire Dashboard\\\"\";\n            return false;\n        }\n\n        // Decode Basic Auth\n        var encodedCreds = auth.Replace(\"Basic \", \"\");\n        var decodedCreds = Encoding.UTF8.GetString(Convert.FromBase64String(encodedCreds));\n        var credentials = decodedCreds.Split(':');\n\n        var username = credentials[0];\n        var password = credentials[1];\n\n        var configUsername = context.GetHttpContext().RequestServices\n            .GetRequiredService&lt;IConfiguration&gt;()[\"Hangfire:DashboardUsername\"];\n\n        var configPassword = context.GetHttpContext().RequestServices\n            .GetRequiredService&lt;IConfiguration&gt;()[\"Hangfire:DashboardPassword\"];\n\n        return username == configUsername &amp;&amp; password == configPassword;\n    }\n}\n</code></pre> <p>appsettings.json: <pre><code>{\n  \"Hangfire\": {\n    \"DashboardUsername\": \"admin\",\n    \"DashboardPassword\": \"senha-forte-aqui\"\n  }\n}\n</code></pre></p>"},{"location":"apis/email-api/hangfire-jobs/#jobs-configurados","title":"Jobs Configurados","text":""},{"location":"apis/email-api/hangfire-jobs/#1-processpendingnotifications","title":"1. ProcessPendingNotifications","text":"<p>Frequ\u00eancia: A cada 1 minuto Descri\u00e7\u00e3o: Processa notifica\u00e7\u00f5es pendentes de envio</p> <pre><code>// email-api/Program.cs\nRecurringJob.AddOrUpdate(\n    \"process-pending-notifications\",\n    () =&gt; notificationService.ProcessPendingNotificationsAsync(),\n    Cron.Minutely\n);\n</code></pre> <p>Service: <pre><code>// email-api/Services/NotificationService.cs\n[AutomaticRetry(Attempts = 3)]\npublic async Task ProcessPendingNotificationsAsync()\n{\n    var pendingNotifications = await _context.Notifications\n        .Where(n =&gt; !n.IsSent &amp;&amp;\n                    n.SendAttempts &lt; 3 &amp;&amp;\n                    (n.ScheduledToSend == null || n.ScheduledToSend &lt;= DateTime.UtcNow))\n        .OrderBy(n =&gt; n.CreatedAt)\n        .Take(50)\n        .ToListAsync();\n\n    _logger.LogInformation(\"Processing {Count} pending notifications\", pendingNotifications.Count);\n\n    foreach (var notification in pendingNotifications)\n    {\n        try\n        {\n            notification.SendAttempts++;\n\n            // Email\n            if (notification.Channel == NotificationChannelEnum.Email ||\n                notification.Channel == NotificationChannelEnum.All)\n            {\n                await _emailSender.SendAsync(notification);\n            }\n\n            // WhatsApp\n            if (notification.Channel == NotificationChannelEnum.WhatsApp ||\n                notification.Channel == NotificationChannelEnum.All)\n            {\n                await _whatsAppSender.SendAsync(notification);\n            }\n\n            notification.IsSent = true;\n            notification.SentAt = DateTime.UtcNow;\n            notification.UpdatedAt = DateTime.UtcNow;\n\n            _logger.LogInformation(\"Notification {Id} sent successfully\", notification.Id);\n        }\n        catch (Exception ex)\n        {\n            notification.ErrorMessage = ex.Message;\n            notification.UpdatedAt = DateTime.UtcNow;\n\n            _logger.LogError(ex, \"Error sending notification {Id}\", notification.Id);\n        }\n    }\n\n    await _context.SaveChangesAsync();\n}\n</code></pre></p>"},{"location":"apis/email-api/hangfire-jobs/#2-cleanupoldnotifications","title":"2. CleanupOldNotifications","text":"<p>Frequ\u00eancia: Diariamente \u00e0s 03:00 Descri\u00e7\u00e3o: Remove notifica\u00e7\u00f5es antigas (&gt;90 dias)</p> <pre><code>// email-api/Program.cs\nRecurringJob.AddOrUpdate(\n    \"cleanup-old-notifications\",\n    () =&gt; logCleanupService.CleanupOldNotificationsAsync(),\n    Cron.Daily(3) // 03:00 AM\n);\n</code></pre> <p>Service: <pre><code>// email-api/Services/LogCleanupService.cs\npublic async Task CleanupOldNotificationsAsync()\n{\n    var cutoffDate = DateTime.UtcNow.AddDays(-90);\n\n    var oldNotifications = await _context.Notifications\n        .Where(n =&gt; n.CreatedAt &lt; cutoffDate)\n        .ToListAsync();\n\n    _logger.LogInformation(\"Cleaning up {Count} old notifications\", oldNotifications.Count);\n\n    _context.Notifications.RemoveRange(oldNotifications);\n    await _context.SaveChangesAsync();\n\n    _logger.LogInformation(\"Cleanup completed successfully\");\n}\n</code></pre></p>"},{"location":"apis/email-api/hangfire-jobs/#cron-expressions","title":"Cron Expressions","text":"Express\u00e3o Descri\u00e7\u00e3o <code>Cron.Minutely</code> A cada minuto <code>Cron.Hourly</code> A cada hora <code>Cron.Daily</code> Diariamente \u00e0 meia-noite <code>Cron.Daily(3)</code> Diariamente \u00e0s 03:00 <code>Cron.Weekly</code> Semanalmente aos domingos <code>Cron.Monthly</code> Mensalmente no dia 1 <code>\"*/5 * * * *\"</code> A cada 5 minutos <code>\"0 */2 * * *\"</code> A cada 2 horas <code>\"0 0 * * 1\"</code> Toda segunda-feira \u00e0 meia-noite"},{"location":"apis/email-api/hangfire-jobs/#como-adicionar-novo-job","title":"Como Adicionar Novo Job","text":""},{"location":"apis/email-api/hangfire-jobs/#1-criar-service","title":"1. Criar Service","text":"<pre><code>// email-api/Services/MyNewService.cs\npublic class MyNewService\n{\n    private readonly ApplicationDbContext _context;\n    private readonly ILogger&lt;MyNewService&gt; _logger;\n\n    public MyNewService(ApplicationDbContext context, ILogger&lt;MyNewService&gt; logger)\n    {\n        _context = context;\n        _logger = logger;\n    }\n\n    [AutomaticRetry(Attempts = 3)]\n    public async Task DoSomethingAsync()\n    {\n        _logger.LogInformation(\"Starting job...\");\n\n        try\n        {\n            // L\u00f3gica do job aqui\n\n            _logger.LogInformation(\"Job completed successfully\");\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error in job\");\n            throw;\n        }\n    }\n}\n</code></pre>"},{"location":"apis/email-api/hangfire-jobs/#2-registrar-service","title":"2. Registrar Service","text":"<pre><code>// email-api/Program.cs\nbuilder.Services.AddScoped&lt;MyNewService&gt;();\n</code></pre>"},{"location":"apis/email-api/hangfire-jobs/#3-agendar-job","title":"3. Agendar Job","text":"<pre><code>// email-api/Program.cs\nusing (var scope = app.Services.CreateScope())\n{\n    var recurringJobManager = scope.ServiceProvider.GetRequiredService&lt;IRecurringJobManager&gt;();\n    var myService = scope.ServiceProvider.GetRequiredService&lt;MyNewService&gt;();\n\n    RecurringJob.AddOrUpdate(\n        \"my-new-job\",\n        () =&gt; myService.DoSomethingAsync(),\n        Cron.Hourly\n    );\n}\n</code></pre>"},{"location":"apis/email-api/hangfire-jobs/#fire-and-forget-jobs","title":"Fire-and-Forget Jobs","text":"<p>Para jobs que executam uma vez:</p> <pre><code>// Enfileirar job para execu\u00e7\u00e3o imediata\nBackgroundJob.Enqueue(() =&gt; myService.DoSomethingAsync());\n\n// Agendar para daqui 1 hora\nBackgroundJob.Schedule(\n    () =&gt; myService.DoSomethingAsync(),\n    TimeSpan.FromHours(1)\n);\n</code></pre>"},{"location":"apis/email-api/hangfire-jobs/#monitoramento","title":"Monitoramento","text":""},{"location":"apis/email-api/hangfire-jobs/#via-dashboard","title":"Via Dashboard","text":"<ul> <li>Succeeded Jobs: Jobs executados com sucesso</li> <li>Failed Jobs: Jobs que falharam</li> <li>Recurring Jobs: Jobs agendados</li> <li>Processing: Jobs em execu\u00e7\u00e3o</li> <li>Scheduled: Jobs agendados para futuro</li> <li>Enqueued: Jobs na fila</li> </ul>"},{"location":"apis/email-api/hangfire-jobs/#via-logs","title":"Via Logs","text":"<pre><code>_logger.LogInformation(\"Job started: {JobName} at {Time}\", \n    \"process-pending-notifications\", DateTime.UtcNow);\n\n_logger.LogInformation(\"Processed {Count} items in {Duration}ms\", \n    count, stopwatch.ElapsedMilliseconds);\n\n_logger.LogError(ex, \"Job failed: {JobName}\", \"process-pending-notifications\");\n</code></pre>"},{"location":"apis/email-api/hangfire-jobs/#queries-sql","title":"Queries SQL","text":"<pre><code>-- Jobs executados hoje\nSELECT * FROM hangfire.job\nWHERE createdat &gt;= CURRENT_DATE\nORDER BY createdat DESC;\n\n-- Jobs com falha\nSELECT * FROM hangfire.job\nWHERE statename = 'Failed'\nORDER BY createdat DESC\nLIMIT 20;\n\n-- Tempo m\u00e9dio de execu\u00e7\u00e3o\nSELECT \n    AVG(EXTRACT(EPOCH FROM (statechangedat - createdat))) as avg_duration_seconds\nFROM hangfire.job\nWHERE statename = 'Succeeded'\n  AND createdat &gt;= NOW() - INTERVAL '24 hours';\n</code></pre>"},{"location":"apis/email-api/hangfire-jobs/#configuracao-avancada","title":"Configura\u00e7\u00e3o Avan\u00e7ada","text":""},{"location":"apis/email-api/hangfire-jobs/#threads-e-workers","title":"Threads e Workers","text":"<pre><code>// email-api/Program.cs\nbuilder.Services.AddHangfire(config =&gt;\n{\n    config.UsePostgreSqlStorage(connectionString);\n    config.UseSimpleAssemblyNameTypeSerializer();\n    config.UseRecommendedSerializerSettings();\n});\n\nbuilder.Services.AddHangfireServer(options =&gt;\n{\n    options.WorkerCount = 5; // N\u00famero de workers paralelos\n    options.ServerName = \"EmailAPI-Worker\";\n    options.Queues = new[] { \"default\", \"emails\", \"critical\" };\n});\n</code></pre>"},{"location":"apis/email-api/hangfire-jobs/#filas-prioritarias","title":"Filas Priorit\u00e1rias","text":"<pre><code>// Job cr\u00edtico (fila \"critical\")\nBackgroundJob.Enqueue(\n    () =&gt; criticalService.DoSomethingAsync(),\n    new BackgroundJobOptions\n    {\n        Queue = \"critical\"\n    }\n);\n\n// Job de email (fila \"emails\")\nBackgroundJob.Enqueue(\n    () =&gt; emailService.SendAsync(notification),\n    new BackgroundJobOptions\n    {\n        Queue = \"emails\"\n    }\n);\n</code></pre>"},{"location":"apis/email-api/hangfire-jobs/#retry-policy","title":"Retry Policy","text":"<pre><code>[AutomaticRetry(Attempts = 5, DelaysInSeconds = new[] { 30, 60, 300, 600, 1800 })]\npublic async Task SendCriticalEmailAsync(Notification notification)\n{\n    // Tenta 5 vezes com delays crescentes\n    // 30s, 1min, 5min, 10min, 30min\n}\n</code></pre>"},{"location":"apis/email-api/hangfire-jobs/#troubleshooting","title":"Troubleshooting","text":""},{"location":"apis/email-api/hangfire-jobs/#job-nao-executa","title":"Job n\u00e3o executa","text":"<ol> <li>Verificar se Hangfire Server est\u00e1 rodando</li> <li>Verificar logs da aplica\u00e7\u00e3o</li> <li>Verificar dashboard para erros</li> <li>Verificar conex\u00e3o com PostgreSQL</li> </ol>"},{"location":"apis/email-api/hangfire-jobs/#job-falha-sempre","title":"Job falha sempre","text":"<ol> <li>Ver detalhes no dashboard (Failed Jobs)</li> <li>Ver stack trace completo</li> <li>Verificar logs</li> <li>Reprocessar manualmente no dashboard</li> </ol>"},{"location":"apis/email-api/hangfire-jobs/#performance","title":"Performance","text":"<pre><code>// Processar em batch\nvar notifications = await _context.Notifications\n    .Where(n =&gt; !n.IsSent)\n    .Take(100) // &lt;-- Limitar quantidade\n    .ToListAsync();\n\n// Usar transa\u00e7\u00e3o\nusing var transaction = await _context.Database.BeginTransactionAsync();\ntry\n{\n    // Processar\n    await _context.SaveChangesAsync();\n    await transaction.CommitAsync();\n}\ncatch\n{\n    await transaction.RollbackAsync();\n    throw;\n}\n</code></pre>"},{"location":"apis/email-api/hangfire-jobs/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<ul> <li>Notifica\u00e7\u00f5es - Sistema de notifica\u00e7\u00f5es</li> <li>Templates - Templates de email/WhatsApp</li> <li>Vis\u00e3o Geral - Arquitetura Email API</li> </ul>"},{"location":"apis/email-api/notificacoes/","title":"Notifica\u00e7\u00f5es","text":""},{"location":"apis/email-api/notificacoes/#descricao","title":"Descri\u00e7\u00e3o","text":"<p>Sistema de notifica\u00e7\u00f5es ass\u00edncronas por email e WhatsApp processadas pela Email API usando Hangfire para jobs em background.</p>"},{"location":"apis/email-api/notificacoes/#tabela-notifications","title":"Tabela: notifications","text":"<pre><code>CREATE TABLE notifications (\n    id BIGSERIAL PRIMARY KEY,\n    type VARCHAR(50) NOT NULL,\n    channel VARCHAR(20) NOT NULL,\n    email VARCHAR(255),\n    phone VARCHAR(20),\n    metadata_json TEXT,\n    is_sent BOOLEAN DEFAULT FALSE,\n    send_attempts INTEGER DEFAULT 0,\n    scheduled_to_send TIMESTAMP,\n    sent_at TIMESTAMP,\n    error_message TEXT,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP\n);\n</code></pre>"},{"location":"apis/email-api/notificacoes/#notificationtypeenum","title":"NotificationTypeEnum","text":"Tipo Descri\u00e7\u00e3o Canal Padr\u00e3o <code>MfaCode</code> C\u00f3digo de autentica\u00e7\u00e3o MFA Email <code>UserActivation</code> C\u00f3digo de ativa\u00e7\u00e3o de conta Email <code>ForgotPassword</code> C\u00f3digo de recupera\u00e7\u00e3o de senha Email <code>PaymentConfirmed</code> Confirma\u00e7\u00e3o de pagamento Prefer\u00eancia usu\u00e1rio <code>VideoReleaseSchedule</code> Lan\u00e7amento de v\u00eddeo agendado Prefer\u00eancia usu\u00e1rio <code>KycSubmitted</code> KYC enviado (notifica admin) Email <code>KycApproved</code> KYC aprovado Prefer\u00eancia usu\u00e1rio <code>KycRejected</code> KYC rejeitado com motivo Prefer\u00eancia usu\u00e1rio <code>NewSale</code> Nova venda (influencer/promoter) Prefer\u00eancia usu\u00e1rio <pre><code>// email-api/Data/Enums/NotificationTypeEnum.cs\npublic enum NotificationTypeEnum\n{\n    MfaCode,\n    UserActivation,\n    ForgotPassword,\n    PaymentConfirmed,\n    VideoReleaseSchedule,\n    KycSubmitted,\n    KycApproved,\n    KycRejected,\n    NewSale\n}\n</code></pre>"},{"location":"apis/email-api/notificacoes/#notificationchannelenum","title":"NotificationChannelEnum","text":"Canal Descri\u00e7\u00e3o <code>Email</code> Apenas email (SMTP) <code>WhatsApp</code> Apenas WhatsApp (Z-API) <code>All</code> Email + WhatsApp (ambos) <pre><code>// email-api/Data/Enums/NotificationChannelEnum.cs\npublic enum NotificationChannelEnum\n{\n    Email,\n    WhatsApp,\n    All\n}\n</code></pre>"},{"location":"apis/email-api/notificacoes/#metadata-json-por-tipo","title":"Metadata JSON por Tipo","text":""},{"location":"apis/email-api/notificacoes/#mfacode","title":"MfaCode","text":"<pre><code>{\n  \"Code\": \"123456\",\n  \"ExpiresIn\": 5\n}\n</code></pre>"},{"location":"apis/email-api/notificacoes/#useractivation","title":"UserActivation","text":"<pre><code>{\n  \"Code\": \"123456\",\n  \"UserName\": \"Jo\u00e3o Silva\"\n}\n</code></pre>"},{"location":"apis/email-api/notificacoes/#paymentconfirmed","title":"PaymentConfirmed","text":"<pre><code>{\n  \"OrderId\": 789,\n  \"VideoTitle\": \"V\u00eddeo Exclusivo\",\n  \"Amount\": 99.90\n}\n</code></pre>"},{"location":"apis/email-api/notificacoes/#videoreleaseschedule","title":"VideoReleaseSchedule","text":"<pre><code>{\n  \"VideoId\": 123,\n  \"VideoTitle\": \"Novo V\u00eddeo\",\n  \"ReleaseDate\": \"2025-12-01T00:00:00Z\"\n}\n</code></pre>"},{"location":"apis/email-api/notificacoes/#kycapproved","title":"KycApproved","text":"<pre><code>{\n  \"OwnerType\": \"Promoter\"\n}\n</code></pre>"},{"location":"apis/email-api/notificacoes/#kycrejected","title":"KycRejected","text":"<pre><code>{\n  \"OwnerType\": \"Promoter\",\n  \"Reason\": \"Documentos ileg\u00edveis\"\n}\n</code></pre>"},{"location":"apis/email-api/notificacoes/#newsale","title":"NewSale","text":"<pre><code>{\n  \"OrderId\": 789,\n  \"VideoTitle\": \"V\u00eddeo Exclusivo\",\n  \"BuyerName\": \"Jo\u00e3o Silva\",\n  \"Commission\": 29.97\n}\n</code></pre>"},{"location":"apis/email-api/notificacoes/#send-attempts-e-retry","title":"Send Attempts e Retry","text":"<p>Sistema de retry autom\u00e1tico para notifica\u00e7\u00f5es que falharam:</p> <ul> <li>M\u00e1ximo 3 tentativas</li> <li>Intervalo: Job roda a cada 1 minuto</li> <li>Ap\u00f3s 3 falhas: Notifica\u00e7\u00e3o \u00e9 marcada como failed (n\u00e3o tenta mais)</li> </ul> <pre><code>// email-api/Services/NotificationService.cs\npublic async Task ProcessPendingNotificationsAsync()\n{\n    var pendingNotifications = await _context.Notifications\n        .Where(n =&gt; !n.IsSent &amp;&amp;\n                    n.SendAttempts &lt; 3 &amp;&amp;\n                    (n.ScheduledToSend == null || n.ScheduledToSend &lt;= DateTime.UtcNow))\n        .OrderBy(n =&gt; n.CreatedAt)\n        .Take(50)\n        .ToListAsync();\n\n    foreach (var notification in pendingNotifications)\n    {\n        try\n        {\n            notification.SendAttempts++;\n\n            // Email\n            if (notification.Channel == NotificationChannelEnum.Email ||\n                notification.Channel == NotificationChannelEnum.All)\n            {\n                await _emailSender.SendAsync(notification);\n            }\n\n            // WhatsApp\n            if (notification.Channel == NotificationChannelEnum.WhatsApp ||\n                notification.Channel == NotificationChannelEnum.All)\n            {\n                await _whatsAppSender.SendAsync(notification);\n            }\n\n            notification.IsSent = true;\n            notification.SentAt = DateTime.UtcNow;\n            notification.UpdatedAt = DateTime.UtcNow;\n\n            _logger.LogInformation(\"Notification {Id} sent successfully\", notification.Id);\n        }\n        catch (Exception ex)\n        {\n            notification.ErrorMessage = ex.Message;\n            notification.UpdatedAt = DateTime.UtcNow;\n\n            _logger.LogError(ex, \"Error sending notification {Id}\", notification.Id);\n        }\n    }\n\n    await _context.SaveChangesAsync();\n}\n</code></pre>"},{"location":"apis/email-api/notificacoes/#criacao-de-notificacoes","title":"Cria\u00e7\u00e3o de Notifica\u00e7\u00f5es","text":""},{"location":"apis/email-api/notificacoes/#backend-api-cria-notificacoes","title":"Backend API cria notifica\u00e7\u00f5es","text":"<pre><code>// backend-api/Services/LoginService.cs\npublic async Task SendMfaCodeAsync(string email, string code)\n{\n    var notification = new Notification\n    {\n        Type = NotificationTypeEnum.MfaCode,\n        Channel = NotificationChannelEnum.Email,\n        Email = email,\n        MetadataJson = JsonSerializer.Serialize(new\n        {\n            Code = code,\n            ExpiresIn = 5\n        }),\n        CreatedAt = DateTime.UtcNow\n    };\n\n    await _context.Notifications.AddAsync(notification);\n    await _context.SaveChangesAsync();\n}\n\n// backend-api/Services/PaymentService.cs\npublic async Task NotifyPaymentConfirmedAsync(Order order)\n{\n    var user = await _context.Users.FindAsync(order.UserId);\n\n    var notification = new Notification\n    {\n        Type = NotificationTypeEnum.PaymentConfirmed,\n        Channel = user.NotificationPreference ?? NotificationChannelEnum.Email,\n        Email = user.Email,\n        Phone = user.Telephone,\n        MetadataJson = JsonSerializer.Serialize(new\n        {\n            OrderId = order.Id,\n            VideoTitle = order.Video.Title,\n            Amount = order.Amount / 100m\n        }),\n        CreatedAt = DateTime.UtcNow\n    };\n\n    await _context.Notifications.AddAsync(notification);\n    await _context.SaveChangesAsync();\n}\n</code></pre>"},{"location":"apis/email-api/notificacoes/#agendamento-de-notificacoes","title":"Agendamento de Notifica\u00e7\u00f5es","text":"<p>Notifica\u00e7\u00f5es podem ser agendadas para envio futuro:</p> <pre><code>// Enviar 24h antes do lan\u00e7amento do v\u00eddeo\npublic async Task ScheduleVideoReleaseNotificationAsync(Video video)\n{\n    var releaseDate = video.ReleaseDate.Value;\n    var sendAt = releaseDate.AddHours(-24);\n\n    var users = await _context.Users\n        .Where(u =&gt; u.IsActive &amp;&amp; u.NotificationPreference != null)\n        .ToListAsync();\n\n    var notifications = users.Select(u =&gt; new Notification\n    {\n        Type = NotificationTypeEnum.VideoReleaseSchedule,\n        Channel = u.NotificationPreference ?? NotificationChannelEnum.Email,\n        Email = u.Email,\n        Phone = u.Telephone,\n        ScheduledToSend = sendAt, // &lt;-- Agendada\n        MetadataJson = JsonSerializer.Serialize(new\n        {\n            VideoId = video.Id,\n            VideoTitle = video.Title,\n            ReleaseDate = releaseDate\n        }),\n        CreatedAt = DateTime.UtcNow\n    }).ToList();\n\n    await _context.Notifications.AddRangeAsync(notifications);\n    await _context.SaveChangesAsync();\n}\n</code></pre>"},{"location":"apis/email-api/notificacoes/#entidade-c","title":"Entidade C","text":"<pre><code>// email-api/Data/Entities/Notification.cs\npublic class Notification\n{\n    public long Id { get; set; }\n    public NotificationTypeEnum Type { get; set; }\n    public NotificationChannelEnum Channel { get; set; }\n    public string? Email { get; set; }\n    public string? Phone { get; set; }\n    public string? MetadataJson { get; set; }\n    public bool IsSent { get; set; }\n    public int SendAttempts { get; set; }\n    public DateTime? ScheduledToSend { get; set; }\n    public DateTime? SentAt { get; set; }\n    public string? ErrorMessage { get; set; }\n    public DateTime CreatedAt { get; set; }\n    public DateTime? UpdatedAt { get; set; }\n}\n</code></pre>"},{"location":"apis/email-api/notificacoes/#queries-uteis","title":"Queries \u00dateis","text":""},{"location":"apis/email-api/notificacoes/#notificacoes-pendentes","title":"Notifica\u00e7\u00f5es pendentes","text":"<pre><code>SELECT * FROM notifications\nWHERE is_sent = FALSE\n  AND send_attempts &lt; 3\n  AND (scheduled_to_send IS NULL OR scheduled_to_send &lt;= NOW())\nORDER BY created_at\nLIMIT 50;\n</code></pre>"},{"location":"apis/email-api/notificacoes/#notificacoes-com-falha","title":"Notifica\u00e7\u00f5es com falha","text":"<pre><code>SELECT \n    id,\n    type,\n    channel,\n    email,\n    send_attempts,\n    error_message,\n    created_at\nFROM notifications\nWHERE is_sent = FALSE\n  AND send_attempts &gt;= 3\nORDER BY created_at DESC;\n</code></pre>"},{"location":"apis/email-api/notificacoes/#taxa-de-sucesso","title":"Taxa de sucesso","text":"<pre><code>SELECT \n    type,\n    COUNT(*) as total,\n    SUM(CASE WHEN is_sent THEN 1 ELSE 0 END) as enviadas,\n    ROUND(100.0 * SUM(CASE WHEN is_sent THEN 1 ELSE 0 END) / COUNT(*), 2) as taxa_sucesso\nFROM notifications\nGROUP BY type;\n</code></pre>"},{"location":"apis/email-api/notificacoes/#monitoramento","title":"Monitoramento","text":""},{"location":"apis/email-api/notificacoes/#dashboard-hangfire","title":"Dashboard Hangfire","text":"<p>Acesse: <code>http://localhost:5014/dashboard</code></p> <ul> <li>Visualizar jobs executados</li> <li>Ver notifica\u00e7\u00f5es processadas</li> <li>Reprocessar manualmente</li> </ul>"},{"location":"apis/email-api/notificacoes/#logs","title":"Logs","text":"<pre><code>_logger.LogInformation(\"Notification {Id} sent successfully: {Type} to {Email}\", \n    notification.Id, notification.Type, notification.Email);\n\n_logger.LogError(ex, \"Error sending notification {Id}: {Type}\", \n    notification.Id, notification.Type);\n</code></pre>"},{"location":"apis/email-api/notificacoes/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<ul> <li>Templates - Como criar templates</li> <li>Hangfire Jobs - Configura\u00e7\u00e3o de jobs</li> <li>Vis\u00e3o Geral - Arquitetura Email API</li> </ul>"},{"location":"apis/email-api/templates/","title":"Templates de Notifica\u00e7\u00e3o","text":""},{"location":"apis/email-api/templates/#descricao","title":"Descri\u00e7\u00e3o","text":"<p>Templates para renderiza\u00e7\u00e3o de emails (HTML) e mensagens WhatsApp (TXT) utilizando vari\u00e1veis din\u00e2micas do <code>metadata_json</code>.</p>"},{"location":"apis/email-api/templates/#localizacao","title":"Localiza\u00e7\u00e3o","text":"<pre><code>email-api/\n\u2514\u2500\u2500 wwwroot/\n    \u2514\u2500\u2500 Templates/\n        \u251c\u2500\u2500 Email/\n        \u2502   \u251c\u2500\u2500 MfaCode.html\n        \u2502   \u251c\u2500\u2500 UserActivation.html\n        \u2502   \u251c\u2500\u2500 ForgotPassword.html\n        \u2502   \u251c\u2500\u2500 PaymentConfirmed.html\n        \u2502   \u251c\u2500\u2500 VideoReleaseSchedule.html\n        \u2502   \u251c\u2500\u2500 KycApproved.html\n        \u2502   \u251c\u2500\u2500 KycRejected.html\n        \u2502   \u2514\u2500\u2500 NewSale.html\n        \u2514\u2500\u2500 WhatsApp/\n            \u251c\u2500\u2500 MfaCode.txt\n            \u251c\u2500\u2500 UserActivation.txt\n            \u251c\u2500\u2500 ForgotPassword.txt\n            \u251c\u2500\u2500 PaymentConfirmed.txt\n            \u251c\u2500\u2500 VideoReleaseSchedule.txt\n            \u251c\u2500\u2500 KycApproved.txt\n            \u251c\u2500\u2500 KycRejected.txt\n            \u2514\u2500\u2500 NewSale.txt\n</code></pre>"},{"location":"apis/email-api/templates/#templates-html-email","title":"Templates HTML (Email)","text":""},{"location":"apis/email-api/templates/#mfacodehtml","title":"MfaCode.html","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"pt-BR\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;C\u00f3digo MFA - Amasso&lt;/title&gt;\n&lt;/head&gt;\n&lt;body style=\"font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px;\"&gt;\n    &lt;div style=\"background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 30px; text-align: center; border-radius: 10px 10px 0 0;\"&gt;\n        &lt;h1 style=\"color: white; margin: 0;\"&gt;C\u00f3digo de Autentica\u00e7\u00e3o&lt;/h1&gt;\n    &lt;/div&gt;\n\n    &lt;div style=\"background: #f9f9f9; padding: 30px; border-radius: 0 0 10px 10px;\"&gt;\n        &lt;p&gt;Ol\u00e1,&lt;/p&gt;\n        &lt;p&gt;Seu c\u00f3digo de autentica\u00e7\u00e3o MFA \u00e9:&lt;/p&gt;\n\n        &lt;div style=\"background: white; padding: 20px; text-align: center; border: 2px dashed #667eea; border-radius: 5px; margin: 20px 0;\"&gt;\n            &lt;h2 style=\"color: #667eea; font-size: 36px; letter-spacing: 8px; margin: 0;\"&gt;{{Code}}&lt;/h2&gt;\n        &lt;/div&gt;\n\n        &lt;p style=\"color: #666; font-size: 14px;\"&gt;\n            &lt;strong&gt;\u23f0 Este c\u00f3digo expira em {{ExpiresIn}} minutos.&lt;/strong&gt;\n        &lt;/p&gt;\n\n        &lt;p&gt;Se voc\u00ea n\u00e3o solicitou este c\u00f3digo, ignore este email.&lt;/p&gt;\n\n        &lt;hr style=\"border: none; border-top: 1px solid #ddd; margin: 30px 0;\"&gt;\n\n        &lt;p style=\"color: #999; font-size: 12px; text-align: center;\"&gt;\n            Amasso - Plataforma de V\u00eddeos Exclusivos&lt;br&gt;\n            Este \u00e9 um email autom\u00e1tico, n\u00e3o responda.\n        &lt;/p&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"apis/email-api/templates/#paymentconfirmedhtml","title":"PaymentConfirmed.html","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"pt-BR\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Pagamento Confirmado - Amasso&lt;/title&gt;\n&lt;/head&gt;\n&lt;body style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;\"&gt;\n    &lt;div style=\"background: #4caf50; padding: 30px; text-align: center; border-radius: 10px 10px 0 0;\"&gt;\n        &lt;h1 style=\"color: white; margin: 0;\"&gt;\u2713 Pagamento Confirmado!&lt;/h1&gt;\n    &lt;/div&gt;\n\n    &lt;div style=\"background: #f9f9f9; padding: 30px; border-radius: 0 0 10px 10px;\"&gt;\n        &lt;p&gt;Ol\u00e1 &lt;strong&gt;{{UserName}}&lt;/strong&gt;,&lt;/p&gt;\n\n        &lt;p&gt;Seu pagamento foi confirmado com sucesso! \ud83c\udf89&lt;/p&gt;\n\n        &lt;div style=\"background: white; padding: 20px; border-left: 4px solid #4caf50; margin: 20px 0;\"&gt;\n            &lt;h3 style=\"margin-top: 0;\"&gt;Detalhes da Compra&lt;/h3&gt;\n            &lt;p&gt;&lt;strong&gt;V\u00eddeo:&lt;/strong&gt; {{VideoTitle}}&lt;/p&gt;\n            &lt;p&gt;&lt;strong&gt;Valor:&lt;/strong&gt; R$ {{Amount}}&lt;/p&gt;\n            &lt;p&gt;&lt;strong&gt;Pedido:&lt;/strong&gt; #{{OrderId}}&lt;/p&gt;\n        &lt;/div&gt;\n\n        &lt;p&gt;Voc\u00ea j\u00e1 pode assistir ao v\u00eddeo! Acesse sua \u00e1rea de v\u00eddeos comprados:&lt;/p&gt;\n\n        &lt;div style=\"text-align: center; margin: 30px 0;\"&gt;\n            &lt;a href=\"{{AppUrl}}/my-videos\" style=\"background: #4caf50; color: white; padding: 15px 30px; text-decoration: none; border-radius: 5px; display: inline-block; font-weight: bold;\"&gt;\n                Ver Meus V\u00eddeos\n            &lt;/a&gt;\n        &lt;/div&gt;\n\n        &lt;p&gt;Obrigado por sua compra!&lt;/p&gt;\n\n        &lt;hr style=\"border: none; border-top: 1px solid #ddd; margin: 30px 0;\"&gt;\n\n        &lt;p style=\"color: #999; font-size: 12px; text-align: center;\"&gt;\n            Amasso - Plataforma de V\u00eddeos Exclusivos\n        &lt;/p&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"apis/email-api/templates/#kycrejectedhtml","title":"KycRejected.html","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"pt-BR\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;KYC Rejeitado - Amasso&lt;/title&gt;\n&lt;/head&gt;\n&lt;body style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;\"&gt;\n    &lt;div style=\"background: #f44336; padding: 30px; text-align: center; border-radius: 10px 10px 0 0;\"&gt;\n        &lt;h1 style=\"color: white; margin: 0;\"&gt;\u274c Documentos Rejeitados&lt;/h1&gt;\n    &lt;/div&gt;\n\n    &lt;div style=\"background: #f9f9f9; padding: 30px; border-radius: 0 0 10px 10px;\"&gt;\n        &lt;p&gt;Ol\u00e1,&lt;/p&gt;\n\n        &lt;p&gt;Infelizmente seus documentos KYC foram rejeitados.&lt;/p&gt;\n\n        &lt;div style=\"background: #fff3cd; padding: 15px; border-left: 4px solid #ff9800; margin: 20px 0;\"&gt;\n            &lt;p style=\"margin: 0;\"&gt;&lt;strong&gt;Motivo da rejei\u00e7\u00e3o:&lt;/strong&gt;&lt;/p&gt;\n            &lt;p style=\"margin: 10px 0 0 0;\"&gt;{{Reason}}&lt;/p&gt;\n        &lt;/div&gt;\n\n        &lt;p&gt;Por favor, revise os documentos e envie novamente:&lt;/p&gt;\n\n        &lt;div style=\"text-align: center; margin: 30px 0;\"&gt;\n            &lt;a href=\"{{AppUrl}}/owner/kyc\" style=\"background: #667eea; color: white; padding: 15px 30px; text-decoration: none; border-radius: 5px; display: inline-block; font-weight: bold;\"&gt;\n                Reenviar Documentos\n            &lt;/a&gt;\n        &lt;/div&gt;\n\n        &lt;p&gt;Se tiver d\u00favidas, entre em contato conosco.&lt;/p&gt;\n\n        &lt;hr style=\"border: none; border-top: 1px solid #ddd; margin: 30px 0;\"&gt;\n\n        &lt;p style=\"color: #999; font-size: 12px; text-align: center;\"&gt;\n            Amasso - Plataforma de V\u00eddeos Exclusivos\n        &lt;/p&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"apis/email-api/templates/#templates-txt-whatsapp","title":"Templates TXT (WhatsApp)","text":""},{"location":"apis/email-api/templates/#mfacodetxt","title":"MfaCode.txt","text":"<pre><code>\ud83d\udd10 *C\u00f3digo MFA - Amasso*\n\nSeu c\u00f3digo de autentica\u00e7\u00e3o \u00e9:\n\n*{{Code}}*\n\n\u23f0 Expira em {{ExpiresIn}} minutos.\n\nSe voc\u00ea n\u00e3o solicitou, ignore esta mensagem.\n</code></pre>"},{"location":"apis/email-api/templates/#paymentconfirmedtxt","title":"PaymentConfirmed.txt","text":"<pre><code>\u2705 *Pagamento Confirmado!*\n\nOl\u00e1 {{UserName}},\n\nSeu pagamento foi confirmado! \ud83c\udf89\n\n\ud83d\udcf9 *V\u00eddeo:* {{VideoTitle}}\n\ud83d\udcb0 *Valor:* R$ {{Amount}}\n\ud83c\udd94 *Pedido:* #{{OrderId}}\n\nAcesse agora: {{AppUrl}}/my-videos\n\nObrigado pela compra!\n\n_Amasso - Plataforma de V\u00eddeos Exclusivos_\n</code></pre>"},{"location":"apis/email-api/templates/#newsaletxt","title":"NewSale.txt","text":"<pre><code>\ud83d\udcb0 *Nova Venda!*\n\nParab\u00e9ns! Voc\u00ea recebeu uma nova comiss\u00e3o:\n\n\ud83d\udcf9 *V\u00eddeo:* {{VideoTitle}}\n\ud83d\udc64 *Comprador:* {{BuyerName}}\n\ud83d\udcb5 *Sua comiss\u00e3o:* R$ {{Commission}}\n\nAcesse seu dashboard: {{AppUrl}}/dashboard\n\n_Amasso - Plataforma de V\u00eddeos Exclusivos_\n</code></pre>"},{"location":"apis/email-api/templates/#variaveis-disponiveis","title":"Vari\u00e1veis Dispon\u00edveis","text":"Vari\u00e1vel Descri\u00e7\u00e3o Exemplo <code>{{Code}}</code> C\u00f3digo num\u00e9rico 123456 <code>{{UserName}}</code> Nome do usu\u00e1rio Jo\u00e3o Silva <code>{{VideoTitle}}</code> T\u00edtulo do v\u00eddeo V\u00eddeo Exclusivo <code>{{Amount}}</code> Valor em reais 99.90 <code>{{OrderId}}</code> ID do pedido 789 <code>{{Commission}}</code> Comiss\u00e3o 29.97 <code>{{BuyerName}}</code> Nome do comprador Maria Santos <code>{{Reason}}</code> Motivo (rejei\u00e7\u00e3o) Documentos ileg\u00edveis <code>{{ExpiresIn}}</code> Tempo de expira\u00e7\u00e3o 5 <code>{{AppUrl}}</code> URL da aplica\u00e7\u00e3o https://amasso.com.br"},{"location":"apis/email-api/templates/#renderizacao-de-templates","title":"Renderiza\u00e7\u00e3o de Templates","text":"<pre><code>// email-api/Services/TemplateRenderer.cs\npublic class TemplateRenderer\n{\n    private readonly IWebHostEnvironment _env;\n    private readonly IConfiguration _config;\n\n    public async Task&lt;string&gt; RenderAsync(Notification notification)\n    {\n        var folderName = notification.Channel == NotificationChannelEnum.Email \n            ? \"Email\" \n            : \"WhatsApp\";\n\n        var extension = notification.Channel == NotificationChannelEnum.Email \n            ? \"html\" \n            : \"txt\";\n\n        var templatePath = Path.Combine(\n            _env.WebRootPath, \n            \"Templates\", \n            folderName,\n            $\"{notification.Type}.{extension}\"\n        );\n\n        if (!File.Exists(templatePath))\n        {\n            throw new FileNotFoundException($\"Template not found: {templatePath}\");\n        }\n\n        var template = await File.ReadAllTextAsync(templatePath);\n\n        // Adicionar AppUrl\n        var metadata = JsonSerializer.Deserialize&lt;Dictionary&lt;string, object&gt;&gt;(\n            notification.MetadataJson ?? \"{}\");\n\n        metadata[\"AppUrl\"] = _config[\"App:BaseUrl\"];\n\n        // Substituir vari\u00e1veis\n        foreach (var kvp in metadata)\n        {\n            var value = kvp.Value?.ToString() ?? \"\";\n            template = template.Replace($\"{{{{{kvp.Key}}}}}\", value);\n        }\n\n        return template;\n    }\n}\n</code></pre>"},{"location":"apis/email-api/templates/#emailsender","title":"EmailSender","text":"<pre><code>// email-api/Services/EmailSender.cs\npublic class EmailSender\n{\n    private readonly SmtpClient _smtpClient;\n    private readonly TemplateRenderer _renderer;\n    private readonly IConfiguration _config;\n\n    public async Task SendAsync(Notification notification)\n    {\n        var html = await _renderer.RenderAsync(notification);\n\n        var message = new MailMessage\n        {\n            From = new MailAddress(\n                _config[\"Smtp:FromEmail\"], \n                _config[\"Smtp:FromName\"]\n            ),\n            Subject = GetSubject(notification.Type),\n            Body = html,\n            IsBodyHtml = true\n        };\n\n        message.To.Add(notification.Email);\n\n        await _smtpClient.SendMailAsync(message);\n    }\n\n    private string GetSubject(NotificationTypeEnum type)\n    {\n        return type switch\n        {\n            NotificationTypeEnum.MfaCode =&gt; \"C\u00f3digo de Autentica\u00e7\u00e3o - Amasso\",\n            NotificationTypeEnum.UserActivation =&gt; \"Ative sua conta - Amasso\",\n            NotificationTypeEnum.ForgotPassword =&gt; \"Recuperar senha - Amasso\",\n            NotificationTypeEnum.PaymentConfirmed =&gt; \"Pagamento Confirmado - Amasso\",\n            NotificationTypeEnum.VideoReleaseSchedule =&gt; \"Novo v\u00eddeo chegando! - Amasso\",\n            NotificationTypeEnum.KycApproved =&gt; \"KYC Aprovado - Amasso\",\n            NotificationTypeEnum.KycRejected =&gt; \"KYC Rejeitado - Amasso\",\n            NotificationTypeEnum.NewSale =&gt; \"Nova Venda! - Amasso\",\n            _ =&gt; \"Notifica\u00e7\u00e3o - Amasso\"\n        };\n    }\n}\n</code></pre>"},{"location":"apis/email-api/templates/#whatsappsender","title":"WhatsAppSender","text":"<pre><code>// email-api/Services/WhatsAppSender.cs\npublic class WhatsAppSender\n{\n    private readonly HttpClient _httpClient;\n    private readonly TemplateRenderer _renderer;\n    private readonly IConfiguration _config;\n\n    public async Task SendAsync(Notification notification)\n    {\n        var text = await _renderer.RenderAsync(notification);\n\n        var instanceId = _config[\"ZApi:InstanceId\"];\n        var token = _config[\"ZApi:Token\"];\n        var url = $\"{_config[\"ZApi:BaseUrl\"]}/instances/{instanceId}/token/{token}/send-text\";\n\n        var payload = new\n        {\n            phone = notification.Phone.Replace(\"+\", \"\"),\n            message = text\n        };\n\n        var response = await _httpClient.PostAsJsonAsync(url, payload);\n        response.EnsureSuccessStatusCode();\n    }\n}\n</code></pre>"},{"location":"apis/email-api/templates/#como-criar-novo-template","title":"Como Criar Novo Template","text":"<ol> <li> <p>Criar arquivo HTML/TXT: <pre><code># Email\ntouch email-api/wwwroot/Templates/Email/NovoTipo.html\n\n# WhatsApp\ntouch email-api/wwwroot/Templates/WhatsApp/NovoTipo.txt\n</code></pre></p> </li> <li> <p>Adicionar vari\u00e1veis com <code>{{NomeVariavel}}</code></p> </li> <li> <p>Adicionar tipo ao enum: <pre><code>public enum NotificationTypeEnum\n{\n    // ... existentes\n    NovoTipo\n}\n</code></pre></p> </li> <li> <p>Criar notifica\u00e7\u00e3o com metadata: <pre><code>var notification = new Notification\n{\n    Type = NotificationTypeEnum.NovoTipo,\n    Channel = NotificationChannelEnum.Email,\n    Email = \"user@example.com\",\n    MetadataJson = JsonSerializer.Serialize(new\n    {\n        NomeVariavel = \"valor\"\n    }),\n    CreatedAt = DateTime.UtcNow\n};\n</code></pre></p> </li> </ol>"},{"location":"apis/email-api/templates/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<ul> <li>Notifica\u00e7\u00f5es - Sistema de notifica\u00e7\u00f5es</li> <li>Hangfire Jobs - Processamento ass\u00edncrono</li> <li>Vis\u00e3o Geral - Arquitetura Email API</li> </ul>"},{"location":"apis/email-api/visao-geral/","title":"Email API - Vis\u00e3o Geral","text":""},{"location":"apis/email-api/visao-geral/#descricao","title":"Descri\u00e7\u00e3o","text":"<p>A Email API \u00e9 respons\u00e1vel pelo envio ass\u00edncrono de notifica\u00e7\u00f5es por email e WhatsApp. Utiliza Hangfire para processamento de jobs em background.</p>"},{"location":"apis/email-api/visao-geral/#tecnologias","title":"Tecnologias","text":"<ul> <li>.NET 8: Framework</li> <li>Hangfire: Jobs em background</li> <li>PostgreSQL: Banco de dados compartilhado</li> <li>SMTP: Envio de emails</li> <li>Z-API: Envio de WhatsApp</li> <li>Razor: Templates de email</li> </ul>"},{"location":"apis/email-api/visao-geral/#arquitetura","title":"Arquitetura","text":"<pre><code>graph LR\n    A[Backend API] --&gt;|INSERT notifications| B[(PostgreSQL)]\n    C[Hangfire Job] --&gt;|SELECT pending| B\n    C --&gt;|Processar| D[NotificationService]\n    D --&gt;|Email| E[EmailSender - SMTP]\n    D --&gt;|WhatsApp| F[WhatsAppSender - Z-API]\n    E --&gt;|UPDATE sent| B\n    F --&gt;|UPDATE sent| B</code></pre>"},{"location":"apis/email-api/visao-geral/#base-url","title":"Base URL","text":"<pre><code>Desenvolvimento: http://localhost:5014\nProdu\u00e7\u00e3o: https://email-api.amasso.com.br\n</code></pre>"},{"location":"apis/email-api/visao-geral/#dashboard-hangfire","title":"Dashboard Hangfire","text":"<pre><code>http://localhost:5014/dashboard\n</code></pre> <ul> <li>Visualizar jobs executados/pendentes</li> <li>Monitorar falhas</li> <li>Reprocessar jobs manualmente</li> <li>Ver estat\u00edsticas</li> </ul>"},{"location":"apis/email-api/visao-geral/#como-funciona","title":"Como Funciona","text":"<ol> <li>Backend API cria registro em <code>notifications</code></li> <li>Hangfire Job (executado a cada 1 minuto):</li> <li>Busca notifica\u00e7\u00f5es pendentes</li> <li>Renderiza template</li> <li>Envia via SMTP ou Z-API</li> <li>Marca como enviada</li> <li>Retry autom\u00e1tico: At\u00e9 3 tentativas se falhar</li> </ol>"},{"location":"apis/email-api/visao-geral/#tipos-de-notificacao","title":"Tipos de Notifica\u00e7\u00e3o","text":"Tipo Descri\u00e7\u00e3o Canal <code>MfaCode</code> C\u00f3digo de autentica\u00e7\u00e3o MFA Email <code>UserActivation</code> C\u00f3digo de ativa\u00e7\u00e3o de conta Email <code>ForgotPassword</code> C\u00f3digo de recupera\u00e7\u00e3o de senha Email <code>PaymentConfirmed</code> Confirma\u00e7\u00e3o de pagamento Email/WhatsApp/All <code>VideoReleaseSchedule</code> Lan\u00e7amento de v\u00eddeo agendado Email/WhatsApp/All <code>KycApproved</code> KYC aprovado Email/WhatsApp/All <code>KycRejected</code> KYC rejeitado Email/WhatsApp/All <code>NewSale</code> Nova venda (para influencer/promoter) Email/WhatsApp/All"},{"location":"apis/email-api/visao-geral/#canais-de-envio","title":"Canais de Envio","text":"Canal Descri\u00e7\u00e3o <code>Email</code> Apenas email (SMTP) <code>WhatsApp</code> Apenas WhatsApp (Z-API) <code>All</code> Email + WhatsApp"},{"location":"apis/email-api/visao-geral/#configuracao-smtp","title":"Configura\u00e7\u00e3o SMTP","text":"<pre><code>{\n  \"Smtp\": {\n    \"Host\": \"smtp.gmail.com\",\n    \"Port\": 587,\n    \"Username\": \"noreply@amasso.com.br\",\n    \"Password\": \"app-password\",\n    \"FromEmail\": \"noreply@amasso.com.br\",\n    \"FromName\": \"Amasso\"\n  }\n}\n</code></pre>"},{"location":"apis/email-api/visao-geral/#configuracao-z-api","title":"Configura\u00e7\u00e3o Z-API","text":"<pre><code>{\n  \"ZApi\": {\n    \"BaseUrl\": \"https://api.z-api.io\",\n    \"InstanceId\": \"your-instance-id\",\n    \"Token\": \"your-token\"\n  }\n}\n</code></pre>"},{"location":"apis/email-api/visao-geral/#jobs-hangfire","title":"Jobs Hangfire","text":""},{"location":"apis/email-api/visao-geral/#processpendingnotifications","title":"ProcessPendingNotifications","text":"<p>Cron: A cada 1 minuto Descri\u00e7\u00e3o: Processa notifica\u00e7\u00f5es pendentes</p> <pre><code>RecurringJob.AddOrUpdate(\n    \"process-pending-notifications\",\n    () =&gt; _notificationService.ProcessPendingNotificationsAsync(),\n    Cron.Minutely\n);\n</code></pre>"},{"location":"apis/email-api/visao-geral/#cleanupoldnotifications","title":"CleanupOldNotifications","text":"<p>Cron: Diariamente \u00e0s 03:00 Descri\u00e7\u00e3o: Remove notifica\u00e7\u00f5es antigas (&gt;90 dias)</p> <pre><code>RecurringJob.AddOrUpdate(\n    \"cleanup-old-notifications\",\n    () =&gt; _logCleanupService.CleanupOldNotificationsAsync(),\n    Cron.Daily(3)\n);\n</code></pre>"},{"location":"apis/email-api/visao-geral/#templates","title":"Templates","text":"<p>Localizados em <code>wwwroot/Templates/</code>:</p> <p>Email (HTML): - <code>MfaCode.html</code> - <code>UserActivation.html</code> - <code>PaymentConfirmed.html</code> - etc.</p> <p>WhatsApp (TXT): - <code>MfaCode.txt</code> - <code>UserActivation.txt</code> - <code>PaymentConfirmed.txt</code> - etc.</p>"},{"location":"apis/email-api/visao-geral/#variaveis-nos-templates","title":"Vari\u00e1veis nos Templates","text":"<pre><code>&lt;!-- Email: PaymentConfirmed.html --&gt;\n&lt;h1&gt;Pagamento Confirmado!&lt;/h1&gt;\n&lt;p&gt;Ol\u00e1 {{UserName}},&lt;/p&gt;\n&lt;p&gt;Seu pagamento do v\u00eddeo \"{{VideoTitle}}\" foi confirmado.&lt;/p&gt;\n&lt;p&gt;Valor: R$ {{Amount}}&lt;/p&gt;\n</code></pre> <p>As vari\u00e1veis s\u00e3o substitu\u00eddas a partir do <code>metadata_json</code> da notification.</p>"},{"location":"apis/email-api/visao-geral/#monitoramento","title":"Monitoramento","text":""},{"location":"apis/email-api/visao-geral/#logs","title":"Logs","text":"<pre><code>/email-api-prod2025082202.log\n</code></pre>"},{"location":"apis/email-api/visao-geral/#metricas","title":"M\u00e9tricas","text":"<ul> <li>Total de notifica\u00e7\u00f5es enviadas</li> <li>Taxa de sucesso</li> <li>Tempo m\u00e9dio de envio</li> <li>Notifica\u00e7\u00f5es com falha</li> </ul>"},{"location":"apis/email-api/visao-geral/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<ul> <li>Veja Notifica\u00e7\u00f5es para detalhes</li> <li>Consulte Templates para criar novos</li> <li>Entenda Hangfire Jobs para configura\u00e7\u00e3o</li> </ul>"},{"location":"arquitetura/backend-api/","title":"Backend API","text":""},{"location":"arquitetura/backend-api/#visao-geral","title":"Vis\u00e3o Geral","text":"<p>O Backend API \u00e9 o cora\u00e7\u00e3o da plataforma Amasso, constru\u00eddo com ASP.NET Core 8.0 e seguindo os princ\u00edpios de Clean Architecture.</p> <p>Localiza\u00e7\u00e3o: <code>backend-api/</code></p>"},{"location":"arquitetura/backend-api/#tecnologias","title":"Tecnologias","text":"Tecnologia Vers\u00e3o Prop\u00f3sito .NET 8.0 Framework principal ASP.NET Core 8.0 Web API Entity Framework Core 8.0 ORM Npgsql 8.0 Driver PostgreSQL JWT Bearer - Autentica\u00e7\u00e3o Swagger/OpenAPI - Documenta\u00e7\u00e3o API"},{"location":"arquitetura/backend-api/#estrutura-de-pastas","title":"Estrutura de Pastas","text":"<pre><code>backend-api/\n\u251c\u2500\u2500 Data/\n\u2502   \u251c\u2500\u2500 Context/\n\u2502   \u2502   \u2514\u2500\u2500 Pay4TruContext.cs          # DbContext principal\n\u2502   \u251c\u2500\u2500 Entities/                      # 17 entidades\n\u2502   \u2502   \u251c\u2500\u2500 User.cs\n\u2502   \u2502   \u251c\u2500\u2500 Owner.cs\n\u2502   \u2502   \u251c\u2500\u2500 Video.cs\n\u2502   \u2502   \u251c\u2500\u2500 Order.cs\n\u2502   \u2502   \u251c\u2500\u2500 Payment.cs\n\u2502   \u2502   \u251c\u2500\u2500 Income.cs\n\u2502   \u2502   \u251c\u2500\u2500 Notification.cs\n\u2502   \u2502   \u2514\u2500\u2500 ... (outras)\n\u2502   \u251c\u2500\u2500 Enums/                         # 13 enums\n\u2502   \u2502   \u251c\u2500\u2500 UserTypeEnum.cs\n\u2502   \u2502   \u251c\u2500\u2500 PaymentStatusEnum.cs\n\u2502   \u2502   \u251c\u2500\u2500 OwnerSubAccountStatusEnum.cs\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u251c\u2500\u2500 Dtos/                          # 53 DTOs\n\u2502   \u2502   \u251c\u2500\u2500 Login.cs\n\u2502   \u2502   \u251c\u2500\u2500 VideoDto.cs\n\u2502   \u2502   \u251c\u2500\u2500 OrderDto.cs\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u251c\u2500\u2500 Configuration/                 # EF Core configurations\n\u2502   \u2502   \u251c\u2500\u2500 UserConfiguration.cs\n\u2502   \u2502   \u251c\u2500\u2500 VideoConfiguration.cs\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u2514\u2500\u2500 Validations/                   # FluentValidation\n\u2502       \u251c\u2500\u2500 LoginValidator.cs\n\u2502       \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 Endpoints/                         # Minimal APIs\n\u2502   \u251c\u2500\u2500 LoginEndpoints.cs\n\u2502   \u251c\u2500\u2500 UserEndpoints.cs\n\u2502   \u251c\u2500\u2500 VideoEndpoints.cs\n\u2502   \u251c\u2500\u2500 OrderEndpoints.cs\n\u2502   \u251c\u2500\u2500 PaymentEndpoints.cs\n\u2502   \u251c\u2500\u2500 AdminEndpoints.cs\n\u2502   \u251c\u2500\u2500 OwnerEndpoints.cs\n\u2502   \u251c\u2500\u2500 PromoterEndpoint.cs\n\u2502   \u251c\u2500\u2500 MfaEndpoints.cs\n\u2502   \u2514\u2500\u2500 WebHookEndpoint.cs\n\u251c\u2500\u2500 Services/                          # L\u00f3gica de neg\u00f3cio\n\u2502   \u251c\u2500\u2500 LoginService.cs\n\u2502   \u251c\u2500\u2500 UserService.cs\n\u2502   \u251c\u2500\u2500 VideoService.cs\n\u2502   \u251c\u2500\u2500 OrderService.cs\n\u2502   \u251c\u2500\u2500 PaymentService.cs\n\u2502   \u251c\u2500\u2500 OwnerService.cs\n\u2502   \u251c\u2500\u2500 TokenService.cs\n\u2502   \u251c\u2500\u2500 MfaService.cs\n\u2502   \u251c\u2500\u2500 Admin/\n\u2502   \u2502   \u2514\u2500\u2500 AdminService.cs\n\u2502   \u251c\u2500\u2500 Promoter/\n\u2502   \u2502   \u2514\u2500\u2500 PromoterService.cs\n\u2502   \u251c\u2500\u2500 External/\n\u2502   \u2502   \u251c\u2500\u2500 IuguService.cs\n\u2502   \u2502   \u251c\u2500\u2500 CloudinaryService.cs\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 Helpers/\n\u2502   \u251c\u2500\u2500 Extensions/                    # Extension methods\n\u2502   \u251c\u2500\u2500 Middlewares/                   # Middlewares customizados\n\u2502   \u251c\u2500\u2500 Constants/                     # Constantes\n\u2502   \u2514\u2500\u2500 Wrappers/                      # Response wrappers\n\u251c\u2500\u2500 Migrations/                        # EF Core migrations (49 arquivos)\n\u251c\u2500\u2500 Program.cs                         # Entrada da aplica\u00e7\u00e3o\n\u251c\u2500\u2500 Usings.cs                          # Global usings\n\u251c\u2500\u2500 appsettings.json                   # Configura\u00e7\u00f5es\n\u251c\u2500\u2500 Pay4Tru.Api.csproj                # Defini\u00e7\u00e3o do projeto\n\u2514\u2500\u2500 Dockerfile                         # Container Docker\n</code></pre>"},{"location":"arquitetura/backend-api/#arquitetura-em-camadas","title":"Arquitetura em Camadas","text":"<pre><code>graph TD\n    A[HTTP Request] --&gt; B[Endpoint Layer]\n    B --&gt; C[Service Layer]\n    C --&gt; D[Data Layer]\n    D --&gt; E[PostgreSQL]\n\n    C --&gt; F[External Services]\n    F --&gt; G[Iugu API]\n    F --&gt; H[Cloudinary]\n\n    style B fill:#e1f5ff\n    style C fill:#fff4e6\n    style D fill:#f3e5f5\n    style F fill:#e8f5e9</code></pre>"},{"location":"arquitetura/backend-api/#1-endpoint-layer-presentation","title":"1. Endpoint Layer (Presentation)","text":"<p>Localiza\u00e7\u00e3o: <code>Endpoints/</code></p> <p>Usa Minimal APIs do ASP.NET Core:</p> <pre><code>// Exemplo simplificado\npublic static class VideoEndpoints\n{\n    public static void MapVideoEndpoints(this IEndpointRouteBuilder app)\n    {\n        var group = app.MapGroup(\"/api/videos\").RequireAuthorization();\n\n        group.MapGet(\"/\", GetAllVideos);\n        group.MapGet(\"/{id}\", GetVideoById);\n        group.MapPost(\"/\", CreateVideo).RequireRole(\"Admin\");\n        group.MapPut(\"/{id}\", UpdateVideo).RequireRole(\"Admin\");\n        group.MapDelete(\"/{id}\", DeleteVideo).RequireRole(\"Admin\");\n    }\n}\n</code></pre> <p>Responsabilidades: - Valida\u00e7\u00e3o de entrada (DTOs) - Autoriza\u00e7\u00e3o (Roles, Claims) - Chamada aos Services - Formata\u00e7\u00e3o de resposta</p>"},{"location":"arquitetura/backend-api/#2-service-layer-business-logic","title":"2. Service Layer (Business Logic)","text":"<p>Localiza\u00e7\u00e3o: <code>Services/</code></p> <p>Cont\u00e9m toda a l\u00f3gica de neg\u00f3cio:</p> <pre><code>public interface IVideoService\n{\n    Task&lt;VideoDto&gt; GetByIdAsync(long id, long? userId);\n    Task&lt;List&lt;VideoDto&gt;&gt; GetAllAsync(long? userId);\n    Task&lt;VideoDto&gt; CreateAsync(VideoDto dto);\n    Task UpdateAsync(long id, VideoDto dto);\n    Task DeleteAsync(long id);\n    Task&lt;List&lt;VideoDto&gt;&gt; GetVideosForPromoterAsync(long promoterId);\n}\n</code></pre> <p>Responsabilidades: - Regras de neg\u00f3cio - Valida\u00e7\u00f5es complexas - Orquestra\u00e7\u00e3o de opera\u00e7\u00f5es - Chamadas a servi\u00e7os externos - Transa\u00e7\u00f5es</p>"},{"location":"arquitetura/backend-api/#3-data-layer-data-access","title":"3. Data Layer (Data Access)","text":"<p>Localiza\u00e7\u00e3o: <code>Data/</code></p> <p>Entity Framework Core com Repository Pattern:</p> <pre><code>public class Pay4TruDb : DbContext\n{\n    public DbSet&lt;User&gt; Users { get; set; }\n    public DbSet&lt;Video&gt; Videos { get; set; }\n    public DbSet&lt;Order&gt; Orders { get; set; }\n    // ... outros DbSets\n\n    protected override void OnModelCreating(ModelBuilder b)\n    {\n        b.ApplyConfiguration(new UserConfiguration());\n        b.ApplyConfiguration(new VideoConfiguration());\n        // ... outras configura\u00e7\u00f5es\n    }\n}\n</code></pre> <p>Responsabilidades: - Mapeamento objeto-relacional - Queries ao banco - Migrations - Configura\u00e7\u00f5es de entidades</p>"},{"location":"arquitetura/backend-api/#principais-funcionalidades","title":"Principais Funcionalidades","text":""},{"location":"arquitetura/backend-api/#autenticacao-e-autorizacao","title":"Autentica\u00e7\u00e3o e Autoriza\u00e7\u00e3o","text":""},{"location":"arquitetura/backend-api/#jwt-tokens","title":"JWT Tokens","text":"<pre><code>// TokenService.cs\npublic string GenerateToken(User user)\n{\n    var claims = new[]\n    {\n        new Claim(ClaimTypes.NameIdentifier, user.Id.ToString()),\n        new Claim(ClaimTypes.Email, user.Email),\n        new Claim(ClaimTypes.Role, user.Type.ToString()),\n        // Claims adicionais\n    };\n\n    var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_jwtSettings.Secret));\n    var creds = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);\n\n    var token = new JwtSecurityToken(\n        issuer: _jwtSettings.Issuer,\n        audience: _jwtSettings.Audience,\n        claims: claims,\n        expires: DateTime.UtcNow.AddHours(24),\n        signingCredentials: creds\n    );\n\n    return new JwtSecurityTokenHandler().WriteToken(token);\n}\n</code></pre>"},{"location":"arquitetura/backend-api/#mfa-multi-factor-authentication","title":"MFA (Multi-Factor Authentication)","text":"<ol> <li>Usu\u00e1rio faz login</li> <li>Sistema gera c\u00f3digo de 6 d\u00edgitos</li> <li>C\u00f3digo salvo na tabela <code>mfa_codes</code> com expira\u00e7\u00e3o de 5 minutos</li> <li>Notifica\u00e7\u00e3o criada para envio (Email API processa)</li> <li>Usu\u00e1rio informa c\u00f3digo</li> <li>Sistema valida e emite JWT</li> </ol>"},{"location":"arquitetura/backend-api/#gestao-de-videos","title":"Gest\u00e3o de V\u00eddeos","text":""},{"location":"arquitetura/backend-api/#upload-e-armazenamento","title":"Upload e Armazenamento","text":"<pre><code>// VideoService.cs\npublic async Task&lt;VideoDto&gt; UploadVideoAsync(IFormFile file, VideoDto dto)\n{\n    // 1. Upload para Cloudinary\n    var uploadResult = await _cloudinaryService.UploadVideoAsync(file);\n\n    // 2. Criar entidade Video\n    var video = new Video\n    {\n        Title = dto.Title,\n        Description = dto.Description,\n        CloudinaryPublicId = uploadResult.PublicId,\n        Price = dto.Price,\n        ReleaseDate = dto.ReleaseDate\n    };\n\n    _context.Videos.Add(video);\n\n    // 3. Criar VideoRevenueConfig\n    var config = new VideoRevenueConfig\n    {\n        VideoId = video.Id,\n        PlatformPercentage = dto.PlatformPercentage,\n        OwnerPercentage = dto.OwnerPercentage,\n        PromoterPercentage = dto.PromoterPercentage\n    };\n\n    _context.VideoRevenueConfigs.Add(config);\n    await _context.SaveChangesAsync();\n\n    return MapToDto(video);\n}\n</code></pre>"},{"location":"arquitetura/backend-api/#videos-para-promoters","title":"V\u00eddeos para Promoters","text":"<p>Regra de neg\u00f3cio importante: Promoters s\u00f3 veem v\u00eddeos com <code>PromoterPercentage &gt; 0%</code></p> <pre><code>public async Task&lt;List&lt;VideoDto&gt;&gt; GetVideosForPromoterAsync(long promoterId)\n{\n    return await _context.Videos\n        .Include(v =&gt; v.VideoRevenueConfig)\n        .Where(v =&gt; v.IsActive &amp;&amp; \n                    v.VideoRevenueConfig.PromoterPercentage &gt; 0)\n        .Select(v =&gt; MapToDto(v))\n        .ToListAsync();\n}\n</code></pre>"},{"location":"arquitetura/backend-api/#sistema-de-pedidos-e-pagamentos","title":"Sistema de Pedidos e Pagamentos","text":""},{"location":"arquitetura/backend-api/#criar-pedido-com-split","title":"Criar Pedido com Split","text":"<pre><code>// OrderService.cs\npublic async Task&lt;OrderDto&gt; CreateOrderAsync(CreateOrderDto dto)\n{\n    var video = await _context.Videos\n        .Include(v =&gt; v.VideoRevenueConfig)\n        .FirstAsync(v =&gt; v.Id == dto.VideoId);\n\n    var config = video.VideoRevenueConfig;\n\n    // Calcular valores\n    var totalAmount = (int)(video.Price * 100); // em centavos\n    var platformAmount = totalAmount * config.PlatformPercentage / 100;\n    var ownerAmount = totalAmount * config.OwnerPercentage / 100;\n    var promoterAmount = dto.PromoterId.HasValue \n        ? totalAmount * config.PromoterPercentage / 100 \n        : 0;\n\n    // Criar Order\n    var order = new Order\n    {\n        UserId = dto.UserId,\n        VideoId = dto.VideoId,\n        PromoterId = dto.PromoterId,\n        Amount = totalAmount,\n        PlatformAmount = platformAmount,\n        OwnerAmount = ownerAmount,\n        PromoterAmount = promoterAmount\n    };\n\n    _context.Orders.Add(order);\n    await _context.SaveChangesAsync();\n\n    // Criar Invoice no Iugu com split\n    var invoice = await _iuguService.CreateInvoiceWithSplitAsync(order);\n\n    // Criar Payment\n    var payment = new Payment\n    {\n        OrderId = order.Id,\n        IuguInvoiceId = invoice.Id,\n        Status = PaymentStatusEnum.Pending\n    };\n\n    _context.Payments.Add(payment);\n\n    // Criar Notification\n    var notification = new Notification\n    {\n        Type = NotificationTypeEnum.OrderCreated,\n        Channel = user.NotificationPreference,\n        MetadataJson = JsonSerializer.Serialize(new { OrderId = order.Id })\n    };\n\n    _context.Notifications.Add(notification);\n    await _context.SaveChangesAsync();\n\n    return MapToDto(order, invoice.SecureUrl);\n}\n</code></pre>"},{"location":"arquitetura/backend-api/#webhooks-do-iugu","title":"Webhooks do Iugu","text":""},{"location":"arquitetura/backend-api/#processar-confirmacao-de-pagamento","title":"Processar Confirma\u00e7\u00e3o de Pagamento","text":"<pre><code>// PaymentEndpoints.cs - Webhook\n[AllowAnonymous]\npublic static async Task&lt;IResult&gt; HandleIuguWebhook(\n    [FromBody] IuguWebhookDto webhook,\n    [FromServices] IPaymentService paymentService)\n{\n    // Validar assinatura do webhook (seguran\u00e7a)\n    if (!ValidateIuguSignature(webhook))\n        return Results.Unauthorized();\n\n    if (webhook.Event == \"invoice.status_changed\" &amp;&amp; \n        webhook.Data.Status == \"paid\")\n    {\n        await paymentService.ConfirmPaymentAsync(webhook.Data.Id);\n    }\n\n    return Results.Ok();\n}\n\n// PaymentService.cs\npublic async Task ConfirmPaymentAsync(string iuguInvoiceId)\n{\n    var payment = await _context.Payments\n        .Include(p =&gt; p.Order)\n        .ThenInclude(o =&gt; o.Video)\n        .ThenInclude(v =&gt; v.OwnerVideos)\n        .FirstAsync(p =&gt; p.IuguInvoiceId == iuguInvoiceId);\n\n    // Atualizar status\n    payment.Status = PaymentStatusEnum.Paid;\n    payment.IuguPaidAt = DateTime.UtcNow;\n\n    // Criar Income para cada parte\n    var incomes = new List&lt;Income&gt;();\n\n    // Plataforma\n    incomes.Add(new Income\n    {\n        OrderId = payment.Order.Id,\n        Amount = payment.Order.PlatformAmount,\n        Type = IncomeTypeEnum.Platform\n    });\n\n    // Owner/Influencer\n    var owner = payment.Order.Video.OwnerVideos.First().Owner;\n    incomes.Add(new Income\n    {\n        OrderId = payment.Order.Id,\n        OwnerId = owner.Id,\n        Amount = payment.Order.OwnerAmount,\n        Type = IncomeTypeEnum.Owner\n    });\n\n    // Promoter (se houver)\n    if (payment.Order.PromoterId.HasValue)\n    {\n        incomes.Add(new Income\n        {\n            OrderId = payment.Order.Id,\n            OwnerId = payment.Order.PromoterId.Value,\n            Amount = payment.Order.PromoterAmount,\n            Type = IncomeTypeEnum.Promoter\n        });\n    }\n\n    _context.Incomes.AddRange(incomes);\n\n    // Criar notifica\u00e7\u00e3o de confirma\u00e7\u00e3o\n    var notification = new Notification\n    {\n        Type = NotificationTypeEnum.PaymentConfirmed,\n        Channel = NotificationChannelEnum.Email,\n        MetadataJson = JsonSerializer.Serialize(new { OrderId = payment.Order.Id })\n    };\n\n    _context.Notifications.Add(notification);\n    await _context.SaveChangesAsync();\n}\n</code></pre>"},{"location":"arquitetura/backend-api/#gestao-de-kyc","title":"Gest\u00e3o de KYC","text":""},{"location":"arquitetura/backend-api/#aprovar-kyc-admin","title":"Aprovar KYC (Admin)","text":"<pre><code>// AdminService.cs\npublic async Task ApproveKycAsync(long ownerId)\n{\n    var owner = await _context.Owners.FindAsync(ownerId);\n\n    if (owner.SubAccountStatus != OwnerSubAccountStatusEnum.Pending)\n        throw new InvalidOperationException(\"KYC n\u00e3o est\u00e1 pendente\");\n\n    // Ativar subconta no Iugu\n    await _iuguService.ActivateSubAccountAsync(owner.IuguAccountId);\n\n    // Atualizar status\n    owner.SubAccountStatus = OwnerSubAccountStatusEnum.Approved;\n    owner.UpdatedAt = DateTime.UtcNow;\n\n    // Notificar usu\u00e1rio\n    var notification = new Notification\n    {\n        Type = NotificationTypeEnum.KycApproved,\n        Channel = owner.User.NotificationPreference,\n        MetadataJson = JsonSerializer.Serialize(new { OwnerId = ownerId })\n    };\n\n    _context.Notifications.Add(notification);\n    await _context.SaveChangesAsync();\n}\n</code></pre>"},{"location":"arquitetura/backend-api/#configuracoes","title":"Configura\u00e7\u00f5es","text":""},{"location":"arquitetura/backend-api/#appsettingsjson","title":"appsettings.json","text":"<pre><code>{\n  \"ConnectionStrings\": {\n    \"Pay4TruDb\": \"Host=localhost;Database=pay4tru;Username=postgres;Password=***\"\n  },\n  \"Jwt\": {\n    \"Secret\": \"super-secret-key-min-32-chars\",\n    \"Issuer\": \"amasso-api\",\n    \"Audience\": \"amasso-frontend\",\n    \"ExpirationHours\": 24\n  },\n  \"Iugu\": {\n    \"ApiToken\": \"***\",\n    \"AccountId\": \"***\"\n  },\n  \"Cloudinary\": {\n    \"CloudName\": \"***\",\n    \"ApiKey\": \"***\",\n    \"ApiSecret\": \"***\"\n  }\n}\n</code></pre>"},{"location":"arquitetura/backend-api/#middlewares","title":"Middlewares","text":""},{"location":"arquitetura/backend-api/#request-logging","title":"Request Logging","text":"<p>Loga todas as requisi\u00e7\u00f5es na tabela <code>logs</code>: - RequestId - Path - Method - Status Code - Duration - IP - User</p>"},{"location":"arquitetura/backend-api/#exception-handling","title":"Exception Handling","text":"<p>Captura exce\u00e7\u00f5es n\u00e3o tratadas e retorna resposta padronizada.</p>"},{"location":"arquitetura/backend-api/#jwt-authentication","title":"JWT Authentication","text":"<p>Valida token em cada request protegido.</p>"},{"location":"arquitetura/backend-api/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<ul> <li>Veja APIs &gt; Backend API para refer\u00eancia completa de endpoints</li> <li>Consulte Banco de Dados para entender as entidades</li> <li>Leia Guias &gt; Backend para configurar localmente</li> </ul>"},{"location":"arquitetura/comunicacao-entre-sistemas/","title":"Comunica\u00e7\u00e3o Entre Sistemas","text":"<p>Este documento detalha como os tr\u00eas principais componentes da plataforma Amasso se comunicam entre si e com servi\u00e7os externos.</p>"},{"location":"arquitetura/comunicacao-entre-sistemas/#visao-geral-da-comunicacao","title":"Vis\u00e3o Geral da Comunica\u00e7\u00e3o","text":"<pre><code>graph LR\n    FE[Frontend] --&gt;|HTTP/REST| BE[Backend API]\n    BE --&gt;|SQL| DB[(PostgreSQL)]\n    BE --&gt;|INSERT notifications| DB\n    EA[Email API] --&gt;|SELECT notifications| DB\n    EA --&gt;|UPDATE notifications| DB\n    BE --&gt;|HTTP| Iugu[Iugu API]\n    Iugu --&gt;|Webhook| BE\n    BE --&gt;|HTTP| Cloud[Cloudinary]\n    EA --&gt;|SMTP| SES[AWS SES]\n    EA --&gt;|HTTP| ZApi[Z-API]\n\n    style FE fill:#61dafb\n    style BE fill:#512bd4\n    style EA fill:#512bd4\n    style DB fill:#336791</code></pre>"},{"location":"arquitetura/comunicacao-entre-sistemas/#1-frontend-backend-api","title":"1. Frontend \u2194 Backend API","text":""},{"location":"arquitetura/comunicacao-entre-sistemas/#protocolo","title":"Protocolo","text":"<ul> <li>HTTP/REST via Axios</li> <li>JSON para payloads</li> <li>JWT para autentica\u00e7\u00e3o</li> </ul>"},{"location":"arquitetura/comunicacao-entre-sistemas/#fluxo-de-autenticacao","title":"Fluxo de Autentica\u00e7\u00e3o","text":"<pre><code>sequenceDiagram\n    participant F as Frontend\n    participant B as Backend API\n    participant D as Database\n    participant E as Email API\n\n    F-&gt;&gt;B: POST /api/login {email, password}\n    B-&gt;&gt;D: SELECT user WHERE email\n    B-&gt;&gt;D: Verify password hash\n    B-&gt;&gt;D: Generate MFA code\n    B-&gt;&gt;D: INSERT INTO mfa_codes\n    B-&gt;&gt;D: INSERT INTO notifications (MfaCode)\n    B--&gt;&gt;F: {requiresMfa: true}\n\n    Note over E: Job agendado executa\n    E-&gt;&gt;D: SELECT notifications pendentes\n    E-&gt;&gt;F: Envia c\u00f3digo por email/WhatsApp\n\n    F-&gt;&gt;B: POST /api/login/verify-mfa {code}\n    B-&gt;&gt;D: Validate MFA code\n    B-&gt;&gt;B: Generate JWT token\n    B--&gt;&gt;F: {token, user}\n\n    F-&gt;&gt;F: Store token in localStorage\n    F-&gt;&gt;B: All future requests with&lt;br/&gt;Authorization: Bearer {token}</code></pre>"},{"location":"arquitetura/comunicacao-entre-sistemas/#exemplo-de-request","title":"Exemplo de Request","text":"<pre><code>// Frontend\nconst response = await axios.post('/api/login', {\n  email: 'user@email.com',\n  password: 'senha123',\n  signInWith: 'Default'\n});\n\nif (response.data.requiresMfa) {\n  // Mostrar tela de MFA\n  const mfaResponse = await axios.post('/api/login/verify-mfa', {\n    email: 'user@email.com',\n    code: '123456'\n  });\n\n  const { token } = mfaResponse.data;\n  localStorage.setItem('token', token);\n\n  // Configurar axios para usar token\n  axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n}\n</code></pre>"},{"location":"arquitetura/comunicacao-entre-sistemas/#2-backend-api-postgresql","title":"2. Backend API \u2194 PostgreSQL","text":""},{"location":"arquitetura/comunicacao-entre-sistemas/#protocolo_1","title":"Protocolo","text":"<ul> <li>Npgsql (Driver .NET para PostgreSQL)</li> <li>Entity Framework Core como ORM</li> </ul>"},{"location":"arquitetura/comunicacao-entre-sistemas/#padrao-de-acesso","title":"Padr\u00e3o de Acesso","text":"<pre><code>// 1. Definir entidade\npublic class Video : Base\n{\n    public string Title { get; set; }\n    public decimal Price { get; set; }\n    // ... outros campos\n}\n\n// 2. Configurar mapeamento\npublic class VideoConfiguration : IEntityTypeConfiguration&lt;Video&gt;\n{\n    public void Configure(EntityTypeBuilder&lt;Video&gt; entity)\n    {\n        entity.ToTable(\"videos\");\n        entity.HasKey(v =&gt; v.Id);\n        entity.Property(v =&gt; v.Title).HasColumnName(\"title\").IsRequired();\n        // ...\n    }\n}\n\n// 3. Usar no servi\u00e7o\npublic class VideoService\n{\n    private readonly Pay4TruDb _context;\n\n    public async Task&lt;Video&gt; GetByIdAsync(long id)\n    {\n        return await _context.Videos\n            .Include(v =&gt; v.VideoRevenueConfig)\n            .FirstOrDefaultAsync(v =&gt; v.Id == id &amp;&amp; v.IsActive);\n    }\n}\n</code></pre>"},{"location":"arquitetura/comunicacao-entre-sistemas/#transacoes","title":"Transa\u00e7\u00f5es","text":"<pre><code>// Opera\u00e7\u00f5es at\u00f4micas\nusing var transaction = await _context.Database.BeginTransactionAsync();\ntry\n{\n    // 1. Criar order\n    _context.Orders.Add(order);\n    await _context.SaveChangesAsync();\n\n    // 2. Criar payment\n    _context.Payments.Add(payment);\n    await _context.SaveChangesAsync();\n\n    // 3. Criar notification\n    _context.Notifications.Add(notification);\n    await _context.SaveChangesAsync();\n\n    await transaction.CommitAsync();\n}\ncatch\n{\n    await transaction.RollbackAsync();\n    throw;\n}\n</code></pre>"},{"location":"arquitetura/comunicacao-entre-sistemas/#3-backend-api-email-api","title":"3. Backend API \u2194 Email API","text":""},{"location":"arquitetura/comunicacao-entre-sistemas/#comunicacao-assincrona-via-database","title":"Comunica\u00e7\u00e3o Ass\u00edncrona via Database","text":"<p>N\u00e3o h\u00e1 comunica\u00e7\u00e3o HTTP direta. A comunica\u00e7\u00e3o acontece atrav\u00e9s do banco de dados compartilhado:</p> <pre><code>sequenceDiagram\n    participant B as Backend API\n    participant D as PostgreSQL\n    participant H as Hangfire\n    participant E as Email API\n    participant U as Usu\u00e1rio\n\n    B-&gt;&gt;D: INSERT INTO notifications&lt;br/&gt;(type, channel, metadata, status=pending)\n    Note over D: Notification registrada\n\n    loop A cada X minutos (cron)\n        H-&gt;&gt;E: Dispara Job\n        E-&gt;&gt;D: SELECT * FROM notifications&lt;br/&gt;WHERE status=pending AND type=X\n        E-&gt;&gt;E: Renderiza template\n        E-&gt;&gt;U: Envia email/WhatsApp\n        E-&gt;&gt;D: UPDATE notifications&lt;br/&gt;SET date_sent=now(), status=sent\n    end</code></pre>"},{"location":"arquitetura/comunicacao-entre-sistemas/#exemplo-completo","title":"Exemplo Completo","text":"<p>Backend API cria notifica\u00e7\u00e3o:</p> <pre><code>// Em qualquer Service do Backend API\nvar notification = new Notification\n{\n    Type = NotificationTypeEnum.VideoReleaseSchedule,\n    Channel = user.NotificationPreference, // Email, WhatsApp ou All\n    MetadataJson = JsonSerializer.Serialize(new\n    {\n        Email = user.Email,\n        PhoneNumber = user.Telephone,\n        Name = user.FirstName,\n        VideoTitle = video.Title,\n        VideoId = video.Id,\n        Subject = \"Novo v\u00eddeo dispon\u00edvel!\"\n    }),\n    ScheduleDate = video.ReleaseDate, // Opcional: agendar para o futuro\n    IsActive = true,\n    CreatedAt = DateTime.UtcNow\n};\n\nawait _context.Notifications.AddAsync(notification);\nawait _context.SaveChangesAsync();\n// Pronto! Email API processar\u00e1\n</code></pre> <p>Email API processa (automaticamente via Hangfire):</p> <pre><code>// Job configurado no appsettings.json\n// { \"Type\": \"VideoReleaseSchedule\", \"Channel\": \"Email\", \"CronExpression\": \"*/5 * * * *\" }\n\npublic async Task SendScheduledByTypeAndChannelAsync(\n    NotificationTypeEnum.VideoReleaseSchedule,\n    NotificationChannelEnum.Email)\n{\n    // 1. Busca notifica\u00e7\u00f5es pendentes\n    var notifications = await _context.Notifications\n        .Where(n =&gt; n.Type == NotificationTypeEnum.VideoReleaseSchedule &amp;&amp;\n                   n.Channel == NotificationChannelEnum.Email &amp;&amp;\n                   n.DateSent == null &amp;&amp;\n                   n.SendAttempts &lt; 3)\n        .ToListAsync();\n\n    // 2. Processa cada uma\n    foreach (var notification in notifications)\n    {\n        var metadata = JsonSerializer.Deserialize&lt;Dictionary&lt;string, string&gt;&gt;(\n            notification.MetadataJson);\n\n        // 3. Renderiza template\n        var html = await _templateRenderer.RenderAsync(\n            NotificationTypeEnum.VideoReleaseSchedule,\n            metadata);\n\n        // 4. Envia\n        var success = await _emailSender.SendAsync(\n            metadata[\"Email\"],\n            metadata[\"Subject\"],\n            html);\n\n        // 5. Atualiza status\n        notification.SendAttempts++;\n        if (success)\n        {\n            notification.DateSent = DateTime.UtcNow;\n        }\n        else\n        {\n            notification.ErrorMessage = \"Failed to send\";\n        }\n    }\n\n    await _context.SaveChangesAsync();\n}\n</code></pre>"},{"location":"arquitetura/comunicacao-entre-sistemas/#4-backend-api-iugu","title":"4. Backend API \u2194 Iugu","text":""},{"location":"arquitetura/comunicacao-entre-sistemas/#criacao-de-invoice-com-split","title":"Cria\u00e7\u00e3o de Invoice com Split","text":"<pre><code>sequenceDiagram\n    participant B as Backend API\n    participant I as Iugu API\n    participant D as Database\n\n    B-&gt;&gt;B: Calcula split baseado em&lt;br/&gt;VideoRevenueConfig\n    B-&gt;&gt;I: POST /v1/invoices&lt;br/&gt;{email, items, splits[]}\n    Note over I: splits: [&lt;br/&gt;  {account_id: master, %},&lt;br/&gt;  {account_id: owner_sub, %},&lt;br/&gt;  {account_id: promoter_sub, %}&lt;br/&gt;]\n    I--&gt;&gt;B: {id, secure_url, status: pending}\n    B-&gt;&gt;D: INSERT INTO payments&lt;br/&gt;(iugu_invoice_id, status)\n    B--&gt;&gt;Frontend: {secure_url}</code></pre> <p>C\u00f3digo do Backend:</p> <pre><code>public async Task&lt;IuguInvoiceDto&gt; CreateInvoiceWithSplitAsync(Order order)\n{\n    var owner = await GetOwnerForVideo(order.VideoId);\n    var promoter = order.PromoterId.HasValue \n        ? await GetOwnerById(order.PromoterId.Value) \n        : null;\n\n    // Montar splits\n    var splits = new List&lt;IuguSplitDto&gt;\n    {\n        // Plataforma (conta master) - recebe o que sobrar\n        new IuguSplitDto\n        {\n            recipient_account_id = _config.MasterAccountId,\n            percent = order.PlatformAmount / (decimal)order.Amount * 100\n        },\n        // Owner/Influencer\n        new IuguSplitDto\n        {\n            recipient_account_id = owner.IuguAccountId,\n            percent = order.OwnerAmount / (decimal)order.Amount * 100\n        }\n    };\n\n    // Promoter (se houver)\n    if (promoter != null &amp;&amp; order.PromoterAmount &gt; 0)\n    {\n        splits.Add(new IuguSplitDto\n        {\n            recipient_account_id = promoter.IuguAccountId,\n            percent = order.PromoterAmount / (decimal)order.Amount * 100\n        });\n    }\n\n    var request = new CreateIuguInvoiceDto\n    {\n        email = order.User.Email,\n        due_date = DateTime.Now.AddDays(3).ToString(\"yyyy-MM-dd\"),\n        items = new[]\n        {\n            new IuguItemDto\n            {\n                description = $\"V\u00eddeo: {order.Video.Title}\",\n                quantity = 1,\n                price_cents = order.Amount\n            }\n        },\n        splits = splits.ToArray()\n    };\n\n    var response = await _httpClient.PostAsJsonAsync(\n        \"https://api.iugu.com/v1/invoices\",\n        request);\n\n    response.EnsureSuccessStatusCode();\n    return await response.Content.ReadFromJsonAsync&lt;IuguInvoiceDto&gt;();\n}\n</code></pre>"},{"location":"arquitetura/comunicacao-entre-sistemas/#webhook-de-confirmacao","title":"Webhook de Confirma\u00e7\u00e3o","text":"<pre><code>sequenceDiagram\n    participant U as Usu\u00e1rio\n    participant I as Iugu\n    participant B as Backend API\n    participant D as Database\n\n    U-&gt;&gt;I: Paga invoice\n    I-&gt;&gt;I: Executa split autom\u00e1tico\n    I-&gt;&gt;Master: Transfere % plataforma\n    I-&gt;&gt;SubOwner: Transfere % owner\n    I-&gt;&gt;SubPromoter: Transfere % promoter\n\n    I-&gt;&gt;B: POST /api/webhook/iugu&lt;br/&gt;{event: invoice.paid, data: {...}}\n    B-&gt;&gt;B: Valida assinatura webhook\n    B-&gt;&gt;D: UPDATE payments&lt;br/&gt;SET status=paid, paid_at=now\n    B-&gt;&gt;D: INSERT INTO incomes (3x, uma por benefici\u00e1rio)\n    B-&gt;&gt;D: INSERT INTO notifications&lt;br/&gt;(confirma\u00e7\u00e3o de compra)\n    B--&gt;&gt;I: 200 OK</code></pre> <p>Handler do Webhook:</p> <pre><code>[AllowAnonymous]\n[HttpPost(\"/api/webhook/iugu\")]\npublic async Task&lt;IResult&gt; HandleIuguWebhook(\n    [FromBody] IuguWebhookDto webhook,\n    [FromHeader(Name = \"X-Iugu-Signature\")] string signature)\n{\n    // 1. Validar assinatura (seguran\u00e7a)\n    if (!ValidateSignature(webhook, signature))\n        return Results.Unauthorized();\n\n    // 2. Processar evento\n    if (webhook.Event == \"invoice.status_changed\" &amp;&amp; \n        webhook.Data.Status == \"paid\")\n    {\n        await _paymentService.ConfirmPaymentAsync(webhook.Data.Id);\n    }\n\n    return Results.Ok();\n}\n</code></pre>"},{"location":"arquitetura/comunicacao-entre-sistemas/#5-backend-api-cloudinary","title":"5. Backend API \u2194 Cloudinary","text":""},{"location":"arquitetura/comunicacao-entre-sistemas/#upload-de-video","title":"Upload de V\u00eddeo","text":"<pre><code>public async Task&lt;CloudinaryUploadResult&gt; UploadVideoAsync(IFormFile file)\n{\n    var uploadParams = new VideoUploadParams()\n    {\n        File = new FileDescription(file.FileName, file.OpenReadStream()),\n        PublicId = $\"videos/{Guid.NewGuid()}\",\n        ResourceType = ResourceType.Video,\n        Folder = \"amasso-videos\"\n    };\n\n    var result = await _cloudinary.UploadAsync(uploadParams);\n\n    return new CloudinaryUploadResult\n    {\n        PublicId = result.PublicId,\n        SecureUrl = result.SecureUrl,\n        Format = result.Format,\n        Duration = result.Duration\n    };\n}\n</code></pre>"},{"location":"arquitetura/comunicacao-entre-sistemas/#6-email-api-smtpz-api","title":"6. Email API \u2194 SMTP/Z-API","text":""},{"location":"arquitetura/comunicacao-entre-sistemas/#smtp-aws-ses","title":"SMTP (AWS SES)","text":"<pre><code>using var smtp = new SmtpClient(\"email-smtp.us-east-1.amazonaws.com\", 587)\n{\n    Credentials = new NetworkCredential(username, password),\n    EnableSsl = true\n};\n\nusing var message = new MailMessage\n{\n    From = new MailAddress(\"noreply@amasso.com.br\", \"Amasso\"),\n    To = { new MailAddress(recipient) },\n    Subject = subject,\n    Body = htmlBody,\n    IsBodyHtml = true\n};\n\nawait smtp.SendMailAsync(message);\n</code></pre>"},{"location":"arquitetura/comunicacao-entre-sistemas/#z-api-whatsapp","title":"Z-API (WhatsApp)","text":"<pre><code>var payload = new\n{\n    phone = phoneNumber, // ex: \"5511999999999\"\n    message = textMessage\n};\n\nvar endpoint = $\"https://api.z-api.io/instances/{instanceId}/token/{token}/send-text\";\n\n_httpClient.DefaultRequestHeaders.Add(\"Client-Token\", clientToken);\n\nvar response = await _httpClient.PostAsJsonAsync(endpoint, payload);\nreturn response.IsSuccessStatusCode;\n</code></pre>"},{"location":"arquitetura/comunicacao-entre-sistemas/#fluxo-completo-compra-de-video","title":"Fluxo Completo: Compra de V\u00eddeo","text":"<pre><code>sequenceDiagram\n    participant U as Usu\u00e1rio\n    participant F as Frontend\n    participant B as Backend API\n    participant D as PostgreSQL\n    participant I as Iugu\n    participant E as Email API\n    participant S as SMTP\n\n    U-&gt;&gt;F: Clica \"Comprar V\u00eddeo\"\n    F-&gt;&gt;B: POST /api/orders {videoId, affiliateLinkId?}\n\n    B-&gt;&gt;D: BEGIN TRANSACTION\n    B-&gt;&gt;D: INSERT INTO orders\n    B-&gt;&gt;I: POST /invoices (com splits)\n    I--&gt;&gt;B: {invoice_id, secure_url}\n    B-&gt;&gt;D: INSERT INTO payments\n    B-&gt;&gt;D: INSERT INTO notifications (pedido criado)\n    B-&gt;&gt;D: COMMIT\n\n    B--&gt;&gt;F: {secure_url}\n    F--&gt;&gt;U: Redireciona para Iugu\n\n    U-&gt;&gt;I: Paga\n    I-&gt;&gt;I: Executa split\n    I-&gt;&gt;B: Webhook: invoice.paid\n\n    B-&gt;&gt;D: BEGIN TRANSACTION\n    B-&gt;&gt;D: UPDATE payments SET status=paid\n    B-&gt;&gt;D: INSERT INTO incomes (3x)\n    B-&gt;&gt;D: INSERT INTO notifications (pagamento confirmado)\n    B-&gt;&gt;D: COMMIT\n\n    B--&gt;&gt;I: 200 OK\n\n    Note over E: Job executa (cron)\n    E-&gt;&gt;D: SELECT notifications pendentes\n    E-&gt;&gt;S: Envia email/WhatsApp\n    S--&gt;&gt;U: Notifica\u00e7\u00e3o\n    E-&gt;&gt;D: UPDATE notifications SET date_sent</code></pre>"},{"location":"arquitetura/comunicacao-entre-sistemas/#seguranca-na-comunicacao","title":"Seguran\u00e7a na Comunica\u00e7\u00e3o","text":""},{"location":"arquitetura/comunicacao-entre-sistemas/#1-frontend-backend","title":"1. Frontend \u2194 Backend","text":"<ul> <li>HTTPS obrigat\u00f3rio em produ\u00e7\u00e3o</li> <li>JWT com expiration</li> <li>Refresh tokens</li> <li>CORS configurado</li> </ul>"},{"location":"arquitetura/comunicacao-entre-sistemas/#2-backend-database","title":"2. Backend \u2194 Database","text":"<ul> <li>Connection string com credenciais seguras</li> <li>Parameterized queries (EF Core)</li> <li>Migrations versionadas</li> </ul>"},{"location":"arquitetura/comunicacao-entre-sistemas/#3-backend-iugu","title":"3. Backend \u2194 Iugu","text":"<ul> <li>API Token em vari\u00e1veis de ambiente</li> <li>Valida\u00e7\u00e3o de assinatura em webhooks</li> <li>HTTPS para todas as chamadas</li> </ul>"},{"location":"arquitetura/comunicacao-entre-sistemas/#4-email-api-external","title":"4. Email API \u2194 External","text":"<ul> <li>Token de autentica\u00e7\u00e3o para endpoints manuais</li> <li>SMTP com TLS</li> <li>Z-API com client token</li> </ul>"},{"location":"arquitetura/comunicacao-entre-sistemas/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<ul> <li>Veja Fluxos de Neg\u00f3cio para cen\u00e1rios detalhados</li> <li>Consulte Pagamentos Iugu para entender splits</li> <li>Explore Casos de Uso com c\u00f3digo completo</li> </ul>"},{"location":"arquitetura/email-api/","title":"Email API","text":""},{"location":"arquitetura/email-api/#visao-geral","title":"Vis\u00e3o Geral","text":"<p>A Email API \u00e9 um servi\u00e7o dedicado ao envio ass\u00edncrono de notifica\u00e7\u00f5es via email e WhatsApp, constru\u00eddo com ASP.NET Core 8.0 e Hangfire.</p> <p>Localiza\u00e7\u00e3o: <code>email-api/</code></p>"},{"location":"arquitetura/email-api/#por-que-um-servico-separado","title":"Por que um Servi\u00e7o Separado?","text":"<ul> <li>Desacoplamento: Backend API foca em l\u00f3gica de neg\u00f3cio, Email API foca em comunica\u00e7\u00e3o</li> <li>Escalabilidade: Pode escalar independentemente do Backend</li> <li>Resili\u00eancia: Falhas no envio n\u00e3o afetam o fluxo principal</li> <li>Retry inteligente: Hangfire gerencia tentativas autom\u00e1ticas</li> <li>Monitoramento: Dashboard espec\u00edfico para jobs de notifica\u00e7\u00e3o</li> </ul>"},{"location":"arquitetura/email-api/#tecnologias","title":"Tecnologias","text":"Tecnologia Vers\u00e3o Prop\u00f3sito .NET 8.0 Framework principal Hangfire 1.8+ Job scheduler e processing Hangfire.PostgreSql 1.20+ Armazenamento de jobs AWS SES - SMTP para emails Z-API - Envio de WhatsApp"},{"location":"arquitetura/email-api/#estrutura-de-pastas","title":"Estrutura de Pastas","text":"<pre><code>email-api/\n\u251c\u2500\u2500 Data/\n\u2502   \u251c\u2500\u2500 Context/\n\u2502   \u2502   \u2514\u2500\u2500 Pay4TruDb.cs                # DbContext compartilhado\n\u2502   \u251c\u2500\u2500 Entities/                       # 3 entidades\n\u2502   \u2502   \u251c\u2500\u2500 Notification.cs\n\u2502   \u2502   \u251c\u2500\u2500 Log.cs\n\u2502   \u2502   \u2514\u2500\u2500 Base.cs\n\u2502   \u251c\u2500\u2500 Enums/\n\u2502   \u2502   \u251c\u2500\u2500 NotificationTypeEnum.cs\n\u2502   \u2502   \u2514\u2500\u2500 NotificationChannelEnum.cs\n\u2502   \u251c\u2500\u2500 Dtos/\n\u2502   \u2502   \u251c\u2500\u2500 Config.cs\n\u2502   \u2502   \u251c\u2500\u2500 Smtp.cs\n\u2502   \u2502   \u251c\u2500\u2500 ZApiSettings.cs\n\u2502   \u2502   \u2514\u2500\u2500 NotificationScheduleConfig.cs\n\u2502   \u251c\u2500\u2500 Configuration/                  # EF Core configs\n\u2502   \u2502   \u251c\u2500\u2500 NotificationConfiguration.cs\n\u2502   \u2502   \u2514\u2500\u2500 LogConfiguration.cs\n\u2502   \u2514\u2500\u2500 Repositories/\n\u2502       \u2514\u2500\u2500 LogRepository.cs\n\u251c\u2500\u2500 Services/\n\u2502   \u251c\u2500\u2500 EmailSender.cs                  # SMTP sender\n\u2502   \u251c\u2500\u2500 WhatsAppSender.cs               # Z-API sender\n\u2502   \u251c\u2500\u2500 TemplateRenderer.cs             # Template engine\n\u2502   \u251c\u2500\u2500 NotificationService.cs          # Orchestrator\n\u2502   \u251c\u2500\u2500 LogCleanupService.cs            # Cleanup old logs\n\u2502   \u2514\u2500\u2500 TemplateRenderer.cs\n\u251c\u2500\u2500 Jobs/\n\u2502   \u251c\u2500\u2500 NotificationJob.cs              # Job management\n\u2502   \u2514\u2500\u2500 LogCleanupJob.cs                # Log cleanup job\n\u251c\u2500\u2500 Endpoints/\n\u2502   \u2514\u2500\u2500 NotificationEndpoints.cs        # Manual triggers\n\u251c\u2500\u2500 Middlewares/\n\u2502   \u251c\u2500\u2500 ExceptionHandleMiddleware.cs\n\u2502   \u2514\u2500\u2500 TokenAuthenticationMiddleware.cs\n\u251c\u2500\u2500 Extensions/\n\u2502   \u251c\u2500\u2500 BuilderExtensions.cs\n\u2502   \u251c\u2500\u2500 AppExtensions.cs\n\u2502   \u2514\u2500\u2500 DateTimeExtensions.cs\n\u251c\u2500\u2500 wwwroot/\n\u2502   \u251c\u2500\u2500 Templates/                      # Email templates (HTML)\n\u2502   \u2502   \u251c\u2500\u2500 MfaCode.html\n\u2502   \u2502   \u251c\u2500\u2500 UserActivation.html\n\u2502   \u2502   \u251c\u2500\u2500 ForgotPassword.html\n\u2502   \u2502   \u2514\u2500\u2500 VideoReleaseSchedule.html\n\u2502   \u2514\u2500\u2500 Templates/Whatsapp/             # WhatsApp templates (TXT)\n\u2502       \u251c\u2500\u2500 MfaCode.txt\n\u2502       \u251c\u2500\u2500 UserActivation.txt\n\u2502       \u251c\u2500\u2500 ForgotPassword.txt\n\u2502       \u2514\u2500\u2500 VideoReleaseSchedule.txt\n\u251c\u2500\u2500 Program.cs\n\u251c\u2500\u2500 Usings.cs\n\u251c\u2500\u2500 appsettings.json\n\u251c\u2500\u2500 Pay4Tru.JobEmails.csproj\n\u2514\u2500\u2500 Dockerfile\n</code></pre>"},{"location":"arquitetura/email-api/#arquitetura","title":"Arquitetura","text":"<pre><code>graph TD\n    A[Backend API] --&gt;|INSERT| B[(notifications table)]\n    C[Hangfire Scheduler] --&gt;|Cron| D[NotificationJob]\n    D --&gt;|SELECT pending| B\n    D --&gt; E[NotificationService]\n    E --&gt; F[TemplateRenderer]\n    F --&gt; G{Channel?}\n    G --&gt;|Email| H[EmailSender]\n    G --&gt;|WhatsApp| I[WhatsAppSender]\n    G --&gt;|All| H\n    G --&gt;|All| I\n    H --&gt; J[SMTP/AWS SES]\n    I --&gt; K[Z-API]\n    J --&gt; L[Usu\u00e1rio]\n    K --&gt; L\n    E --&gt;|UPDATE| B\n\n    style A fill:#512bd4\n    style D fill:#f39c12\n    style E fill:#3498db\n    style B fill:#336791</code></pre>"},{"location":"arquitetura/email-api/#como-funciona","title":"Como Funciona","text":""},{"location":"arquitetura/email-api/#1-backend-api-cria-notificacao","title":"1. Backend API Cria Notifica\u00e7\u00e3o","text":"<pre><code>// No Backend API\nvar notification = new Notification\n{\n    Type = NotificationTypeEnum.UserActivation,\n    Channel = NotificationChannelEnum.Email,\n    MetadataJson = JsonSerializer.Serialize(new \n    {\n        Email = user.Email,\n        Name = user.FirstName,\n        ActivationCode = user.ActivationCode,\n        Subject = \"Ative sua conta Amasso\"\n    })\n};\n\nawait _context.Notifications.AddAsync(notification);\nawait _context.SaveChangesAsync();\n</code></pre>"},{"location":"arquitetura/email-api/#2-hangfire-job-processa","title":"2. Hangfire Job Processa","text":"<p>Jobs configurados via cron expressions no <code>appsettings.json</code>:</p> <pre><code>{\n  \"Config\": {\n    \"NotificationSchedule\": [\n      { \"Type\": \"MfaCode\", \"Channel\": \"Email\", \"CronExpression\": \"*/1 * * * *\" },\n      { \"Type\": \"UserActivation\", \"Channel\": \"Email\", \"CronExpression\": \"*/2 * * * *\" },\n      { \"Type\": \"ForgotPassword\", \"Channel\": \"All\", \"CronExpression\": \"*/3 * * * *\" }\n    ]\n  }\n}\n</code></pre> <p>Registro autom\u00e1tico no startup:</p> <pre><code>// NotificationJob.cs\npublic class NotificationJobManager : INotificationJobManager\n{\n    public void RegisterJobs()\n    {\n        foreach (var config in _scheduleConfigs)\n        {\n            var jobId = $\"notification-{config.Type}-{config.Channel}\";\n\n            RecurringJob.AddOrUpdate&lt;INotificationService&gt;(\n                jobId,\n                service =&gt; service.SendScheduledByTypeAndChannelAsync(\n                    Enum.Parse&lt;NotificationTypeEnum&gt;(config.Type),\n                    Enum.Parse&lt;NotificationChannelEnum&gt;(config.Channel)\n                ),\n                config.CronExpression,\n                TimeZoneInfo.Utc\n            );\n        }\n    }\n}\n</code></pre>"},{"location":"arquitetura/email-api/#3-notificationservice-orquestra","title":"3. NotificationService Orquestra","text":"<pre><code>public async Task SendScheduledByTypeAndChannelAsync(\n    NotificationTypeEnum type, \n    NotificationChannelEnum channel)\n{\n    // Busca notifica\u00e7\u00f5es pendentes\n    var notifications = await _context.Notifications\n        .Where(n =&gt; n.Type == type &amp;&amp;\n                   n.Channel == channel &amp;&amp;\n                   n.IsActive &amp;&amp;\n                   n.DateSent == null &amp;&amp;\n                   n.SendAttempts &lt; 3)\n        .Take(50)\n        .ToListAsync();\n\n    foreach (var notification in notifications)\n    {\n        await ProcessNotificationAsync(notification);\n    }\n\n    await _context.SaveChangesAsync();\n}\n\nprivate async Task ProcessNotificationAsync(Notification notification)\n{\n    var metadata = DeserializeMetadata(notification.MetadataJson);\n    var success = await SendNotificationAsync(notification, metadata);\n\n    notification.SendAttempts++;\n\n    if (success)\n    {\n        notification.DateSent = DateTime.UtcNow;\n        notification.ErrorMessage = null;\n    }\n    else\n    {\n        notification.ErrorMessage = \"Failed to send\";\n    }\n\n    notification.UpdatedAt = DateTime.UtcNow;\n}\n</code></pre>"},{"location":"arquitetura/email-api/#4-templaterenderer-processa-templates","title":"4. TemplateRenderer Processa Templates","text":"<pre><code>public async Task&lt;string&gt; RenderAsync(\n    NotificationTypeEnum type, \n    Dictionary&lt;string, string&gt; metadata)\n{\n    // Carrega template HTML\n    var templatePath = Path.Combine(_templatesPath, $\"{type}.html\");\n    var templateContent = await File.ReadAllTextAsync(templatePath);\n\n    // Enriquece com URLs de config\n    metadata[\"UrlLogoAmasso\"] = _config.UrlLogoAmasso;\n    metadata[\"UrlPortalPay4Tru\"] = _config.UrlPortalPay4Tru;\n\n    // Para UserActivation, gera URL de ativa\u00e7\u00e3o\n    if (type == NotificationTypeEnum.UserActivation)\n    {\n        metadata[\"UrlButton\"] = \n            $\"{_config.UrlPortalPay4Tru}/login?code={metadata[\"ActivationCode\"]}\";\n    }\n\n    // Substitui placeholders {Key}\n    var rendered = templateContent;\n    foreach (var kvp in metadata)\n    {\n        rendered = rendered.Replace($\"{{{kvp.Key}}}\", kvp.Value);\n    }\n\n    return rendered;\n}\n</code></pre>"},{"location":"arquitetura/email-api/#5-emailsender-ou-whatsappsender-envia","title":"5. EmailSender ou WhatsAppSender Envia","text":""},{"location":"arquitetura/email-api/#emailsender","title":"EmailSender","text":"<pre><code>public async Task&lt;bool&gt; SendAsync(string recipient, string subject, string message)\n{\n    using var smtp = new SmtpClient(_settings.Host, _settings.Port)\n    {\n        Credentials = new NetworkCredential(_settings.User, _settings.Pass),\n        EnableSsl = _settings.Ssl\n    };\n\n    using var msg = new MailMessage\n    {\n        From = new MailAddress(_settings.From, _settings.Display),\n        To = { new MailAddress(recipient) },\n        Subject = subject,\n        Body = message,\n        IsBodyHtml = true\n    };\n\n    try\n    {\n        await smtp.SendMailAsync(msg);\n        return true;\n    }\n    catch (Exception ex)\n    {\n        _logger.LogError(ex, \"Failed to send email to {Recipient}\", recipient);\n        return false;\n    }\n}\n</code></pre>"},{"location":"arquitetura/email-api/#whatsappsender","title":"WhatsAppSender","text":"<pre><code>public async Task&lt;bool&gt; SendNotificationAsync(\n    NotificationTypeEnum type,\n    string phoneNumber, \n    Dictionary&lt;string, string&gt; metadata)\n{\n    // Renderiza template de WhatsApp (texto)\n    var message = await _templateRenderer.RenderWhatsAppAsync(type, metadata);\n\n    var payload = new\n    {\n        phone = phoneNumber,\n        message = message\n    };\n\n    var endpoint = $\"https://api.z-api.io/instances/{_settings.InstanceId}\" +\n                   $\"/token/{_settings.Token}/send-text\";\n\n    var response = await _httpClient.PostAsJsonAsync(endpoint, payload);\n\n    return response.IsSuccessStatusCode;\n}\n</code></pre>"},{"location":"arquitetura/email-api/#templates","title":"Templates","text":""},{"location":"arquitetura/email-api/#email-template-html","title":"Email Template (HTML)","text":"<pre><code>&lt;!-- wwwroot/Templates/UserActivation.html --&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"pt\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Ativa\u00e7\u00e3o de Conta&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;img src=\"{UrlLogoAmasso}\" alt=\"Logo Amasso\"&gt;\n    &lt;h1&gt;Ol\u00e1, {Name}!&lt;/h1&gt;\n    &lt;p&gt;Bem-vindo ao Amasso&lt;/p&gt;\n    &lt;p&gt;Voc\u00ea est\u00e1 a um passo de fazer parte disso!&lt;/p&gt;\n    &lt;a href=\"{UrlButton}\"&gt;Ativar Conta&lt;/a&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Vari\u00e1veis dispon\u00edveis: - <code>{Name}</code> - Nome do usu\u00e1rio - <code>{UrlLogoAmasso}</code> - URL do logo - <code>{UrlButton}</code> - URL de a\u00e7\u00e3o - Espec\u00edficas por tipo (ActivationCode, ResetToken, Code, etc.)</p>"},{"location":"arquitetura/email-api/#whatsapp-template-texto","title":"WhatsApp Template (Texto)","text":"<pre><code>&lt;!-- wwwroot/Templates/Whatsapp/UserActivation.txt --&gt;\n\ud83c\udf89 *Bem-vindo ao Amasso*\n\nOl\u00e1, *{Name}*!\n\nVoc\u00ea est\u00e1 a um passo de fazer parte disso!\n\nPara ativar sua conta, clique no link abaixo:\n{ActivationUrl}\n\nAtenciosamente,\n*Equipe Amasso*\n</code></pre>"},{"location":"arquitetura/email-api/#hangfire-dashboard","title":"Hangfire Dashboard","text":"<p>Acess\u00edvel em <code>/dashboard</code>:</p> <p>Autentica\u00e7\u00e3o: <pre><code>// Filtro de autoriza\u00e7\u00e3o b\u00e1sica\npublic class HangfireAuthorizationCustomFilter : IDashboardAuthorizationFilter\n{\n    public bool Authorize(DashboardContext context)\n    {\n        #if DEBUG\n            return true;\n        #endif\n\n        // Em produ\u00e7\u00e3o: Basic Auth\n        var authHeader = context.GetHttpContext().Request.Headers[\"Authorization\"];\n        // Validar credenciais...\n    }\n}\n</code></pre></p> <p>Funcionalidades: - Visualizar jobs agendados - Ver execu\u00e7\u00f5es passadas - Retry manual - Ver falhas - M\u00e9tricas de performance</p>"},{"location":"arquitetura/email-api/#retry-e-resiliencia","title":"Retry e Resili\u00eancia","text":""},{"location":"arquitetura/email-api/#estrategia-de-retry","title":"Estrat\u00e9gia de Retry","text":"<ul> <li>M\u00e1ximo de tentativas: 3</li> <li>Quando: Falha no envio (SMTP/Z-API indispon\u00edvel)</li> <li>Como: Job roda novamente e pega notifica\u00e7\u00f5es com <code>SendAttempts &lt; 3</code></li> </ul> <pre><code>// Query considera tentativas\n.Where(n =&gt; n.SendAttempts &lt; MaxRetryAttempts)\n</code></pre>"},{"location":"arquitetura/email-api/#timeout","title":"Timeout","text":"<pre><code>services.AddHttpClient&lt;WhatsAppSender&gt;(client =&gt;\n{\n    client.Timeout = TimeSpan.FromSeconds(60);\n});\n</code></pre>"},{"location":"arquitetura/email-api/#logging","title":"Logging","text":"<p>Sistema detalhado de logs na tabela <code>logs</code>:</p> <pre><code>await _logRepository.AddLogAsync(\n    requestId: Guid.NewGuid().ToString(),\n    level: \"info\",\n    event: \"emailsender.sendasync.started\",\n    payload: new\n    {\n        Recipient = recipient,\n        Subject = subject,\n        StartTime = DateTime.UtcNow\n    },\n    source: \"EmailSender\"\n);\n</code></pre> <p>N\u00edveis: debug, info, warning, error</p> <p>Cleanup autom\u00e1tico: - Debug: 1 dia - Info: 3 dias - Warning: 5 dias - Error: 7 dias</p>"},{"location":"arquitetura/email-api/#endpoints-manuais","title":"Endpoints Manuais","text":"<p>Para triggers manuais (testes, reprocessamento):</p> <pre><code>POST /api/notifications/send/{id}\nPOST /api/notifications/send-scheduled/{type}/{channel}\nGET /api/notifications/{id}/status\n</code></pre> <p>Autentica\u00e7\u00e3o: Bearer token SHA256 baseado em data</p> <pre><code>// Gera\u00e7\u00e3o do token (Backend API deve usar)\nvar date = DateTime.UtcNow.Date.ToString(\"yyyy-MM-dd\");\nvar input = $\"{secretKey}{date}\";\nvar hash = SHA256.Hash(input).ToLower();\n// Usar como: Authorization: Bearer {hash}\n</code></pre>"},{"location":"arquitetura/email-api/#configuracoes","title":"Configura\u00e7\u00f5es","text":""},{"location":"arquitetura/email-api/#appsettingsjson","title":"appsettings.json","text":"<pre><code>{\n  \"ConnectionStrings\": {\n    \"Pay4TruDb\": \"Host=localhost;Database=pay4tru;Username=postgres;Password=***\"\n  },\n  \"Smtp\": {\n    \"Host\": \"email-smtp.us-east-1.amazonaws.com\",\n    \"Port\": 587,\n    \"Ssl\": true,\n    \"User\": \"***\",\n    \"Pass\": \"***\",\n    \"From\": \"noreply@amasso.com.br\",\n    \"Display\": \"Amasso\"\n  },\n  \"ZApi\": {\n    \"InstanceId\": \"***\",\n    \"Token\": \"***\",\n    \"ClientToken\": \"***\"\n  },\n  \"TokenAuth\": {\n    \"SecretKey\": \"your-secret-key\",\n    \"SkipInDevelopment\": true\n  },\n  \"Config\": {\n    \"Attempts\": 3,\n    \"UrlPortalPay4Tru\": \"https://amasso.com.br\",\n    \"UrlLogoAmasso\": \"https://cdn.amasso.com.br/logo.png\",\n    \"NotificationSchedule\": [\n      { \"Type\": \"MfaCode\", \"Channel\": \"Email\", \"CronExpression\": \"*/1 * * * *\" },\n      { \"Type\": \"UserActivation\", \"Channel\": \"Email\", \"CronExpression\": \"*/2 * * * *\" },\n      { \"Type\": \"ForgotPassword\", \"Channel\": \"All\", \"CronExpression\": \"*/3 * * * *\" },\n      { \"Type\": \"VideoReleaseSchedule\", \"Channel\": \"Email\", \"CronExpression\": \"*/5 * * * *\" }\n    ]\n  }\n}\n</code></pre>"},{"location":"arquitetura/email-api/#tipos-de-notificacao","title":"Tipos de Notifica\u00e7\u00e3o","text":"Tipo Descri\u00e7\u00e3o Canais Vari\u00e1veis MfaCode C\u00f3digo 2FA Email, WhatsApp Name, Code UserActivation Ativar conta Email, WhatsApp Name, ActivationCode, ActivationUrl ForgotPassword Reset senha Email, WhatsApp Name, ResetToken, ResetUrl VideoReleaseSchedule Lan\u00e7amento Email, WhatsApp Name, VideoTitle, VideoUrl"},{"location":"arquitetura/email-api/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<ul> <li>Consulte APIs &gt; Email API para refer\u00eancia completa</li> <li>Veja Guias &gt; Email API para configurar localmente</li> <li>Entenda Fluxos &gt; Notifica\u00e7\u00f5es em detalhes</li> </ul>"},{"location":"arquitetura/frontend/","title":"Frontend","text":""},{"location":"arquitetura/frontend/#visao-geral","title":"Vis\u00e3o Geral","text":"<p>O Frontend \u00e9 uma Single Page Application (SPA) constru\u00edda com React 18 e TypeScript, oferecendo uma experi\u00eancia moderna e responsiva para todos os perfis de usu\u00e1rio.</p> <p>Localiza\u00e7\u00e3o: <code>frontend-react/</code></p>"},{"location":"arquitetura/frontend/#tecnologias","title":"Tecnologias","text":"Tecnologia Vers\u00e3o Prop\u00f3sito React 18 Framework UI TypeScript 5 Linguagem tipada Redux Toolkit 2.2+ Gerenciamento de estado React Router 6 Roteamento Axios 1.7+ HTTP client Material-UI 5 Componentes UI Bootstrap 5 Estilos e grid Vite 5 Build tool Cloudinary React - Player de v\u00eddeos"},{"location":"arquitetura/frontend/#estrutura-de-pastas","title":"Estrutura de Pastas","text":"<pre><code>frontend-react/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 main.tsx                        # Entry point\n\u2502   \u251c\u2500\u2500 routes/\n\u2502   \u2502   \u251c\u2500\u2500 Router.tsx                  # Configura\u00e7\u00e3o de rotas\n\u2502   \u2502   \u251c\u2500\u2500 ProtectedRoute.tsx          # HOC para rotas protegidas\n\u2502   \u2502   \u251c\u2500\u2500 RedirectBasedOnUser.tsx     # Redirect por perfil\n\u2502   \u2502   \u2514\u2500\u2500 paths.ts                    # Constantes de rotas\n\u2502   \u251c\u2500\u2500 pages/                          # P\u00e1ginas por rota\n\u2502   \u2502   \u251c\u2500\u2500 home/\n\u2502   \u2502   \u251c\u2500\u2500 login/\n\u2502   \u2502   \u251c\u2500\u2500 sigin/                      # Cadastro\n\u2502   \u2502   \u251c\u2500\u2500 my-account/\n\u2502   \u2502   \u251c\u2500\u2500 videosHome/\n\u2502   \u2502   \u251c\u2500\u2500 view-content/               # Player de v\u00eddeo comprado\n\u2502   \u2502   \u251c\u2500\u2500 admin/                      # 32 arquivos (dashboard admin)\n\u2502   \u2502   \u251c\u2500\u2500 partners/                   # \u00c1rea de promoters/influencers\n\u2502   \u2502   \u251c\u2500\u2500 payment-terms/\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u251c\u2500\u2500 components/                     # Componentes reutiliz\u00e1veis\n\u2502   \u2502   \u251c\u2500\u2500 nav/\n\u2502   \u2502   \u251c\u2500\u2500 footer/\n\u2502   \u2502   \u251c\u2500\u2500 videoCard/\n\u2502   \u2502   \u251c\u2500\u2500 forms/                      # 28 arquivos de formul\u00e1rios\n\u2502   \u2502   \u251c\u2500\u2500 user/\n\u2502   \u2502   \u251c\u2500\u2500 admin/\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u251c\u2500\u2500 common/\n\u2502   \u2502   \u251c\u2500\u2500 http/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 httpClient.ts           # Axios configurado\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 api/                    # 19 servi\u00e7os de API\n\u2502   \u2502   \u2502       \u251c\u2500\u2500 authApi.ts\n\u2502   \u2502   \u2502       \u251c\u2500\u2500 videoApi.ts\n\u2502   \u2502   \u2502       \u251c\u2500\u2500 orderApi.ts\n\u2502   \u2502   \u2502       \u251c\u2500\u2500 userApi.ts\n\u2502   \u2502   \u2502       \u2514\u2500\u2500 ...\n\u2502   \u2502   \u251c\u2500\u2500 models/                     # 41 TypeScript interfaces\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 User.ts\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 Video.ts\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 Order.ts\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u2502   \u251c\u2500\u2500 enums/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 user-type.enum.ts\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 status.enum.ts\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u2502   \u2514\u2500\u2500 utils/\n\u2502   \u2502       \u251c\u2500\u2500 formatters.ts\n\u2502   \u2502       \u2514\u2500\u2500 phoneUtils.ts\n\u2502   \u251c\u2500\u2500 hooks/                          # Custom hooks\n\u2502   \u2502   \u251c\u2500\u2500 useUserLogged.ts\n\u2502   \u2502   \u251c\u2500\u2500 useUserType.ts\n\u2502   \u2502   \u251c\u2500\u2500 useAffiliateLinks.ts\n\u2502   \u2502   \u251c\u2500\u2500 useDocumentVerification.ts\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u251c\u2500\u2500 store/                          # Redux\n\u2502   \u2502   \u251c\u2500\u2500 index.ts\n\u2502   \u2502   \u2514\u2500\u2500 slices/\n\u2502   \u2502       \u2514\u2500\u2500 userSlice.ts\n\u2502   \u251c\u2500\u2500 services/\n\u2502   \u2502   \u251c\u2500\u2500 ageVerificationService.ts\n\u2502   \u2502   \u2514\u2500\u2500 featureFlagService.ts\n\u2502   \u251c\u2500\u2500 assets/\n\u2502   \u2502   \u251c\u2500\u2500 img/\n\u2502   \u2502   \u251c\u2500\u2500 fonts/\n\u2502   \u2502   \u2514\u2500\u2500 i18n/\n\u2502   \u2514\u2500\u2500 custom.scss                     # Estilos globais\n\u251c\u2500\u2500 index.html\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 tsconfig.json\n\u251c\u2500\u2500 vite.config.ts\n\u2514\u2500\u2500 Dockerfile\n</code></pre>"},{"location":"arquitetura/frontend/#arquitetura-de-componentes","title":"Arquitetura de Componentes","text":"<pre><code>graph TD\n    A[App.tsx] --&gt; B[Router]\n    B --&gt; C[Public Routes]\n    B --&gt; D[Protected Routes]\n\n    C --&gt; E[Home]\n    C --&gt; F[Login]\n    C --&gt; G[Signup]\n\n    D --&gt; H{User Type?}\n    H --&gt;|Admin| I[Admin Pages]\n    H --&gt;|Default| J[User Pages]\n    H --&gt;|Promoter| K[Promoter Pages]\n    H --&gt;|Influencer| L[Influencer Pages]\n\n    I --&gt; M[Components]\n    J --&gt; M\n    K --&gt; M\n    L --&gt; M\n\n    M --&gt; N[Redux Store]\n    N --&gt; O[API Services]\n    O --&gt; P[Backend API]\n\n    style H fill:#f39c12\n    style N fill:#9b59b6\n    style O fill:#3498db</code></pre>"},{"location":"arquitetura/frontend/#roteamento","title":"Roteamento","text":""},{"location":"arquitetura/frontend/#configuracao-principal-routertsx","title":"Configura\u00e7\u00e3o Principal (Router.tsx)","text":"<pre><code>export const Router = () =&gt; {\n  return (\n    &lt;BrowserRouter&gt;\n      &lt;Routes&gt;\n        {/* Rotas p\u00fablicas */}\n        &lt;Route path={paths.home} element={&lt;Home /&gt;} /&gt;\n        &lt;Route path={paths.login} element={&lt;Login /&gt;} /&gt;\n        &lt;Route path={paths.signup} element={&lt;Signup /&gt;} /&gt;\n        &lt;Route path={paths.forgotPassword} element={&lt;ForgotPassword /&gt;} /&gt;\n\n        {/* Rotas protegidas */}\n        &lt;Route element={&lt;ProtectedRoute /&gt;}&gt;\n          &lt;Route path={paths.myAccount} element={&lt;MyAccount /&gt;} /&gt;\n          &lt;Route path={paths.videos} element={&lt;VideosHome /&gt;} /&gt;\n          &lt;Route path={paths.viewContent} element={&lt;ViewContent /&gt;} /&gt;\n\n          {/* Admin */}\n          &lt;Route element={&lt;ProtectedRoute requiredRole=\"Admin\" /&gt;}&gt;\n            &lt;Route path={paths.admin} element={&lt;AdminDashboard /&gt;} /&gt;\n            &lt;Route path={paths.adminUsers} element={&lt;AdminUsers /&gt;} /&gt;\n            &lt;Route path={paths.adminVideos} element={&lt;AdminVideos /&gt;} /&gt;\n            &lt;Route path={paths.adminKyc} element={&lt;AdminKyc /&gt;} /&gt;\n          &lt;/Route&gt;\n\n          {/* Promoter */}\n          &lt;Route element={&lt;ProtectedRoute requiredRole=\"Promoter\" /&gt;}&gt;\n            &lt;Route path={paths.promoterDashboard} element={&lt;PromoterDashboard /&gt;} /&gt;\n            &lt;Route path={paths.promoterLinks} element={&lt;PromoterLinks /&gt;} /&gt;\n          &lt;/Route&gt;\n\n          {/* Influencer */}\n          &lt;Route element={&lt;ProtectedRoute requiredRole=\"Influencer\" /&gt;}&gt;\n            &lt;Route path={paths.influencerDashboard} element={&lt;InfluencerDashboard /&gt;} /&gt;\n          &lt;/Route&gt;\n        &lt;/Route&gt;\n      &lt;/Routes&gt;\n    &lt;/BrowserRouter&gt;\n  );\n};\n</code></pre>"},{"location":"arquitetura/frontend/#protected-route-hoc","title":"Protected Route HOC","text":"<pre><code>export const ProtectedRoute = ({ requiredRole }: { requiredRole?: string }) =&gt; {\n  const user = useSelector((state: RootState) =&gt; state.user.currentUser);\n  const token = localStorage.getItem('token');\n\n  if (!token || !user) {\n    return &lt;Navigate to={paths.login} replace /&gt;;\n  }\n\n  if (requiredRole &amp;&amp; user.type !== requiredRole) {\n    return &lt;Navigate to={paths.accessDenied} replace /&gt;;\n  }\n\n  return &lt;Outlet /&gt;;\n};\n</code></pre>"},{"location":"arquitetura/frontend/#gerenciamento-de-estado","title":"Gerenciamento de Estado","text":""},{"location":"arquitetura/frontend/#redux-store","title":"Redux Store","text":"<pre><code>// store/index.ts\nimport { configureStore } from '@reduxjs/toolkit';\nimport userReducer from './slices/userSlice';\n\nexport const store = configureStore({\n  reducer: {\n    user: userReducer,\n  },\n});\n\nexport type RootState = ReturnType&lt;typeof store.getState&gt;;\nexport type AppDispatch = typeof store.dispatch;\n</code></pre>"},{"location":"arquitetura/frontend/#user-slice","title":"User Slice","text":"<pre><code>// store/slices/userSlice.ts\ninterface UserState {\n  currentUser: User | null;\n  isAuthenticated: boolean;\n  loading: boolean;\n}\n\nconst initialState: UserState = {\n  currentUser: null,\n  isAuthenticated: false,\n  loading: false,\n};\n\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {\n    setUser: (state, action: PayloadAction&lt;User&gt;) =&gt; {\n      state.currentUser = action.payload;\n      state.isAuthenticated = true;\n    },\n    logout: (state) =&gt; {\n      state.currentUser = null;\n      state.isAuthenticated = false;\n      localStorage.removeItem('token');\n    },\n  },\n});\n</code></pre>"},{"location":"arquitetura/frontend/#comunicacao-com-api","title":"Comunica\u00e7\u00e3o com API","text":""},{"location":"arquitetura/frontend/#http-client-configurado","title":"HTTP Client Configurado","text":"<pre><code>// common/http/httpClient.ts\nimport axios from 'axios';\n\nconst baseURL = import.meta.env.VITE_API_URL || 'http://localhost:7080';\n\nexport const httpClient = axios.create({\n  baseURL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Interceptor para adicionar token\nhttpClient.interceptors.request.use((config) =&gt; {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Interceptor para tratar erros\nhttpClient.interceptors.response.use(\n  (response) =&gt; response,\n  (error) =&gt; {\n    if (error.response?.status === 401) {\n      localStorage.removeItem('token');\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n</code></pre>"},{"location":"arquitetura/frontend/#api-services","title":"API Services","text":"<pre><code>// common/http/api/videoApi.ts\nexport const videoApi = {\n  getAll: async (): Promise&lt;Video[]&gt; =&gt; {\n    const { data } = await httpClient.get('/api/videos');\n    return data;\n  },\n\n  getById: async (id: number): Promise&lt;Video&gt; =&gt; {\n    const { data } = await httpClient.get(`/api/videos/${id}`);\n    return data;\n  },\n\n  // Promoters s\u00f3 veem v\u00eddeos com comiss\u00e3o &gt; 0%\n  getVideosForPromoter: async (): Promise&lt;Video[]&gt; =&gt; {\n    const { data } = await httpClient.get('/api/promoter/videos');\n    return data;\n  },\n\n  create: async (video: CreateVideoDto): Promise&lt;Video&gt; =&gt; {\n    const { data } = await httpClient.post('/api/videos', video);\n    return data;\n  },\n};\n\n// common/http/api/orderApi.ts\nexport const orderApi = {\n  create: async (order: CreateOrderDto): Promise&lt;Order&gt; =&gt; {\n    const { data } = await httpClient.post('/api/orders', order);\n    return data;\n  },\n\n  getMyOrders: async (): Promise&lt;Order[]&gt; =&gt; {\n    const { data } = await httpClient.get('/api/orders/me');\n    return data;\n  },\n};\n</code></pre>"},{"location":"arquitetura/frontend/#componentes-principais","title":"Componentes Principais","text":""},{"location":"arquitetura/frontend/#videocard","title":"VideoCard","text":"<pre><code>interface VideoCardProps {\n  video: Video;\n  showBuyButton?: boolean;\n  onBuyClick?: (videoId: number) =&gt; void;\n}\n\nexport const VideoCard: React.FC&lt;VideoCardProps&gt; = ({\n  video,\n  showBuyButton = true,\n  onBuyClick\n}) =&gt; {\n  const formatPrice = (price: number) =&gt; {\n    return new Intl.NumberFormat('pt-BR', {\n      style: 'currency',\n      currency: 'BRL'\n    }).format(price);\n  };\n\n  return (\n    &lt;Card&gt;\n      &lt;CardMedia\n        component=\"img\"\n        image={video.thumbImgUrl}\n        alt={video.title}\n      /&gt;\n      &lt;CardContent&gt;\n        &lt;Typography variant=\"h5\"&gt;{video.title}&lt;/Typography&gt;\n        &lt;Typography variant=\"body2\"&gt;{video.description}&lt;/Typography&gt;\n        &lt;Typography variant=\"h6\"&gt;{formatPrice(video.price)}&lt;/Typography&gt;\n      &lt;/CardContent&gt;\n      {showBuyButton &amp;&amp; (\n        &lt;CardActions&gt;\n          &lt;Button onClick={() =&gt; onBuyClick?.(video.id)}&gt;\n            Comprar\n          &lt;/Button&gt;\n        &lt;/CardActions&gt;\n      )}\n    &lt;/Card&gt;\n  );\n};\n</code></pre>"},{"location":"arquitetura/frontend/#payment-flow-component","title":"Payment Flow Component","text":"<pre><code>export const PaymentFlow: React.FC = () =&gt; {\n  const [selectedVideo, setSelectedVideo] = useState&lt;Video | null&gt;(null);\n  const [loading, setLoading] = useState(false);\n  const navigate = useNavigate();\n\n  const handleBuyVideo = async (videoId: number) =&gt; {\n    setLoading(true);\n    try {\n      // Criar pedido\n      const order = await orderApi.create({\n        videoId,\n        affiliateLinkId: getAffiliateLinkFromUrl(), // Se veio de link\n      });\n\n      // Redirecionar para URL de pagamento do Iugu\n      window.location.href = order.iuguFaturaSecureUrl;\n    } catch (error) {\n      toast.error('Erro ao processar compra');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;VideoList onBuyClick={handleBuyVideo} /&gt;\n      {loading &amp;&amp; &lt;LoadingSpinner /&gt;}\n    &lt;/div&gt;\n  );\n};\n</code></pre>"},{"location":"arquitetura/frontend/#custom-hooks","title":"Custom Hooks","text":""},{"location":"arquitetura/frontend/#useuserlogged","title":"useUserLogged","text":"<pre><code>export const useUserLogged = () =&gt; {\n  const dispatch = useDispatch();\n  const user = useSelector((state: RootState) =&gt; state.user.currentUser);\n\n  useEffect(() =&gt; {\n    const fetchUser = async () =&gt; {\n      const token = localStorage.getItem('token');\n      if (token &amp;&amp; !user) {\n        try {\n          const userData = await userApi.getMe();\n          dispatch(setUser(userData));\n        } catch (error) {\n          localStorage.removeItem('token');\n        }\n      }\n    };\n\n    fetchUser();\n  }, []);\n\n  return { user, isAuthenticated: !!user };\n};\n</code></pre>"},{"location":"arquitetura/frontend/#useaffiliatelinks-promoter","title":"useAffiliateLinks (Promoter)","text":"<pre><code>export const useAffiliateLinks = () =&gt; {\n  const [links, setLinks] = useState&lt;AffiliateLink[]&gt;([]);\n  const [loading, setLoading] = useState(false);\n\n  const generateLink = async (videoId: number) =&gt; {\n    try {\n      setLoading(true);\n      const link = await affiliateApi.generateLink(videoId);\n      setLinks([...links, link]);\n      return link;\n    } catch (error) {\n      toast.error('Erro ao gerar link');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchLinks = async () =&gt; {\n    try {\n      setLoading(true);\n      const data = await affiliateApi.getMyLinks();\n      setLinks(data);\n    } catch (error) {\n      toast.error('Erro ao carregar links');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return { links, generateLink, fetchLinks, loading };\n};\n</code></pre>"},{"location":"arquitetura/frontend/#paginas-por-perfil","title":"P\u00e1ginas por Perfil","text":""},{"location":"arquitetura/frontend/#admin-dashboard","title":"Admin Dashboard","text":"<ul> <li>Gest\u00e3o de usu\u00e1rios</li> <li>Aprova\u00e7\u00e3o de KYC</li> <li>CRUD de v\u00eddeos com configura\u00e7\u00e3o de comiss\u00f5es</li> <li>Relat\u00f3rios financeiros</li> <li>Logs do sistema</li> </ul>"},{"location":"arquitetura/frontend/#default-user","title":"Default User","text":"<ul> <li>Cat\u00e1logo de v\u00eddeos</li> <li>Compra de v\u00eddeos</li> <li>Biblioteca de v\u00eddeos comprados</li> <li>Player de v\u00eddeos</li> <li>Perfil e configura\u00e7\u00f5es</li> </ul>"},{"location":"arquitetura/frontend/#promoter","title":"Promoter","text":"<ul> <li>Dashboard: Vendas, comiss\u00f5es, convers\u00f5es</li> <li>Gerar Links: Lista de v\u00eddeos com comiss\u00e3o &gt; 0%</li> <li>Meus Links: Links gerados e m\u00e9tricas</li> <li>KYC: Envio de documentos</li> <li>Rendimentos: Hist\u00f3rico de income</li> </ul>"},{"location":"arquitetura/frontend/#influencer","title":"Influencer","text":"<ul> <li>Dashboard: V\u00eddeos, vendas, comiss\u00f5es</li> <li>Meus V\u00eddeos: V\u00eddeos em que participa</li> <li>KYC: Envio de documentos</li> <li>Rendimentos: Hist\u00f3rico de income</li> </ul>"},{"location":"arquitetura/frontend/#responsividade","title":"Responsividade","text":""},{"location":"arquitetura/frontend/#breakpoints","title":"Breakpoints","text":"<pre><code>$mobile: 576px;\n$tablet: 768px;\n$desktop: 992px;\n$large-desktop: 1200px;\n\n@media (max-width: $mobile) {\n  // Mobile styles\n}\n\n@media (min-width: $tablet) and (max-width: $desktop) {\n  // Tablet styles\n}\n</code></pre>"},{"location":"arquitetura/frontend/#hook-de-responsividade","title":"Hook de Responsividade","text":"<pre><code>export const useScreenSize = () =&gt; {\n  const [isMobile, setIsMobile] = useState(window.innerWidth &lt; 768);\n\n  useEffect(() =&gt; {\n    const handleResize = () =&gt; {\n      setIsMobile(window.innerWidth &lt; 768);\n    };\n\n    window.addEventListener('resize', handleResize);\n    return () =&gt; window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return { isMobile };\n};\n</code></pre>"},{"location":"arquitetura/frontend/#build-e-deploy","title":"Build e Deploy","text":""},{"location":"arquitetura/frontend/#desenvolvimento","title":"Desenvolvimento","text":"<pre><code>npm run dev\n# Roda em http://localhost:5173\n</code></pre>"},{"location":"arquitetura/frontend/#producao","title":"Produ\u00e7\u00e3o","text":"<pre><code>npm run build\n# Gera arquivos otimizados em /dist\n</code></pre>"},{"location":"arquitetura/frontend/#variaveis-de-ambiente","title":"Vari\u00e1veis de Ambiente","text":"<pre><code>VITE_API_URL=https://api.amasso.com.br\nVITE_CLOUDINARY_CLOUD_NAME=***\nVITE_GOOGLE_CLIENT_ID=***\n</code></pre>"},{"location":"arquitetura/frontend/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<ul> <li>Explore Casos de Uso para ver fluxos completos</li> <li>Veja Guias &gt; Frontend para configurar</li> <li>Consulte Perfis de Usu\u00e1rio para entender cada \u00e1rea</li> </ul>"},{"location":"arquitetura/visao-geral/","title":"Arquitetura - Vis\u00e3o Geral","text":""},{"location":"arquitetura/visao-geral/#visao-macro-do-sistema","title":"Vis\u00e3o Macro do Sistema","text":"<p>A plataforma Amasso \u00e9 composta por tr\u00eas projetos principais que trabalham em conjunto:</p> <pre><code>graph TB\n    subgraph \"Usu\u00e1rio\"\n        Browser[Navegador Web]\n    end\n\n    subgraph \"Frontend\"\n        React[React App&lt;br/&gt;TypeScript + Redux]\n    end\n\n    subgraph \"Backend\"\n        API[Backend API&lt;br/&gt;.NET 8]\n        EmailAPI[Email API&lt;br/&gt;.NET 8 + Hangfire]\n    end\n\n    subgraph \"Dados\"\n        DB[(PostgreSQL 16)]\n    end\n\n    subgraph \"Servi\u00e7os Externos\"\n        Cloudinary[Cloudinary&lt;br/&gt;CDN de V\u00eddeos]\n        Iugu[Iugu&lt;br/&gt;Gateway Pagamento]\n        SMTP[AWS SES&lt;br/&gt;Email]\n        ZApi[Z-API&lt;br/&gt;WhatsApp]\n    end\n\n    Browser --&gt; React\n    React --&gt; API\n    API --&gt; DB\n    API --&gt; Cloudinary\n    API --&gt; Iugu\n    API --&gt; EmailAPI\n    EmailAPI --&gt; DB\n    EmailAPI --&gt; SMTP\n    EmailAPI --&gt; ZApi\n\n    style React fill:#61dafb\n    style API fill:#512bd4\n    style EmailAPI fill:#512bd4\n    style DB fill:#336791</code></pre>"},{"location":"arquitetura/visao-geral/#componentes-principais","title":"Componentes Principais","text":""},{"location":"arquitetura/visao-geral/#1-frontend-react","title":"1. Frontend React","text":"<p>Localiza\u00e7\u00e3o: <code>frontend-react/</code></p> <ul> <li>Tecnologia: React 18 + TypeScript</li> <li>Estado: Redux Toolkit</li> <li>Build: Vite</li> <li>Responsabilidades:</li> <li>Interface do usu\u00e1rio</li> <li>Comunica\u00e7\u00e3o com Backend API via Axios</li> <li>Roteamento (React Router)</li> <li>Valida\u00e7\u00f5es client-side</li> </ul>"},{"location":"arquitetura/visao-geral/#2-backend-api","title":"2. Backend API","text":"<p>Localiza\u00e7\u00e3o: <code>backend-api/</code></p> <ul> <li>Tecnologia: ASP.NET Core 8.0</li> <li>ORM: Entity Framework Core</li> <li>Responsabilidades:</li> <li>Regras de neg\u00f3cio</li> <li>Gerenciamento de usu\u00e1rios e autentica\u00e7\u00e3o</li> <li>CRUD de v\u00eddeos e pedidos</li> <li>Integra\u00e7\u00e3o com Iugu (pagamentos, subcontas, KYC)</li> <li>Integra\u00e7\u00e3o com Cloudinary (upload de v\u00eddeos)</li> <li>Cria\u00e7\u00e3o de notifica\u00e7\u00f5es no banco</li> </ul>"},{"location":"arquitetura/visao-geral/#3-email-api","title":"3. Email API","text":"<p>Localiza\u00e7\u00e3o: <code>email-api/</code></p> <ul> <li>Tecnologia: ASP.NET Core 8.0 + Hangfire</li> <li>Responsabilidades:</li> <li>Envio ass\u00edncrono de notifica\u00e7\u00f5es</li> <li>Jobs agendados (Hangfire)</li> <li>Templates de email (HTML)</li> <li>Templates de WhatsApp (texto)</li> <li>Integra\u00e7\u00e3o com SMTP e Z-API</li> </ul>"},{"location":"arquitetura/visao-geral/#banco-de-dados-compartilhado","title":"Banco de Dados Compartilhado","text":"<p>Ambas as APIs (Backend e Email) compartilham o mesmo banco PostgreSQL:</p> <ul> <li>Backend API: Leitura e escrita completa</li> <li>Email API: Leitura de notifica\u00e7\u00f5es + escrita de logs</li> </ul> <p>Tabelas Principais: - <code>users</code> - Usu\u00e1rios da plataforma - <code>owners</code> - Dados de KYC e subcontas - <code>videos</code> - Cat\u00e1logo de v\u00eddeos - <code>orders</code> - Pedidos de compra - <code>payments</code> - Pagamentos via Iugu - <code>income</code> - Distribui\u00e7\u00e3o de comiss\u00f5es - <code>notifications</code> - Fila de notifica\u00e7\u00f5es - <code>logs</code> - Logs de sistema</p>"},{"location":"arquitetura/visao-geral/#integracoes-externas","title":"Integra\u00e7\u00f5es Externas","text":""},{"location":"arquitetura/visao-geral/#iugu-gateway-de-pagamento","title":"Iugu (Gateway de Pagamento)","text":"<pre><code>graph LR\n    Backend[Backend API] --&gt;|1. Cria Invoice| Iugu[Iugu API]\n    Iugu --&gt;|2. Webhook Status| Backend\n    Backend --&gt;|3. Valida| DB[(Database)]\n    Iugu --&gt;|Split Autom\u00e1tico| Master[Conta Master]\n    Iugu --&gt;|Split Autom\u00e1tico| Sub1[Subconta Owner]\n    Iugu --&gt;|Split Autom\u00e1tico| Sub2[Subconta Promoter]</code></pre> <p>Funcionalidades Usadas: - Cria\u00e7\u00e3o de invoices (faturas) - Sistema de split de pagamento - Conta master + subcontas - Webhooks de confirma\u00e7\u00e3o - Gest\u00e3o de subcontas (KYC)</p>"},{"location":"arquitetura/visao-geral/#cloudinary-cdn-de-videos","title":"Cloudinary (CDN de V\u00eddeos)","text":"<pre><code>graph LR\n    Admin[Admin] --&gt;|Upload| Backend[Backend API]\n    Backend --&gt;|Store| Cloudinary[Cloudinary CDN]\n    Cloudinary --&gt;|URL Protegida| Backend\n    Backend --&gt;|URL| User[Usu\u00e1rio]\n    User --&gt;|Stream| Cloudinary</code></pre> <p>Funcionalidades Usadas: - Upload de v\u00eddeos e imagens - Armazenamento seguro - URLs protegidas - Streaming otimizado - Transforma\u00e7\u00f5es de v\u00eddeo</p>"},{"location":"arquitetura/visao-geral/#aws-ses-email","title":"AWS SES (Email)","text":"<p>Backend API cria notifica\u00e7\u00e3o \u2192 Email API processa \u2192 AWS SES envia</p>"},{"location":"arquitetura/visao-geral/#z-api-whatsapp","title":"Z-API (WhatsApp)","text":"<p>Backend API cria notifica\u00e7\u00e3o \u2192 Email API processa \u2192 Z-API envia</p>"},{"location":"arquitetura/visao-geral/#fluxo-de-comunicacao","title":"Fluxo de Comunica\u00e7\u00e3o","text":""},{"location":"arquitetura/visao-geral/#fluxo-de-compra-com-split","title":"Fluxo de Compra (Com Split)","text":"<pre><code>sequenceDiagram\n    participant U as Usu\u00e1rio\n    participant F as Frontend\n    participant B as Backend API\n    participant I as Iugu\n    participant D as PostgreSQL\n    participant E as Email API\n\n    U-&gt;&gt;F: Clica em \"Comprar V\u00eddeo\"\n    F-&gt;&gt;B: POST /api/orders\n    B-&gt;&gt;D: Cria Order\n    B-&gt;&gt;I: Cria Invoice com Split\n    Note over I: Split configurado:&lt;br/&gt;Master + Subcontas\n    I--&gt;&gt;B: Retorna URL de pagamento\n    B-&gt;&gt;D: Cria Notification\n    B--&gt;&gt;F: URL de pagamento\n    F--&gt;&gt;U: Redireciona para Iugu\n\n    U-&gt;&gt;I: Realiza pagamento\n    I-&gt;&gt;I: Executa Split\n    I-&gt;&gt;B: Webhook: payment.paid\n    B-&gt;&gt;D: Atualiza Payment\n    B-&gt;&gt;D: Cria Income para cada parte\n\n    Note over E: Job agendado roda\n    E-&gt;&gt;D: Busca notifica\u00e7\u00f5es pendentes\n    E-&gt;&gt;E: Renderiza template\n    E-&gt;&gt;U: Envia email/WhatsApp</code></pre>"},{"location":"arquitetura/visao-geral/#fluxo-de-notificacao","title":"Fluxo de Notifica\u00e7\u00e3o","text":"<pre><code>sequenceDiagram\n    participant B as Backend API\n    participant D as PostgreSQL\n    participant E as Email API\n    participant H as Hangfire\n    participant S as SMTP/Z-API\n    participant U as Usu\u00e1rio\n\n    B-&gt;&gt;D: INSERT INTO notifications\n    Note over D: Status: Pendente&lt;br/&gt;SendAttempts: 0\n\n    Note over H: Cron job executa&lt;br/&gt;(ex: */2 * * * *)\n    H-&gt;&gt;E: Trigger Job\n    E-&gt;&gt;D: SELECT * FROM notifications&lt;br/&gt;WHERE status = pending\n    E-&gt;&gt;E: Renderiza template\n    E-&gt;&gt;S: Envia\n\n    alt Sucesso\n        S--&gt;&gt;E: OK\n        E-&gt;&gt;D: UPDATE DateSent\n    else Falha\n        S--&gt;&gt;E: Erro\n        E-&gt;&gt;D: UPDATE SendAttempts++\n        Note over E: Retry at\u00e9 3x\n    end\n\n    S-&gt;&gt;U: Notifica\u00e7\u00e3o entregue</code></pre>"},{"location":"arquitetura/visao-geral/#padroes-arquiteturais","title":"Padr\u00f5es Arquiteturais","text":""},{"location":"arquitetura/visao-geral/#backend-api-clean-architecture","title":"Backend API - Clean Architecture","text":"<pre><code>Endpoints (Presentation Layer)\n    \u2193\nServices (Business Logic Layer)\n    \u2193\nRepositories/Data (Data Access Layer)\n    \u2193\nDatabase\n</code></pre>"},{"location":"arquitetura/visao-geral/#email-api-job-based-architecture","title":"Email API - Job-Based Architecture","text":"<pre><code>HTTP Endpoints (Trigger manual)\n    \u2193\nHangfire Jobs (Scheduled/Background)\n    \u2193\nServices (Email/WhatsApp Senders)\n    \u2193\nExternal APIs (SMTP/Z-API)\n</code></pre>"},{"location":"arquitetura/visao-geral/#frontend-component-based-architecture","title":"Frontend - Component-Based Architecture","text":"<pre><code>Pages (Route level)\n    \u2193\nComponents (Reusable UI)\n    \u2193\nRedux Store (Global State)\n    \u2193\nAPI Services (HTTP Calls)\n</code></pre>"},{"location":"arquitetura/visao-geral/#seguranca","title":"Seguran\u00e7a","text":""},{"location":"arquitetura/visao-geral/#autenticacao","title":"Autentica\u00e7\u00e3o","text":"<ul> <li>JWT Tokens: Gerados no Backend API, validados em cada request</li> <li>MFA: C\u00f3digo adicional enviado via Email API</li> <li>Refresh Tokens: Para renova\u00e7\u00e3o de sess\u00e3o</li> </ul>"},{"location":"arquitetura/visao-geral/#autorizacao","title":"Autoriza\u00e7\u00e3o","text":"<ul> <li>Role-Based: Admin, Default, Promoter, Influencer</li> <li>Claims: Informa\u00e7\u00f5es do usu\u00e1rio no token</li> <li>Middleware: Valida\u00e7\u00e3o em cada endpoint</li> </ul>"},{"location":"arquitetura/visao-geral/#comunicacao-inter-apis","title":"Comunica\u00e7\u00e3o Inter-APIs","text":"<ul> <li>Backend API \u2192 Email API: Atrav\u00e9s do banco (notifications table)</li> <li>Email API l\u00ea, Backend API escreve</li> <li>Sem comunica\u00e7\u00e3o HTTP direta</li> </ul>"},{"location":"arquitetura/visao-geral/#escalabilidade","title":"Escalabilidade","text":""},{"location":"arquitetura/visao-geral/#horizontal","title":"Horizontal","text":"<ul> <li>Frontend: CDN / Multiple instances</li> <li>Backend API: Load balancer + m\u00faltiplas inst\u00e2ncias</li> <li>Email API: M\u00faltiplos workers Hangfire</li> <li>Database: Replica\u00e7\u00e3o read/write</li> </ul>"},{"location":"arquitetura/visao-geral/#vertical","title":"Vertical","text":"<ul> <li>Otimiza\u00e7\u00e3o de queries</li> <li>Caching (Redis futuro)</li> <li>Compress\u00e3o de responses</li> <li>Lazy loading no frontend</li> </ul>"},{"location":"arquitetura/visao-geral/#monitoramento","title":"Monitoramento","text":""},{"location":"arquitetura/visao-geral/#logs","title":"Logs","text":"<ul> <li>Backend API: Console + Database (logs table)</li> <li>Email API: Console + Database (logs table)</li> <li>Estruturados com contexto (RequestId, Level, Event, Payload)</li> </ul>"},{"location":"arquitetura/visao-geral/#metricas","title":"M\u00e9tricas","text":"<ul> <li>Hangfire Dashboard: Jobs executados, falhas, tempo</li> <li>Application Insights: Performance, erros (futuro)</li> <li>Database: Queries lentas, connections</li> </ul>"},{"location":"arquitetura/visao-geral/#ambientes","title":"Ambientes","text":""},{"location":"arquitetura/visao-geral/#desenvolvimento","title":"Desenvolvimento","text":"<ul> <li>Frontend: <code>localhost:5173</code> (Vite)</li> <li>Backend API: <code>localhost:7080</code></li> <li>Email API: <code>localhost:5014</code></li> <li>Database: <code>localhost:5432</code> (ou Docker)</li> </ul>"},{"location":"arquitetura/visao-geral/#producao","title":"Produ\u00e7\u00e3o","text":"<ul> <li>Frontend: Azure Static Web Apps / Cloudflare</li> <li>Backend API: Azure App Service</li> <li>Email API: Azure App Service</li> <li>Database: Azure PostgreSQL / AWS RDS</li> </ul>"},{"location":"arquitetura/visao-geral/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<p>Explore cada componente em detalhes: - Backend API - Estrutura e endpoints - Email API - Jobs e notifica\u00e7\u00f5es - Frontend - Componentes e rotas - Comunica\u00e7\u00e3o - Fluxos detalhados</p>"},{"location":"banco-de-dados/modelo-entidade-relacionamento/","title":"Modelo Entidade-Relacionamento","text":""},{"location":"banco-de-dados/modelo-entidade-relacionamento/#diagrama-er-completo","title":"Diagrama ER Completo","text":"<pre><code>erDiagram\n    %% Defini\u00e7\u00e3o das entidades principais\n    users {\n        bigint id PK\n        varchar email UK\n        varchar password_hash\n        varchar type \"Admin, Default, Promoter, Influencer\"\n        varchar first_name\n        varchar last_name\n        varchar cpf\n        date birth_date\n        varchar telephone\n        varchar notification_preference \"Email, WhatsApp\"\n        boolean is_active\n        timestamp created_at\n        timestamp updated_at\n        timestamp deleted_at\n    }\n\n    owners {\n        bigint id PK\n        bigint user_id FK\n        varchar type \"Influencer, Promoter, Partner, Agent\"\n        varchar iugu_account_id \"ID da subconta Iugu\"\n        varchar sub_account_status \"Pending, Approved, Rejected\"\n        varchar cpf_cnpj\n        varchar rg\n        date birth_date\n        varchar bank_code\n        varchar bank_agency\n        varchar bank_account\n        varchar bank_account_type\n        text document_cpf_url\n        text document_rg_url\n        text document_address_proof_url\n        text document_selfie_url\n        boolean is_active\n        timestamp created_at\n        timestamp updated_at\n    }\n\n    videos {\n        bigint id PK\n        varchar title\n        text description\n        varchar cloudinary_public_id\n        integer duration_seconds\n        decimal price\n        date release_date\n        date expiration_sale_date\n        date expiration_view_date\n        text thumb_img_url\n        boolean is_active\n        timestamp created_at\n        timestamp updated_at\n        timestamp deleted_at\n    }\n\n    video_revenue_configs {\n        bigint id PK\n        bigint video_id FK\n        decimal platform_percentage \"Ex: 20.00\"\n        decimal owner_percentage \"Ex: 50.00\"\n        decimal promoter_percentage \"Ex: 30.00\"\n        timestamp created_at\n        timestamp updated_at\n    }\n\n    video_trailers {\n        bigint id PK\n        bigint video_id FK\n        varchar trailer_type \"Teaser, BehindScenes\"\n        varchar cloudinary_public_id\n        integer duration_seconds\n        boolean is_active\n        timestamp created_at\n    }\n\n    owner_videos {\n        bigint id PK\n        bigint owner_id FK\n        bigint video_id FK\n        timestamp created_at\n    }\n\n    video_affiliate_links {\n        bigint id PK\n        bigint owner_id FK \"Promoter\"\n        bigint video_id FK\n        varchar unique_code UK\n        text full_url\n        integer clicks\n        boolean is_active\n        timestamp created_at\n    }\n\n    orders {\n        bigint id PK\n        bigint user_id FK\n        bigint video_id FK\n        bigint promoter_id FK \"Nullable\"\n        bigint video_affiliate_link_id FK \"Nullable\"\n        integer amount \"Total em centavos\"\n        integer platform_amount \"Em centavos\"\n        integer owner_amount \"Em centavos\"\n        integer promoter_amount \"Em centavos\"\n        timestamp created_at\n    }\n\n    payments {\n        bigint id PK\n        bigint order_id FK\n        varchar iugu_invoice_id\n        text iugu_secure_url\n        varchar status \"Pending, Paid, Cancelled, Refunded\"\n        timestamp iugu_paid_at\n        integer amount\n        boolean is_active\n        timestamp created_at\n        timestamp updated_at\n    }\n\n    incomes {\n        bigint id PK\n        bigint order_id FK\n        bigint owner_id FK \"Nullable (NULL = platform)\"\n        integer amount \"Em centavos\"\n        varchar type \"Platform, Owner, Promoter\"\n        text description\n        timestamp created_at\n    }\n\n    notifications {\n        bigint id PK\n        varchar type \"MfaCode, UserActivation, etc\"\n        varchar channel \"Email, WhatsApp, All\"\n        text metadata_json\n        timestamp schedule_date\n        timestamp date_sent\n        integer send_attempts\n        text error_message\n        boolean is_active\n        timestamp created_at\n        timestamp updated_at\n    }\n\n    user_video_logs {\n        bigint id PK\n        bigint user_id FK\n        bigint video_id FK\n        timestamp watched_at\n        integer watch_duration_seconds\n        timestamp created_at\n    }\n\n    mfa_codes {\n        bigint id PK\n        bigint user_id FK\n        varchar code\n        timestamp expires_at\n        boolean is_used\n        timestamp created_at\n    }\n\n    logs {\n        bigint id PK\n        varchar request_id\n        timestamp timestamp\n        varchar level \"debug, info, warning, error\"\n        varchar event\n        text payload\n        varchar source\n        varchar ip\n    }\n\n    params {\n        bigint id PK\n        varchar key UK\n        text value\n        text description\n        timestamp created_at\n        timestamp updated_at\n    }\n\n    %% Relacionamentos\n    users ||--o| owners : \"pode ser (1:0..1)\"\n    users ||--o{ orders : \"faz (1:N)\"\n    users ||--o{ user_video_logs : \"assiste (1:N)\"\n    users ||--o{ mfa_codes : \"tem (1:N)\"\n\n    owners ||--o{ owner_videos : \"possui (1:N)\"\n    owners ||--o{ video_affiliate_links : \"cria (1:N)\"\n    owners ||--o{ incomes : \"recebe (1:N)\"\n    owners ||--o{ orders : \"promove (1:N)\"\n\n    videos ||--o{ video_trailers : \"tem (1:N)\"\n    videos ||--|| video_revenue_configs : \"tem (1:1)\"\n    videos ||--o{ owner_videos : \"pertence a (1:N)\"\n    videos ||--o{ orders : \"\u00e9 comprado (1:N)\"\n    videos ||--o{ video_affiliate_links : \"promovido por (1:N)\"\n    videos ||--o{ user_video_logs : \"registra (1:N)\"\n\n    orders ||--|| payments : \"tem (1:1)\"\n    orders ||--o{ incomes : \"gera (1:N)\"\n    orders }o--o| video_affiliate_links : \"usa (0..1:0..N)\"</code></pre>"},{"location":"banco-de-dados/modelo-entidade-relacionamento/#resumo-dos-relacionamentos","title":"Resumo dos Relacionamentos","text":""},{"location":"banco-de-dados/modelo-entidade-relacionamento/#user-central","title":"User (Central)","text":"<ul> <li>1:0..1 com <code>Owner</code> - Pode se tornar Promoter/Influencer</li> <li>1:N com <code>Order</code> - Pode fazer m\u00faltiplas compras</li> <li>1:N com <code>UserVideoLog</code> - M\u00faltiplos logs de visualiza\u00e7\u00e3o</li> <li>1:N com <code>MfaCode</code> - M\u00faltiplos c\u00f3digos MFA</li> </ul>"},{"location":"banco-de-dados/modelo-entidade-relacionamento/#owner-promoterinfluencer","title":"Owner (Promoter/Influencer)","text":"<ul> <li>1:1 com <code>User</code> - Todo owner \u00e9 um user</li> <li>1:N com <code>OwnerVideo</code> - Influencer pode estar em v\u00e1rios v\u00eddeos</li> <li>1:N com <code>VideoAffiliateLink</code> - Promoter pode ter m\u00faltiplos links</li> <li>1:N com <code>Income</code> - Recebe m\u00faltiplas comiss\u00f5es</li> <li>1:N com <code>Order</code> - Promoter vinculado a m\u00faltiplos pedidos (como afiliado)</li> </ul>"},{"location":"banco-de-dados/modelo-entidade-relacionamento/#video","title":"Video","text":"<ul> <li>1:1 com <code>VideoRevenueConfig</code> - Cada v\u00eddeo tem uma config de comiss\u00e3o</li> <li>1:N com <code>VideoTrailer</code> - Pode ter m\u00faltiplos trailers</li> <li>1:N com <code>OwnerVideo</code> - Pode ter m\u00faltiplos influencers</li> <li>1:N com <code>Order</code> - Pode ser comprado m\u00faltiplas vezes</li> <li>1:N com <code>VideoAffiliateLink</code> - Pode ter m\u00faltiplos links de promoters</li> <li>1:N com <code>UserVideoLog</code> - M\u00faltiplos logs de visualiza\u00e7\u00e3o</li> </ul>"},{"location":"banco-de-dados/modelo-entidade-relacionamento/#order-transacao","title":"Order (Transa\u00e7\u00e3o)","text":"<ul> <li>N:1 com <code>User</code> - Pedido pertence a um usu\u00e1rio</li> <li>N:1 com <code>Video</code> - Pedido \u00e9 de um v\u00eddeo espec\u00edfico</li> <li>N:0..1 com <code>Owner</code> (Promoter) - Pode ter ou n\u00e3o um promoter</li> <li>N:0..1 com <code>VideoAffiliateLink</code> - Pode ter usado um link</li> <li>1:1 com <code>Payment</code> - Cada pedido tem um pagamento</li> <li>1:N com <code>Income</code> - Gera m\u00faltiplas comiss\u00f5es (plataforma, owner, promoter)</li> </ul>"},{"location":"banco-de-dados/modelo-entidade-relacionamento/#cardinalidades-importantes","title":"Cardinalidades Importantes","text":""},{"location":"banco-de-dados/modelo-entidade-relacionamento/#obrigatorio-vs-opcional","title":"Obrigat\u00f3rio vs Opcional","text":"<p>Obrigat\u00f3rio (NOT NULL): <pre><code>Order \u2192 User (obrigat\u00f3rio ter usu\u00e1rio)\nOrder \u2192 Video (obrigat\u00f3rio ter v\u00eddeo)\nPayment \u2192 Order (obrigat\u00f3rio ter pedido)\nIncome \u2192 Order (obrigat\u00f3rio ter pedido)\n</code></pre></p> <p>Opcional (NULL): <pre><code>Order \u2192 Promoter (pode n\u00e3o ter promoter)\nOrder \u2192 VideoAffiliateLink (pode n\u00e3o usar link)\nIncome \u2192 Owner (NULL = plataforma)\nOwner \u2192 IuguAccountId (criado apenas ap\u00f3s KYC)\n</code></pre></p>"},{"location":"banco-de-dados/modelo-entidade-relacionamento/#indices-importantes","title":"\u00cdndices Importantes","text":""},{"location":"banco-de-dados/modelo-entidade-relacionamento/#chaves-primarias-automaticas","title":"Chaves Prim\u00e1rias (Autom\u00e1ticas)","text":"<p>Todas as tabelas t\u00eam <code>id BIGSERIAL PRIMARY KEY</code></p>"},{"location":"banco-de-dados/modelo-entidade-relacionamento/#chaves-unicas","title":"Chaves \u00danicas","text":"<pre><code>users.email - UK\nvideo_affiliate_links.unique_code - UK\nparams.key - UK\n</code></pre>"},{"location":"banco-de-dados/modelo-entidade-relacionamento/#indices-de-performance","title":"\u00cdndices de Performance","text":"<pre><code>-- \u00cdndices em Foreign Keys\nCREATE INDEX idx_orders_user_id ON orders(user_id);\nCREATE INDEX idx_orders_video_id ON orders(video_id);\nCREATE INDEX idx_orders_promoter_id ON orders(promoter_id);\nCREATE INDEX idx_payments_order_id ON payments(order_id);\nCREATE INDEX idx_incomes_order_id ON incomes(order_id);\nCREATE INDEX idx_incomes_owner_id ON incomes(owner_id);\n\n-- \u00cdndices compostos\nCREATE INDEX idx_orders_user_video ON orders(user_id, video_id);\nCREATE INDEX idx_notifications_type_channel \n    ON notifications(type, channel, date_sent);\n\n-- \u00cdndices parciais (soft delete)\nCREATE INDEX idx_videos_active \n    ON videos(id) \n    WHERE is_active = TRUE AND deleted_at IS NULL;\n\nCREATE INDEX idx_video_affiliate_links_active \n    ON video_affiliate_links(video_id, owner_id) \n    WHERE is_active = TRUE;\n</code></pre>"},{"location":"banco-de-dados/modelo-entidade-relacionamento/#constraints-de-integridade","title":"Constraints de Integridade","text":""},{"location":"banco-de-dados/modelo-entidade-relacionamento/#check-constraints","title":"Check Constraints","text":"<pre><code>-- Percentuais de comiss\u00e3o devem somar 100\nALTER TABLE video_revenue_configs \nADD CONSTRAINT chk_percentages_sum_100 \nCHECK (platform_percentage + owner_percentage + promoter_percentage = 100);\n\n-- Valores positivos\nALTER TABLE videos \nADD CONSTRAINT chk_price_positive \nCHECK (price &gt;= 0);\n\nALTER TABLE orders \nADD CONSTRAINT chk_amount_positive \nCHECK (amount &gt; 0);\n\n-- Status v\u00e1lidos\nALTER TABLE payments \nADD CONSTRAINT chk_status_valid \nCHECK (status IN ('Pending', 'Paid', 'Cancelled', 'Refunded'));\n\n-- Tipo de usu\u00e1rio v\u00e1lido\nALTER TABLE users \nADD CONSTRAINT chk_user_type_valid \nCHECK (type IN ('Admin', 'Default', 'Promoter', 'Influencer'));\n</code></pre>"},{"location":"banco-de-dados/modelo-entidade-relacionamento/#foreign-key-constraints","title":"Foreign Key Constraints","text":"<pre><code>-- Todas com ON DELETE RESTRICT (default)\n-- N\u00e3o permite deletar se houver depend\u00eancias\n\nALTER TABLE orders \nADD CONSTRAINT fk_orders_user \n    FOREIGN KEY (user_id) REFERENCES users(id);\n\nALTER TABLE orders \nADD CONSTRAINT fk_orders_video \n    FOREIGN KEY (video_id) REFERENCES videos(id);\n\n-- Com ON DELETE CASCADE (quando aplic\u00e1vel)\nALTER TABLE video_trailers \nADD CONSTRAINT fk_video_trailers_video \n    FOREIGN KEY (video_id) REFERENCES videos(id) \n    ON DELETE CASCADE;\n</code></pre>"},{"location":"banco-de-dados/modelo-entidade-relacionamento/#triggers","title":"Triggers","text":""},{"location":"banco-de-dados/modelo-entidade-relacionamento/#updated-at-automatico","title":"Updated At Autom\u00e1tico","text":"<pre><code>CREATE OR REPLACE FUNCTION update_updated_at_column()\nRETURNS TRIGGER AS $$\nBEGIN\n    NEW.updated_at = CURRENT_TIMESTAMP;\n    RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;\n\n-- Aplicar em tabelas relevantes\nCREATE TRIGGER set_updated_at\nBEFORE UPDATE ON users\nFOR EACH ROW\nEXECUTE FUNCTION update_updated_at_column();\n\nCREATE TRIGGER set_updated_at\nBEFORE UPDATE ON videos\nFOR EACH ROW\nEXECUTE FUNCTION update_updated_at_column();\n-- ... outras tabelas\n</code></pre>"},{"location":"banco-de-dados/modelo-entidade-relacionamento/#views-uteis","title":"Views \u00dateis","text":""},{"location":"banco-de-dados/modelo-entidade-relacionamento/#pedidos-com-detalhes-completos","title":"Pedidos com Detalhes Completos","text":"<pre><code>CREATE VIEW vw_orders_full AS\nSELECT \n    o.id AS order_id,\n    o.created_at AS order_date,\n    u.email AS buyer_email,\n    u.first_name || ' ' || u.last_name AS buyer_name,\n    v.title AS video_title,\n    v.price AS video_price,\n    o.amount / 100.0 AS total_amount,\n    p.status AS payment_status,\n    p.iugu_paid_at AS paid_at,\n    CASE \n        WHEN o.promoter_id IS NOT NULL THEN owner.user_id \n        ELSE NULL \n    END AS promoter_user_id,\n    val.unique_code AS affiliate_code\nFROM orders o\nJOIN users u ON o.user_id = u.id\nJOIN videos v ON o.video_id = v.id\nLEFT JOIN payments p ON p.order_id = o.id\nLEFT JOIN owners owner ON o.promoter_id = owner.id\nLEFT JOIN video_affiliate_links val ON o.video_affiliate_link_id = val.id;\n</code></pre>"},{"location":"banco-de-dados/modelo-entidade-relacionamento/#dashboard-de-influencer","title":"Dashboard de Influencer","text":"<pre><code>CREATE VIEW vw_influencer_dashboard AS\nSELECT \n    ow.id AS owner_id,\n    u.email,\n    u.first_name || ' ' || u.last_name AS name,\n    COUNT(DISTINCT ov.video_id) AS total_videos,\n    COUNT(DISTINCT o.id) AS total_sales,\n    SUM(i.amount) / 100.0 AS total_earnings,\n    AVG(i.amount) / 100.0 AS avg_per_sale\nFROM owners ow\nJOIN users u ON ow.user_id = u.id\nLEFT JOIN owner_videos ov ON ov.owner_id = ow.id\nLEFT JOIN orders o ON o.video_id = ov.video_id\nLEFT JOIN incomes i ON i.order_id = o.id AND i.owner_id = ow.id\nWHERE ow.type = 'Influencer'\nGROUP BY ow.id, u.email, u.first_name, u.last_name;\n</code></pre>"},{"location":"banco-de-dados/modelo-entidade-relacionamento/#dashboard-de-promoter","title":"Dashboard de Promoter","text":"<pre><code>CREATE VIEW vw_promoter_dashboard AS\nSELECT \n    ow.id AS owner_id,\n    u.email,\n    u.first_name || ' ' || u.last_name AS name,\n    COUNT(DISTINCT val.id) AS total_links,\n    SUM(val.clicks) AS total_clicks,\n    COUNT(DISTINCT o.id) AS total_conversions,\n    SUM(i.amount) / 100.0 AS total_earnings,\n    CASE \n        WHEN SUM(val.clicks) &gt; 0 \n        THEN (COUNT(DISTINCT o.id)::decimal / SUM(val.clicks)::decimal * 100)\n        ELSE 0 \n    END AS conversion_rate\nFROM owners ow\nJOIN users u ON ow.user_id = u.id\nLEFT JOIN video_affiliate_links val ON val.owner_id = ow.id\nLEFT JOIN orders o ON o.video_affiliate_link_id = val.id\nLEFT JOIN incomes i ON i.order_id = o.id AND i.owner_id = ow.id\nWHERE ow.type = 'Promoter'\nGROUP BY ow.id, u.email, u.first_name, u.last_name;\n</code></pre>"},{"location":"banco-de-dados/modelo-entidade-relacionamento/#dados-de-exemplo","title":"Dados de Exemplo","text":""},{"location":"banco-de-dados/modelo-entidade-relacionamento/#seed-data-para-desenvolvimento","title":"Seed Data para Desenvolvimento","text":"<pre><code>-- Admin\nINSERT INTO users (email, password_hash, type, first_name, last_name, is_active)\nVALUES ('admin@amasso.com', '$2a$...hash...', 'Admin', 'Admin', 'Sistema', true);\n\n-- Default User\nINSERT INTO users (email, password_hash, type, first_name, last_name, is_active)\nVALUES ('user@example.com', '$2a$...hash...', 'Default', 'Jo\u00e3o', 'Silva', true);\n\n-- Influencer\nINSERT INTO users (email, password_hash, type, first_name, last_name, is_active)\nVALUES ('influencer@example.com', '$2a$...hash...', 'Influencer', 'Maria', 'Santos', true);\n\nINSERT INTO owners (user_id, type, sub_account_status, iugu_account_id)\nVALUES (3, 'Influencer', 'Approved', 'iugu_acc_123');\n\n-- Promoter\nINSERT INTO users (email, password_hash, type, first_name, last_name, is_active)\nVALUES ('promoter@example.com', '$2a$...hash...', 'Promoter', 'Carlos', 'Oliveira', true);\n\nINSERT INTO owners (user_id, type, sub_account_status, iugu_account_id)\nVALUES (4, 'Promoter', 'Approved', 'iugu_acc_456');\n\n-- V\u00eddeo com config de comiss\u00e3o\nINSERT INTO videos (title, description, cloudinary_public_id, price, is_active)\nVALUES ('V\u00eddeo Exemplo', 'Descri\u00e7\u00e3o do v\u00eddeo', 'cloudinary_123', 100.00, true);\n\nINSERT INTO video_revenue_configs (video_id, platform_percentage, owner_percentage, promoter_percentage)\nVALUES (1, 20.00, 50.00, 30.00);\n</code></pre>"},{"location":"banco-de-dados/modelo-entidade-relacionamento/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<ul> <li>Consulte documenta\u00e7\u00e3o detalhada de cada tabela:</li> <li>Users</li> <li>Videos</li> <li>Orders</li> <li>Payments</li> <li>Owners</li> <li>Income</li> <li>Notifications</li> <li>Veja Relacionamentos com exemplos pr\u00e1ticos</li> <li>Consulte Casos de Uso para entender os fluxos</li> </ul>"},{"location":"banco-de-dados/visao-geral/","title":"Banco de Dados - Vis\u00e3o Geral","text":""},{"location":"banco-de-dados/visao-geral/#tecnologia","title":"Tecnologia","text":"<p>PostgreSQL 16 - Sistema de gerenciamento de banco de dados relacional open-source.</p>"},{"location":"banco-de-dados/visao-geral/#por-que-postgresql","title":"Por que PostgreSQL?","text":"<ul> <li>\u2705 Confi\u00e1vel: ACID compliant, transa\u00e7\u00f5es robustas</li> <li>\u2705 Perform\u00e1tico: \u00cdndices avan\u00e7ados, queries otimizadas</li> <li>\u2705 Tipos de dados ricos: JSON, Arrays, Timestamps com timezone</li> <li>\u2705 Extens\u00edvel: Suporte a extens\u00f5es</li> <li>\u2705 Open Source: Sem custos de licen\u00e7a</li> <li>\u2705 Compat\u00edvel com .NET: Npgsql driver maduro</li> </ul>"},{"location":"banco-de-dados/visao-geral/#estrutura-geral","title":"Estrutura Geral","text":"<p>A plataforma Amasso possui 17 tabelas principais organizadas em grupos l\u00f3gicos:</p> <pre><code>erDiagram\n    %% Usu\u00e1rios e Autentica\u00e7\u00e3o\n    users ||--o{ orders : \"places\"\n    users ||--o| owners : \"can be\"\n    users ||--o{ user_video_logs : \"watches\"\n\n    %% V\u00eddeos\n    videos ||--o{ video_trailers : \"has\"\n    videos ||--|| video_revenue_configs : \"has\"\n    videos ||--o{ owner_videos : \"belongs to\"\n    videos ||--o{ orders : \"is purchased\"\n    videos ||--o{ video_affiliate_links : \"promoted by\"\n\n    %% Owners (Promoters/Influencers)\n    owners ||--o{ owner_videos : \"owns\"\n    owners ||--o{ video_affiliate_links : \"creates\"\n    owners ||--o{ incomes : \"receives\"\n    owners ||--o{ orders : \"promotes\"\n\n    %% Transa\u00e7\u00f5es\n    orders ||--o{ payments : \"has\"\n    orders ||--o{ incomes : \"generates\"\n    orders }o--o| video_affiliate_links : \"uses\"\n\n    %% Notifica\u00e7\u00f5es\n    notifications\n\n    %% Logs\n    logs</code></pre>"},{"location":"banco-de-dados/visao-geral/#tabelas-por-categoria","title":"Tabelas por Categoria","text":""},{"location":"banco-de-dados/visao-geral/#usuarios-e-autenticacao-4-tabelas","title":"\ud83d\udc64 Usu\u00e1rios e Autentica\u00e7\u00e3o (4 tabelas)","text":"<ul> <li>users - Todos os usu\u00e1rios (Admin, Default, Promoter, Influencer)</li> <li>owners - Dados adicionais de Promoters/Influencers (KYC, subconta Iugu)</li> <li>mfa_codes - C\u00f3digos de autentica\u00e7\u00e3o em duas etapas</li> <li>refresh_tokens - Tokens para renova\u00e7\u00e3o de sess\u00e3o</li> </ul>"},{"location":"banco-de-dados/visao-geral/#videos-5-tabelas","title":"\ud83c\udfac V\u00eddeos (5 tabelas)","text":"<ul> <li>videos - Cat\u00e1logo de v\u00eddeos</li> <li>video_trailers - Trailers/pr\u00e9vias dos v\u00eddeos</li> <li>video_revenue_configs - Configura\u00e7\u00e3o de comiss\u00f5es por v\u00eddeo</li> <li>owner_videos - Relacionamento Influencer \u2194 V\u00eddeo</li> <li>user_video_logs - Log de visualiza\u00e7\u00e3o (acesso ao conte\u00fado)</li> </ul>"},{"location":"banco-de-dados/visao-geral/#transacoes-3-tabelas","title":"\ud83d\udcb0 Transa\u00e7\u00f5es (3 tabelas)","text":"<ul> <li>orders - Pedidos de compra</li> <li>payments - Pagamentos via Iugu</li> <li>incomes - Distribui\u00e7\u00e3o de comiss\u00f5es</li> </ul>"},{"location":"banco-de-dados/visao-geral/#afiliados-1-tabela","title":"\ud83d\udd17 Afiliados (1 tabela)","text":"<ul> <li>video_affiliate_links - Links de afiliado dos promoters</li> </ul>"},{"location":"banco-de-dados/visao-geral/#notificacoes-1-tabela","title":"\ud83d\udce7 Notifica\u00e7\u00f5es (1 tabela)","text":"<ul> <li>notifications - Fila de notifica\u00e7\u00f5es (email/WhatsApp)</li> </ul>"},{"location":"banco-de-dados/visao-geral/#sistema-2-tabelas","title":"\ud83d\udcca Sistema (2 tabelas)","text":"<ul> <li>logs - Logs de aplica\u00e7\u00e3o</li> <li>params - Par\u00e2metros de configura\u00e7\u00e3o</li> </ul>"},{"location":"banco-de-dados/visao-geral/#auditoria","title":"\ud83d\udcdc Auditoria","text":"<ul> <li>user_logs - Logs de a\u00e7\u00f5es de usu\u00e1rios (futuro)</li> </ul>"},{"location":"banco-de-dados/visao-geral/#convencoes-de-nomenclatura","title":"Conven\u00e7\u00f5es de Nomenclatura","text":""},{"location":"banco-de-dados/visao-geral/#tabelas","title":"Tabelas","text":"<ul> <li>Snake case: <code>video_affiliate_links</code></li> <li>Plural: <code>users</code>, <code>videos</code>, <code>orders</code></li> <li>Descritivo: Nome claro do que armazena</li> </ul>"},{"location":"banco-de-dados/visao-geral/#colunas","title":"Colunas","text":"<ul> <li>Snake case: <code>created_at</code>, <code>first_name</code>, <code>iugu_account_id</code></li> <li>Sufixos comuns:</li> <li><code>_id</code> para chaves prim\u00e1rias e estrangeiras</li> <li><code>_at</code> para timestamps</li> <li><code>_url</code> para URLs</li> <li><code>_cents</code> ou <code>_amount</code> para valores monet\u00e1rios</li> </ul>"},{"location":"banco-de-dados/visao-geral/#tipos-de-dados-comuns","title":"Tipos de Dados Comuns","text":"Coluna Tipo PostgreSQL Tipo .NET Descri\u00e7\u00e3o <code>id</code> <code>bigserial</code> <code>long</code> Chave prim\u00e1ria auto-incremento <code>created_at</code> <code>timestamp</code> <code>DateTime</code> Data de cria\u00e7\u00e3o <code>updated_at</code> <code>timestamp</code> <code>DateTime?</code> Data de atualiza\u00e7\u00e3o <code>deleted_at</code> <code>timestamp</code> <code>DateTime?</code> Data de exclus\u00e3o (soft delete) <code>is_active</code> <code>boolean</code> <code>bool</code> Status ativo/inativo <code>email</code> <code>varchar(255)</code> <code>string</code> Email <code>price</code> <code>decimal(10,2)</code> <code>decimal</code> Pre\u00e7o em reais <code>amount</code> <code>integer</code> <code>int</code> Valor em centavos <code>metadata_json</code> <code>text</code> <code>string</code> JSON serializado"},{"location":"banco-de-dados/visao-geral/#padroes-utilizados","title":"Padr\u00f5es Utilizados","text":""},{"location":"banco-de-dados/visao-geral/#soft-delete","title":"Soft Delete","text":"<p>Registros n\u00e3o s\u00e3o exclu\u00eddos fisicamente, apenas marcados:</p> <pre><code>-- Estrutura padr\u00e3o\nCREATE TABLE example (\n    id BIGSERIAL PRIMARY KEY,\n    is_active BOOLEAN DEFAULT TRUE,\n    deleted_at TIMESTAMP NULL,\n    -- ... outros campos\n);\n\n-- Query ignora deletados\nSELECT * FROM example \nWHERE is_active = TRUE \n  AND deleted_at IS NULL;\n</code></pre> <pre><code>// No EF Core\nmodelBuilder.Entity&lt;Example&gt;()\n    .HasQueryFilter(e =&gt; e.IsActive &amp;&amp; e.DeletedAt == null);\n</code></pre>"},{"location":"banco-de-dados/visao-geral/#timestamps-automaticos","title":"Timestamps Autom\u00e1ticos","text":"<pre><code>CREATE TABLE example (\n    id BIGSERIAL PRIMARY KEY,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP,\n    -- ... outros campos\n);\n\n-- Trigger para updated_at (opcional)\nCREATE TRIGGER set_updated_at\nBEFORE UPDATE ON example\nFOR EACH ROW\nEXECUTE FUNCTION update_updated_at_column();\n</code></pre> <pre><code>// No EF Core - SaveChanges\npublic override Task&lt;int&gt; SaveChangesAsync(CancellationToken ct = default)\n{\n    var entries = ChangeTracker.Entries()\n        .Where(e =&gt; e.Entity is Base &amp;&amp; \n                   (e.State == EntityState.Added || e.State == EntityState.Modified));\n\n    foreach (var entry in entries)\n    {\n        var entity = (Base)entry.Entity;\n\n        if (entry.State == EntityState.Added)\n        {\n            entity.CreatedAt = DateTime.UtcNow;\n        }\n\n        entity.UpdatedAt = DateTime.UtcNow;\n    }\n\n    return base.SaveChangesAsync(ct);\n}\n</code></pre>"},{"location":"banco-de-dados/visao-geral/#chaves-estrangeiras","title":"Chaves Estrangeiras","text":"<p>Sempre com constraints para integridade referencial:</p> <pre><code>CREATE TABLE orders (\n    id BIGSERIAL PRIMARY KEY,\n    user_id BIGINT NOT NULL,\n    video_id BIGINT NOT NULL,\n    promoter_id BIGINT NULL,\n\n    CONSTRAINT fk_orders_user \n        FOREIGN KEY (user_id) REFERENCES users(id),\n    CONSTRAINT fk_orders_video \n        FOREIGN KEY (video_id) REFERENCES videos(id),\n    CONSTRAINT fk_orders_promoter \n        FOREIGN KEY (promoter_id) REFERENCES owners(id)\n);\n</code></pre>"},{"location":"banco-de-dados/visao-geral/#indices","title":"\u00cdndices","text":"<pre><code>-- \u00cdndice simples\nCREATE INDEX idx_orders_user_id ON orders(user_id);\n\n-- \u00cdndice composto\nCREATE INDEX idx_orders_user_video ON orders(user_id, video_id);\n\n-- \u00cdndice \u00fanico\nCREATE UNIQUE INDEX idx_users_email ON users(email);\n\n-- \u00cdndice parcial (soft delete)\nCREATE INDEX idx_videos_active \nON videos(id) \nWHERE is_active = TRUE AND deleted_at IS NULL;\n</code></pre>"},{"location":"banco-de-dados/visao-geral/#entidades-base","title":"Entidades Base","text":"<pre><code>// Base.cs - Classe base para todas as entidades\npublic abstract class Base\n{\n    public long Id { get; set; }\n    public bool IsActive { get; set; } = true;\n    public DateTime CreatedAt { get; set; }\n    public DateTime? UpdatedAt { get; set; }\n    public DateTime? DeletedAt { get; set; }\n}\n</code></pre>"},{"location":"banco-de-dados/visao-geral/#dbcontext","title":"DbContext","text":"<pre><code>public class Pay4TruDb : DbContext\n{\n    // Usu\u00e1rios e Autentica\u00e7\u00e3o\n    public DbSet&lt;User&gt; Users { get; set; }\n    public DbSet&lt;Owner&gt; Owners { get; set; }\n    public DbSet&lt;MfaCode&gt; MfaCodes { get; set; }\n    public DbSet&lt;RefreshToken&gt; RefreshTokens { get; set; }\n\n    // V\u00eddeos\n    public DbSet&lt;Video&gt; Videos { get; set; }\n    public DbSet&lt;VideoTrailer&gt; VideoTrailers { get; set; }\n    public DbSet&lt;VideoRevenueConfig&gt; VideoRevenueConfigs { get; set; }\n    public DbSet&lt;OwnerVideo&gt; OwnerVideos { get; set; }\n    public DbSet&lt;UserVideoLog&gt; UserVideoLogs { get; set; }\n\n    // Transa\u00e7\u00f5es\n    public DbSet&lt;Order&gt; Orders { get; set; }\n    public DbSet&lt;Payment&gt; Payments { get; set; }\n    public DbSet&lt;Income&gt; Incomes { get; set; }\n\n    // Afiliados\n    public DbSet&lt;VideoAffiliateLink&gt; VideoAffiliateLinks { get; set; }\n\n    // Notifica\u00e7\u00f5es\n    public DbSet&lt;Notification&gt; Notifications { get; set; }\n\n    // Sistema\n    public DbSet&lt;Log&gt; Logs { get; set; }\n    public DbSet&lt;Param&gt; Params { get; set; }\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        // Aplicar configura\u00e7\u00f5es\n        modelBuilder.ApplyConfiguration(new UserConfiguration());\n        modelBuilder.ApplyConfiguration(new OwnerConfiguration());\n        modelBuilder.ApplyConfiguration(new VideoConfiguration());\n        // ... outras configura\u00e7\u00f5es\n\n        // Global query filters (soft delete)\n        modelBuilder.Entity&lt;Video&gt;()\n            .HasQueryFilter(v =&gt; v.IsActive &amp;&amp; v.DeletedAt == null);\n\n        // Conven\u00e7\u00f5es de nomenclatura (snake_case)\n        foreach (var entity in modelBuilder.Model.GetEntityTypes())\n        {\n            entity.SetTableName(ToSnakeCase(entity.GetTableName()));\n\n            foreach (var property in entity.GetProperties())\n            {\n                property.SetColumnName(ToSnakeCase(property.GetColumnName()));\n            }\n        }\n    }\n\n    private static string ToSnakeCase(string text)\n    {\n        if (string.IsNullOrEmpty(text)) return text;\n        return Regex.Replace(text, \"([a-z])([A-Z])\", \"$1_$2\").ToLower();\n    }\n}\n</code></pre>"},{"location":"banco-de-dados/visao-geral/#migrations","title":"Migrations","text":""},{"location":"banco-de-dados/visao-geral/#criar-nova-migration","title":"Criar Nova Migration","text":"<pre><code>cd backend-api\ndotnet ef migrations add NomeDaMigration\n</code></pre>"},{"location":"banco-de-dados/visao-geral/#aplicar-migrations","title":"Aplicar Migrations","text":"<pre><code># Desenvolvimento\ndotnet ef database update\n\n# Produ\u00e7\u00e3o (via CI/CD)\ndotnet ef database update --connection \"ConnectionString\"\n</code></pre>"},{"location":"banco-de-dados/visao-geral/#rollback","title":"Rollback","text":"<pre><code># Voltar para migration espec\u00edfica\ndotnet ef database update NomeDaMigrationAnterior\n\n# Remover \u00faltima migration (se n\u00e3o aplicada)\ndotnet ef migrations remove\n</code></pre>"},{"location":"banco-de-dados/visao-geral/#configuracao-de-conexao","title":"Configura\u00e7\u00e3o de Conex\u00e3o","text":""},{"location":"banco-de-dados/visao-geral/#appsettingsjson","title":"appsettings.json","text":"<pre><code>{\n  \"ConnectionStrings\": {\n    \"Pay4TruDb\": \"Host=localhost;Port=5432;Database=pay4tru;Username=postgres;Password=senha123\"\n  }\n}\n</code></pre>"},{"location":"banco-de-dados/visao-geral/#programcs","title":"Program.cs","text":"<pre><code>// Leitura da connection string\nvar connectionString = Environment.GetEnvironmentVariable(\"DATABASE_LOCAL\") == \"true\"\n    ? builder.Configuration.GetConnectionString(\"Pay4TruDb\")\n    : Environment.GetEnvironmentVariable(\"DATABASE_URL\");\n\n// Registro do DbContext\nbuilder.Services.AddDbContext&lt;Pay4TruDb&gt;(options =&gt;\n    options.UseNpgsql(connectionString));\n</code></pre>"},{"location":"banco-de-dados/visao-geral/#docker-compose-desenvolvimento","title":"Docker Compose (Desenvolvimento)","text":"<pre><code>version: '3.8'\nservices:\n  postgres:\n    image: postgres:16\n    environment:\n      POSTGRES_DB: pay4tru\n      POSTGRES_USER: postgres\n      POSTGRES_PASSWORD: senha123\n    ports:\n      - \"5432:5432\"\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n\nvolumes:\n  postgres_data:\n</code></pre>"},{"location":"banco-de-dados/visao-geral/#backup-e-restore","title":"Backup e Restore","text":""},{"location":"banco-de-dados/visao-geral/#backup","title":"Backup","text":"<pre><code># Backup completo\npg_dump -h localhost -U postgres pay4tru &gt; backup.sql\n\n# Backup apenas schema\npg_dump -h localhost -U postgres -s pay4tru &gt; schema.sql\n\n# Backup apenas dados\npg_dump -h localhost -U postgres -a pay4tru &gt; data.sql\n</code></pre>"},{"location":"banco-de-dados/visao-geral/#restore","title":"Restore","text":"<pre><code># Restore completo\npsql -h localhost -U postgres pay4tru &lt; backup.sql\n\n# Drop e recriar antes do restore\ndropdb -h localhost -U postgres pay4tru\ncreatedb -h localhost -U postgres pay4tru\npsql -h localhost -U postgres pay4tru &lt; backup.sql\n</code></pre>"},{"location":"banco-de-dados/visao-geral/#estatisticas","title":"Estat\u00edsticas","text":""},{"location":"banco-de-dados/visao-geral/#tamanho-do-banco","title":"Tamanho do Banco","text":"<pre><code>SELECT \n    pg_size_pretty(pg_database_size('pay4tru')) as database_size;\n</code></pre>"},{"location":"banco-de-dados/visao-geral/#tamanho-por-tabela","title":"Tamanho por Tabela","text":"<pre><code>SELECT \n    schemaname,\n    tablename,\n    pg_size_pretty(pg_total_relation_size(schemaname||'.'||tablename)) AS size\nFROM pg_tables \nWHERE schemaname = 'public'\nORDER BY pg_total_relation_size(schemaname||'.'||tablename) DESC;\n</code></pre>"},{"location":"banco-de-dados/visao-geral/#queries-lentas","title":"Queries Lentas","text":"<pre><code>SELECT \n    query,\n    mean_exec_time,\n    calls\nFROM pg_stat_statements\nORDER BY mean_exec_time DESC\nLIMIT 10;\n</code></pre>"},{"location":"banco-de-dados/visao-geral/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<ul> <li>Veja o Modelo ER Completo com diagrama detalhado</li> <li>Consulte documenta\u00e7\u00e3o de tabelas espec\u00edficas:</li> <li>Users</li> <li>Videos</li> <li>Orders</li> <li>Owners</li> <li>Income</li> <li>Entenda os Relacionamentos entre entidades</li> </ul>"},{"location":"banco-de-dados/tabelas/income/","title":"Tabela: incomes","text":""},{"location":"banco-de-dados/tabelas/income/#descricao","title":"Descri\u00e7\u00e3o","text":"<p>A tabela <code>incomes</code> registra a distribui\u00e7\u00e3o de comiss\u00f5es de cada venda. Para cada order pago, s\u00e3o criados 2-3 registros de income: um para a plataforma, um para o influencer (owner) e opcionalmente um para o promoter.</p>"},{"location":"banco-de-dados/tabelas/income/#estrutura","title":"Estrutura","text":"<pre><code>CREATE TABLE incomes (\n    id BIGSERIAL PRIMARY KEY,\n    order_id BIGINT NOT NULL REFERENCES orders(id),\n    owner_id BIGINT REFERENCES owners(id), -- NULL = plataforma\n\n    amount INTEGER NOT NULL,\n    type VARCHAR(20) NOT NULL, -- Platform, Owner, Promoter\n    description TEXT,\n\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n-- \u00cdndices\nCREATE INDEX idx_incomes_order_id ON incomes(order_id);\nCREATE INDEX idx_incomes_owner_id ON incomes(owner_id);\nCREATE INDEX idx_incomes_type ON incomes(type);\nCREATE INDEX idx_incomes_created_at ON incomes(created_at DESC);\n</code></pre>"},{"location":"banco-de-dados/tabelas/income/#campos","title":"Campos","text":"Campo Tipo Descri\u00e7\u00e3o Obrigat\u00f3rio <code>id</code> <code>bigserial</code> Chave prim\u00e1ria \u2713 <code>order_id</code> <code>bigint</code> FK para orders \u2713 <code>owner_id</code> <code>bigint</code> FK para owners (NULL = plataforma) \u2717 <code>amount</code> <code>integer</code> Valor em centavos \u2713 <code>type</code> <code>varchar(20)</code> Tipo de comiss\u00e3o (enum) \u2713 <code>description</code> <code>text</code> Descri\u00e7\u00e3o \u2717 <code>created_at</code> <code>timestamp</code> Data de cria\u00e7\u00e3o \u2713"},{"location":"banco-de-dados/tabelas/income/#enum-incometypeenum","title":"Enum: IncomeTypeEnum","text":"<pre><code>public enum IncomeTypeEnum\n{\n    Platform,  // Comiss\u00e3o da plataforma (owner_id = NULL)\n    Owner,     // Comiss\u00e3o do influencer/criador\n    Promoter   // Comiss\u00e3o do promoter/afiliado\n}\n</code></pre>"},{"location":"banco-de-dados/tabelas/income/#relacionamentos","title":"Relacionamentos","text":"<pre><code>erDiagram\n    incomes }o--|| orders : \"pertence a\"\n    incomes }o--o| owners : \"recebe (nullable)\"</code></pre> <ul> <li>N:1 com <code>orders</code> - Cada income pertence a um order</li> <li>N:0..1 com <code>owners</code> - NULL = plataforma, sen\u00e3o = owner espec\u00edfico</li> </ul>"},{"location":"banco-de-dados/tabelas/income/#entidade-c","title":"Entidade C","text":"<pre><code>public class Income\n{\n    public long Id { get; set; }\n    public long OrderId { get; set; }\n    public long? OwnerId { get; set; } // NULL = plataforma\n    public int Amount { get; set; } // em centavos\n    public IncomeTypeEnum Type { get; set; }\n    public string? Description { get; set; }\n    public DateTime CreatedAt { get; set; }\n\n    // Navigation properties\n    public Order Order { get; set; }\n    public Owner? Owner { get; set; }\n}\n</code></pre>"},{"location":"banco-de-dados/tabelas/income/#criacao-de-incomes","title":"Cria\u00e7\u00e3o de Incomes","text":"<p>Ap\u00f3s webhook confirmar pagamento:</p> <pre><code>public async Task CreateIncomesForOrderAsync(long orderId)\n{\n    var order = await _context.Orders\n        .Include(o =&gt; o.Video)\n        .ThenInclude(v =&gt; v.OwnerVideos)\n        .ThenInclude(ov =&gt; ov.Owner)\n        .FirstAsync(o =&gt; o.Id == orderId);\n\n    var incomes = new List&lt;Income&gt;();\n\n    // 1. Plataforma (owner_id = NULL)\n    incomes.Add(new Income\n    {\n        OrderId = order.Id,\n        OwnerId = null,\n        Amount = order.PlatformAmount,\n        Type = IncomeTypeEnum.Platform,\n        Description = \"Comiss\u00e3o da plataforma\",\n        CreatedAt = DateTime.UtcNow\n    });\n\n    // 2. Owner/Influencer\n    var owner = order.Video.OwnerVideos.First().Owner;\n    incomes.Add(new Income\n    {\n        OrderId = order.Id,\n        OwnerId = owner.Id,\n        Amount = order.OwnerAmount,\n        Type = IncomeTypeEnum.Owner,\n        Description = $\"Venda do v\u00eddeo: {order.Video.Title}\",\n        CreatedAt = DateTime.UtcNow\n    });\n\n    // 3. Promoter (se houver)\n    if (order.PromoterId.HasValue &amp;&amp; order.PromoterAmount &gt; 0)\n    {\n        incomes.Add(new Income\n        {\n            OrderId = order.Id,\n            OwnerId = order.PromoterId.Value,\n            Amount = order.PromoterAmount,\n            Type = IncomeTypeEnum.Promoter,\n            Description = $\"Comiss\u00e3o por divulga\u00e7\u00e3o: {order.Video.Title}\",\n            CreatedAt = DateTime.UtcNow\n        });\n    }\n\n    await _context.Incomes.AddRangeAsync(incomes);\n    await _context.SaveChangesAsync();\n}\n</code></pre>"},{"location":"banco-de-dados/tabelas/income/#exemplo-pratico","title":"Exemplo Pr\u00e1tico","text":""},{"location":"banco-de-dados/tabelas/income/#venda-de-r-10000","title":"Venda de R$ 100,00","text":"<p>Configura\u00e7\u00e3o do v\u00eddeo: - Plataforma: 20% - Influencer: 50% - Promoter: 30%</p> <p>Registros criados em <code>incomes</code>:</p> id order_id owner_id amount type description 1 123 NULL 2000 Platform Comiss\u00e3o da plataforma 2 123 45 5000 Owner Venda do v\u00eddeo: V\u00eddeo X 3 123 67 3000 Promoter Comiss\u00e3o por divulga\u00e7\u00e3o: V\u00eddeo X <p>Total: 2000 + 5000 + 3000 = 10000 centavos = R$ 100,00 \u2713</p>"},{"location":"banco-de-dados/tabelas/income/#queries-comuns","title":"Queries Comuns","text":""},{"location":"banco-de-dados/tabelas/income/#total-de-comissoes-de-um-owner","title":"Total de comiss\u00f5es de um owner","text":"<pre><code>SELECT \n    o.id as owner_id,\n    u.first_name || ' ' || u.last_name as name,\n    COUNT(i.id) as total_vendas,\n    SUM(i.amount) / 100.0 as total_recebido\nFROM owners o\nINNER JOIN users u ON u.id = o.user_id\nINNER JOIN incomes i ON i.owner_id = o.id\nGROUP BY o.id, u.first_name, u.last_name;\n</code></pre> <pre><code>var ownerIncomes = await _context.Incomes\n    .Where(i =&gt; i.OwnerId == ownerId)\n    .GroupBy(i =&gt; i.Type)\n    .Select(g =&gt; new\n    {\n        Type = g.Key,\n        Total = g.Sum(i =&gt; i.Amount) / 100m,\n        Count = g.Count()\n    })\n    .ToListAsync();\n</code></pre>"},{"location":"banco-de-dados/tabelas/income/#comissoes-da-plataforma-periodo","title":"Comiss\u00f5es da plataforma (per\u00edodo)","text":"<pre><code>SELECT \n    DATE(i.created_at) as date,\n    COUNT(i.id) as total_vendas,\n    SUM(i.amount) / 100.0 as total_comissao\nFROM incomes i\nWHERE i.owner_id IS NULL\n  AND i.created_at BETWEEN '2025-01-01' AND '2025-01-31'\nGROUP BY DATE(i.created_at)\nORDER BY date;\n</code></pre> <pre><code>var platformIncomes = await _context.Incomes\n    .Where(i =&gt; i.OwnerId == null &amp;&amp;\n                i.CreatedAt &gt;= startDate &amp;&amp;\n                i.CreatedAt &lt;= endDate)\n    .GroupBy(i =&gt; i.CreatedAt.Date)\n    .Select(g =&gt; new\n    {\n        Date = g.Key,\n        Total = g.Sum(i =&gt; i.Amount) / 100m,\n        Count = g.Count()\n    })\n    .ToListAsync();\n</code></pre>"},{"location":"banco-de-dados/tabelas/income/#top-10-promoters-por-comissao","title":"Top 10 promoters por comiss\u00e3o","text":"<pre><code>SELECT \n    o.id,\n    u.first_name || ' ' || u.last_name as name,\n    COUNT(i.id) as total_vendas,\n    SUM(i.amount) / 100.0 as total_comissao\nFROM incomes i\nINNER JOIN owners o ON o.id = i.owner_id\nINNER JOIN users u ON u.id = o.user_id\nWHERE i.type = 'Promoter'\nGROUP BY o.id, u.first_name, u.last_name\nORDER BY total_comissao DESC\nLIMIT 10;\n</code></pre>"},{"location":"banco-de-dados/tabelas/income/#incomes-de-um-order-especifico","title":"Incomes de um order espec\u00edfico","text":"<pre><code>SELECT \n    i.*,\n    CASE \n        WHEN i.owner_id IS NULL THEN 'Amasso (Plataforma)'\n        ELSE u.first_name || ' ' || u.last_name\n    END as beneficiario\nFROM incomes i\nLEFT JOIN owners o ON o.id = i.owner_id\nLEFT JOIN users u ON u.id = o.user_id\nWHERE i.order_id = 123;\n</code></pre>"},{"location":"banco-de-dados/tabelas/income/#dashboard-de-influencer","title":"Dashboard de Influencer","text":"<pre><code>public async Task&lt;InfluencerDashboardDto&gt; GetDashboardAsync(long influencerId)\n{\n    var incomes = await _context.Incomes\n        .Include(i =&gt; i.Order)\n        .ThenInclude(o =&gt; o.Video)\n        .Where(i =&gt; i.OwnerId == influencerId &amp;&amp;\n                    i.Type == IncomeTypeEnum.Owner)\n        .ToListAsync();\n\n    return new InfluencerDashboardDto\n    {\n        TotalEarnings = incomes.Sum(i =&gt; i.Amount) / 100m,\n        TotalSales = incomes.Count,\n        AveragePerSale = incomes.Average(i =&gt; i.Amount) / 100m,\n        LastSale = incomes.Max(i =&gt; i.CreatedAt),\n        TopVideos = incomes\n            .GroupBy(i =&gt; i.Order.Video)\n            .OrderByDescending(g =&gt; g.Sum(i =&gt; i.Amount))\n            .Take(5)\n            .Select(g =&gt; new VideoEarningsDto\n            {\n                VideoTitle = g.Key.Title,\n                Sales = g.Count(),\n                TotalEarnings = g.Sum(i =&gt; i.Amount) / 100m\n            })\n            .ToList()\n    };\n}\n</code></pre>"},{"location":"banco-de-dados/tabelas/income/#dashboard-de-promoter","title":"Dashboard de Promoter","text":"<pre><code>public async Task&lt;PromoterDashboardDto&gt; GetDashboardAsync(long promoterId)\n{\n    var incomes = await _context.Incomes\n        .Include(i =&gt; i.Order)\n        .ThenInclude(o =&gt; o.Video)\n        .Include(i =&gt; i.Order)\n        .ThenInclude(o =&gt; o.VideoAffiliateLink)\n        .Where(i =&gt; i.OwnerId == promoterId &amp;&amp;\n                    i.Type == IncomeTypeEnum.Promoter)\n        .ToListAsync();\n\n    var links = await _context.VideoAffiliateLinks\n        .Where(l =&gt; l.OwnerId == promoterId)\n        .ToListAsync();\n\n    var totalClicks = links.Sum(l =&gt; l.Clicks);\n    var totalConversions = incomes.Count;\n\n    return new PromoterDashboardDto\n    {\n        TotalEarnings = incomes.Sum(i =&gt; i.Amount) / 100m,\n        TotalConversions = totalConversions,\n        TotalClicks = totalClicks,\n        ConversionRate = totalClicks &gt; 0 \n            ? (decimal)totalConversions / totalClicks * 100 \n            : 0,\n        AverageCommission = totalConversions &gt; 0\n            ? incomes.Average(i =&gt; i.Amount) / 100m\n            : 0\n    };\n}\n</code></pre>"},{"location":"banco-de-dados/tabelas/income/#regras-de-negocio","title":"Regras de Neg\u00f3cio","text":"<ol> <li>3 benefici\u00e1rios m\u00e1ximo: Plataforma + Owner + Promoter (opcional)</li> <li>owner_id NULL: Representa a plataforma</li> <li>Imut\u00e1vel: Incomes n\u00e3o s\u00e3o alterados ap\u00f3s cria\u00e7\u00e3o</li> <li>Rastreabilidade: Sempre vinculado a um order</li> <li>Soma deve bater: Soma dos incomes de um order = order.amount</li> <li>Criado ap\u00f3s pagamento: Apenas quando payment.status = Paid</li> </ol>"},{"location":"banco-de-dados/tabelas/income/#validacoes","title":"Valida\u00e7\u00f5es","text":"<pre><code>// Verificar se incomes j\u00e1 foram criados para um order\nvar alreadyCreated = await _context.Incomes\n    .AnyAsync(i =&gt; i.OrderId == orderId);\n\nif (alreadyCreated)\n{\n    throw new InvalidOperationException(\"Incomes j\u00e1 criados para este order\");\n}\n\n// Validar soma dos incomes\nvar totalIncomes = incomes.Sum(i =&gt; i.Amount);\nif (totalIncomes != order.Amount)\n{\n    throw new InvalidOperationException(\n        $\"Soma dos incomes ({totalIncomes}) != order.Amount ({order.Amount})\");\n}\n</code></pre>"},{"location":"banco-de-dados/tabelas/income/#relatorios","title":"Relat\u00f3rios","text":""},{"location":"banco-de-dados/tabelas/income/#receita-total-da-plataforma","title":"Receita total da plataforma","text":"<pre><code>SELECT \n    SUM(amount) / 100.0 as total_receita,\n    COUNT(*) as total_transacoes\nFROM incomes\nWHERE owner_id IS NULL;\n</code></pre>"},{"location":"banco-de-dados/tabelas/income/#distribuicao-de-comissoes-por-tipo","title":"Distribui\u00e7\u00e3o de comiss\u00f5es por tipo","text":"<pre><code>SELECT \n    type,\n    COUNT(*) as quantidade,\n    SUM(amount) / 100.0 as total,\n    AVG(amount) / 100.0 as media\nFROM incomes\nGROUP BY type;\n</code></pre>"},{"location":"banco-de-dados/tabelas/income/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<ul> <li>Veja Orders para entender origem das comiss\u00f5es</li> <li>Consulte Owners para benefici\u00e1rios</li> <li>Entenda Split de Pagamento completo</li> </ul>"},{"location":"banco-de-dados/tabelas/notifications/","title":"Tabela: notifications","text":""},{"location":"banco-de-dados/tabelas/notifications/#descricao","title":"Descri\u00e7\u00e3o","text":"<p>A tabela <code>notifications</code> armazena todas as notifica\u00e7\u00f5es que precisam ser enviadas via email ou WhatsApp. Ela \u00e9 processada pela Email API utilizando Hangfire para agendamento e retry autom\u00e1tico.</p>"},{"location":"banco-de-dados/tabelas/notifications/#estrutura","title":"Estrutura","text":"<pre><code>CREATE TABLE notifications (\n    id BIGSERIAL PRIMARY KEY,\n\n    -- Tipo e canal\n    type VARCHAR(50) NOT NULL, -- MfaCode, UserActivation, ForgotPassword, etc.\n    channel VARCHAR(20) NOT NULL, -- Email, WhatsApp, All\n\n    -- Dados\n    email VARCHAR(255),\n    phone VARCHAR(20),\n    metadata_json TEXT, -- JSON com dados para o template\n\n    -- Controle de envio\n    is_sent BOOLEAN DEFAULT FALSE,\n    send_attempts INTEGER DEFAULT 0,\n    scheduled_to_send TIMESTAMP,\n    sent_at TIMESTAMP,\n    error_message TEXT,\n\n    -- Auditoria\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP\n);\n\n-- \u00cdndices\nCREATE INDEX idx_notifications_is_sent ON notifications(is_sent, scheduled_to_send);\nCREATE INDEX idx_notifications_type ON notifications(type);\nCREATE INDEX idx_notifications_channel ON notifications(channel);\nCREATE INDEX idx_notifications_scheduled ON notifications(scheduled_to_send);\nCREATE INDEX idx_notifications_created_at ON notifications(created_at DESC);\n</code></pre>"},{"location":"banco-de-dados/tabelas/notifications/#campos","title":"Campos","text":"Campo Tipo Descri\u00e7\u00e3o Obrigat\u00f3rio <code>id</code> <code>bigserial</code> Chave prim\u00e1ria \u2713 <code>type</code> <code>varchar(50)</code> Tipo de notifica\u00e7\u00e3o (enum) \u2713 <code>channel</code> <code>varchar(20)</code> Canal de envio (enum) \u2713 <code>email</code> <code>varchar(255)</code> Email do destinat\u00e1rio \u2717 <code>phone</code> <code>varchar(20)</code> Telefone do destinat\u00e1rio \u2717 <code>metadata_json</code> <code>text</code> Dados JSON para template \u2717 <code>is_sent</code> <code>boolean</code> Enviado com sucesso? \u2713 <code>send_attempts</code> <code>integer</code> Tentativas de envio \u2713 <code>scheduled_to_send</code> <code>timestamp</code> Quando deve ser enviado \u2717 <code>sent_at</code> <code>timestamp</code> Quando foi enviado \u2717 <code>error_message</code> <code>text</code> Mensagem de erro (se falhou) \u2717 <code>created_at</code> <code>timestamp</code> Data de cria\u00e7\u00e3o \u2713 <code>updated_at</code> <code>timestamp</code> Data de atualiza\u00e7\u00e3o \u2717"},{"location":"banco-de-dados/tabelas/notifications/#enums","title":"Enums","text":""},{"location":"banco-de-dados/tabelas/notifications/#notificationtypeenum","title":"NotificationTypeEnum","text":"<pre><code>public enum NotificationTypeEnum\n{\n    MfaCode,              // C\u00f3digo MFA para login\n    UserActivation,       // C\u00f3digo de ativa\u00e7\u00e3o de conta\n    ForgotPassword,       // C\u00f3digo para recupera\u00e7\u00e3o de senha\n    VideoReleaseSchedule, // Agendamento de lan\u00e7amento de v\u00eddeo\n    PaymentConfirmed,     // Confirma\u00e7\u00e3o de pagamento\n    KycSubmitted,         // KYC enviado (notifica admin)\n    KycApproved,          // KYC aprovado (notifica owner)\n    KycRejected,          // KYC rejeitado (notifica owner)\n    NewSale               // Nova venda (notifica influencer/promoter)\n}\n</code></pre>"},{"location":"banco-de-dados/tabelas/notifications/#notificationchannelenum","title":"NotificationChannelEnum","text":"<pre><code>public enum NotificationChannelEnum\n{\n    Email,    // Apenas email\n    WhatsApp, // Apenas WhatsApp\n    All       // Email + WhatsApp\n}\n</code></pre>"},{"location":"banco-de-dados/tabelas/notifications/#relacionamentos","title":"Relacionamentos","text":"<p>A tabela <code>notifications</code> n\u00e3o tem FKs diretas, mas cont\u00e9m <code>metadata_json</code> com IDs relacionados.</p> <pre><code>erDiagram\n    notifications }o..o{ users : \"destinat\u00e1rio (via metadata)\"\n    notifications }o..o{ orders : \"ordem (via metadata)\"\n    notifications }o..o{ videos : \"v\u00eddeo (via metadata)\"</code></pre>"},{"location":"banco-de-dados/tabelas/notifications/#entidade-c","title":"Entidade C","text":"<pre><code>public class Notification\n{\n    public long Id { get; set; }\n    public NotificationTypeEnum Type { get; set; }\n    public NotificationChannelEnum Channel { get; set; }\n    public string? Email { get; set; }\n    public string? Phone { get; set; }\n    public string? MetadataJson { get; set; }\n    public bool IsSent { get; set; }\n    public int SendAttempts { get; set; }\n    public DateTime? ScheduledToSend { get; set; }\n    public DateTime? SentAt { get; set; }\n    public string? ErrorMessage { get; set; }\n    public DateTime CreatedAt { get; set; }\n    public DateTime? UpdatedAt { get; set; }\n}\n</code></pre>"},{"location":"banco-de-dados/tabelas/notifications/#criacao-de-notificacao","title":"Cria\u00e7\u00e3o de Notifica\u00e7\u00e3o","text":""},{"location":"banco-de-dados/tabelas/notifications/#mfa-code","title":"MFA Code","text":"<pre><code>public async Task SendMfaCodeAsync(string email, string code)\n{\n    var notification = new Notification\n    {\n        Type = NotificationTypeEnum.MfaCode,\n        Channel = NotificationChannelEnum.Email,\n        Email = email,\n        MetadataJson = JsonSerializer.Serialize(new\n        {\n            Code = code,\n            ExpiresIn = 5 // minutos\n        }),\n        CreatedAt = DateTime.UtcNow\n    };\n\n    await _context.Notifications.AddAsync(notification);\n    await _context.SaveChangesAsync();\n}\n</code></pre>"},{"location":"banco-de-dados/tabelas/notifications/#video-release-schedule","title":"Video Release Schedule","text":"<pre><code>public async Task ScheduleVideoReleaseNotificationAsync(\n    long videoId, \n    string videoTitle, \n    DateTime releaseDate)\n{\n    // Buscar usu\u00e1rios interessados\n    var users = await _context.Users\n        .Where(u =&gt; u.IsActive &amp;&amp; u.NotificationPreference != null)\n        .ToListAsync();\n\n    var notifications = users.Select(u =&gt; new Notification\n    {\n        Type = NotificationTypeEnum.VideoReleaseSchedule,\n        Channel = u.NotificationPreference ?? NotificationChannelEnum.Email,\n        Email = u.Email,\n        Phone = u.Telephone,\n        ScheduledToSend = releaseDate.AddHours(-24), // 24h antes\n        MetadataJson = JsonSerializer.Serialize(new\n        {\n            VideoId = videoId,\n            VideoTitle = videoTitle,\n            ReleaseDate = releaseDate\n        }),\n        CreatedAt = DateTime.UtcNow\n    }).ToList();\n\n    await _context.Notifications.AddRangeAsync(notifications);\n    await _context.SaveChangesAsync();\n}\n</code></pre>"},{"location":"banco-de-dados/tabelas/notifications/#payment-confirmed","title":"Payment Confirmed","text":"<pre><code>public async Task NotifyPaymentConfirmedAsync(long orderId)\n{\n    var order = await _context.Orders\n        .Include(o =&gt; o.User)\n        .Include(o =&gt; o.Video)\n        .FirstAsync(o =&gt; o.Id == orderId);\n\n    var notification = new Notification\n    {\n        Type = NotificationTypeEnum.PaymentConfirmed,\n        Channel = order.User.NotificationPreference ?? NotificationChannelEnum.Email,\n        Email = order.User.Email,\n        Phone = order.User.Telephone,\n        MetadataJson = JsonSerializer.Serialize(new\n        {\n            OrderId = order.Id,\n            VideoTitle = order.Video.Title,\n            Amount = order.Amount / 100m\n        }),\n        CreatedAt = DateTime.UtcNow\n    };\n\n    await _context.Notifications.AddAsync(notification);\n    await _context.SaveChangesAsync();\n}\n</code></pre>"},{"location":"banco-de-dados/tabelas/notifications/#processamento-pela-email-api","title":"Processamento pela Email API","text":"<pre><code>// Hangfire Job - executado a cada 1 minuto\n[AutomaticRetry(Attempts = 3)]\npublic async Task ProcessPendingNotificationsAsync()\n{\n    var pendingNotifications = await _context.Notifications\n        .Where(n =&gt; !n.IsSent &amp;&amp;\n                    n.SendAttempts &lt; 3 &amp;&amp;\n                    (n.ScheduledToSend == null || n.ScheduledToSend &lt;= DateTime.UtcNow))\n        .OrderBy(n =&gt; n.CreatedAt)\n        .Take(50)\n        .ToListAsync();\n\n    foreach (var notification in pendingNotifications)\n    {\n        try\n        {\n            notification.SendAttempts++;\n\n            // Email\n            if (notification.Channel == NotificationChannelEnum.Email ||\n                notification.Channel == NotificationChannelEnum.All)\n            {\n                await _emailSender.SendAsync(notification);\n            }\n\n            // WhatsApp\n            if (notification.Channel == NotificationChannelEnum.WhatsApp ||\n                notification.Channel == NotificationChannelEnum.All)\n            {\n                await _whatsAppSender.SendAsync(notification);\n            }\n\n            notification.IsSent = true;\n            notification.SentAt = DateTime.UtcNow;\n            notification.UpdatedAt = DateTime.UtcNow;\n\n            _logger.LogInformation(\"Notifica\u00e7\u00e3o {Id} enviada com sucesso\", notification.Id);\n        }\n        catch (Exception ex)\n        {\n            notification.ErrorMessage = ex.Message;\n            notification.UpdatedAt = DateTime.UtcNow;\n\n            _logger.LogError(ex, \"Erro ao enviar notifica\u00e7\u00e3o {Id}\", notification.Id);\n        }\n    }\n\n    await _context.SaveChangesAsync();\n}\n</code></pre>"},{"location":"banco-de-dados/tabelas/notifications/#templates","title":"Templates","text":"<p>Cada tipo de notifica\u00e7\u00e3o tem templates espec\u00edficos:</p>"},{"location":"banco-de-dados/tabelas/notifications/#email","title":"Email","text":"<ul> <li><code>Templates/MfaCode.html</code></li> <li><code>Templates/UserActivation.html</code></li> <li><code>Templates/PaymentConfirmed.html</code></li> <li>etc.</li> </ul>"},{"location":"banco-de-dados/tabelas/notifications/#whatsapp","title":"WhatsApp","text":"<ul> <li><code>Templates/MfaCode.txt</code></li> <li><code>Templates/UserActivation.txt</code></li> <li><code>Templates/PaymentConfirmed.txt</code></li> <li>etc.</li> </ul>"},{"location":"banco-de-dados/tabelas/notifications/#renderizacao","title":"Renderiza\u00e7\u00e3o","text":"<pre><code>public async Task&lt;string&gt; RenderTemplateAsync(Notification notification)\n{\n    var templatePath = notification.Channel == NotificationChannelEnum.Email\n        ? $\"Templates/{notification.Type}.html\"\n        : $\"Templates/{notification.Type}.txt\";\n\n    var template = await File.ReadAllTextAsync(templatePath);\n    var metadata = JsonSerializer.Deserialize&lt;Dictionary&lt;string, object&gt;&gt;(\n        notification.MetadataJson);\n\n    // Substituir vari\u00e1veis\n    foreach (var key in metadata.Keys)\n    {\n        template = template.Replace($\"{{{{{key}}}}}\", metadata[key].ToString());\n    }\n\n    return template;\n}\n</code></pre>"},{"location":"banco-de-dados/tabelas/notifications/#queries-comuns","title":"Queries Comuns","text":""},{"location":"banco-de-dados/tabelas/notifications/#notificacoes-pendentes","title":"Notifica\u00e7\u00f5es pendentes","text":"<pre><code>SELECT * FROM notifications\nWHERE is_sent = FALSE\n  AND send_attempts &lt; 3\n  AND (scheduled_to_send IS NULL OR scheduled_to_send &lt;= NOW())\nORDER BY created_at\nLIMIT 50;\n</code></pre> <pre><code>var pending = await _context.Notifications\n    .Where(n =&gt; !n.IsSent &amp;&amp;\n                n.SendAttempts &lt; 3 &amp;&amp;\n                (n.ScheduledToSend == null || n.ScheduledToSend &lt;= DateTime.UtcNow))\n    .OrderBy(n =&gt; n.CreatedAt)\n    .Take(50)\n    .ToListAsync();\n</code></pre>"},{"location":"banco-de-dados/tabelas/notifications/#notificacoes-com-erro","title":"Notifica\u00e7\u00f5es com erro","text":"<pre><code>SELECT * FROM notifications\nWHERE is_sent = FALSE\n  AND send_attempts &gt;= 3\n  AND error_message IS NOT NULL;\n</code></pre> <pre><code>var failed = await _context.Notifications\n    .Where(n =&gt; !n.IsSent &amp;&amp;\n                n.SendAttempts &gt;= 3 &amp;&amp;\n                n.ErrorMessage != null)\n    .ToListAsync();\n</code></pre>"},{"location":"banco-de-dados/tabelas/notifications/#estatisticas-por-tipo","title":"Estat\u00edsticas por tipo","text":"<pre><code>SELECT \n    type,\n    COUNT(*) as total,\n    SUM(CASE WHEN is_sent THEN 1 ELSE 0 END) as enviadas,\n    AVG(send_attempts) as media_tentativas\nFROM notifications\nGROUP BY type;\n</code></pre> <pre><code>var stats = await _context.Notifications\n    .GroupBy(n =&gt; n.Type)\n    .Select(g =&gt; new\n    {\n        Type = g.Key,\n        Total = g.Count(),\n        Sent = g.Count(n =&gt; n.IsSent),\n        AvgAttempts = g.Average(n =&gt; n.SendAttempts)\n    })\n    .ToListAsync();\n</code></pre>"},{"location":"banco-de-dados/tabelas/notifications/#notificacoes-agendadas-futuras","title":"Notifica\u00e7\u00f5es agendadas futuras","text":"<pre><code>SELECT * FROM notifications\nWHERE is_sent = FALSE\n  AND scheduled_to_send &gt; NOW()\nORDER BY scheduled_to_send;\n</code></pre>"},{"location":"banco-de-dados/tabelas/notifications/#regras-de-negocio","title":"Regras de Neg\u00f3cio","text":"<ol> <li>Email ou Phone: Deve ter pelo menos um preenchido</li> <li>ScheduledToSend: Null = enviar imediatamente</li> <li>Retry: M\u00e1ximo 3 tentativas antes de desistir</li> <li>MetadataJson: Dados necess\u00e1rios para renderizar template</li> <li>IsSent: S\u00f3 marcado como true ap\u00f3s envio bem-sucedido</li> <li>Cleanup: Notifica\u00e7\u00f5es antigas (&gt;90 dias) s\u00e3o deletadas por job</li> </ol>"},{"location":"banco-de-dados/tabelas/notifications/#monitoramento","title":"Monitoramento","text":""},{"location":"banco-de-dados/tabelas/notifications/#dashboard-hangfire","title":"Dashboard Hangfire","text":"<pre><code>/dashboard\n</code></pre> <ul> <li>Total de notifica\u00e7\u00f5es processadas</li> <li>Taxa de sucesso</li> <li>Fila de pendentes</li> <li>Erros recentes</li> </ul>"},{"location":"banco-de-dados/tabelas/notifications/#alertas","title":"Alertas","text":"<pre><code>// Alertar se h\u00e1 muitas notifica\u00e7\u00f5es falhando\nvar recentFailures = await _context.Notifications\n    .Where(n =&gt; !n.IsSent &amp;&amp;\n                n.SendAttempts &gt;= 3 &amp;&amp;\n                n.CreatedAt &gt;= DateTime.UtcNow.AddHours(-1))\n    .CountAsync();\n\nif (recentFailures &gt; 10)\n{\n    _logger.LogCritical(\"Muitas notifica\u00e7\u00f5es falhando: {Count}\", recentFailures);\n    // Enviar alerta para admin\n}\n</code></pre>"},{"location":"banco-de-dados/tabelas/notifications/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<ul> <li>Veja Email API para arquitetura completa</li> <li>Consulte Templates para criar novos</li> <li>Entenda Hangfire Jobs para agendamento</li> </ul>"},{"location":"banco-de-dados/tabelas/orders/","title":"Tabela: orders","text":""},{"location":"banco-de-dados/tabelas/orders/#descricao","title":"Descri\u00e7\u00e3o","text":"<p>A tabela <code>orders</code> registra todas as compras de v\u00eddeos realizadas na plataforma. Cada pedido armazena os valores j\u00e1 calculados para o split de pagamento.</p>"},{"location":"banco-de-dados/tabelas/orders/#estrutura","title":"Estrutura","text":"<pre><code>CREATE TABLE orders (\n    id BIGSERIAL PRIMARY KEY,\n    user_id BIGINT NOT NULL REFERENCES users(id),\n    video_id BIGINT NOT NULL REFERENCES videos(id),\n    promoter_id BIGINT REFERENCES owners(id),\n    video_affiliate_link_id BIGINT REFERENCES video_affiliate_links(id),\n\n    -- Valores (em centavos)\n    amount INTEGER NOT NULL,\n    platform_amount INTEGER NOT NULL,\n    owner_amount INTEGER NOT NULL,\n    promoter_amount INTEGER DEFAULT 0,\n\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n-- \u00cdndices\nCREATE INDEX idx_orders_user_id ON orders(user_id);\nCREATE INDEX idx_orders_video_id ON orders(video_id);\nCREATE INDEX idx_orders_promoter_id ON orders(promoter_id);\nCREATE INDEX idx_orders_user_video ON orders(user_id, video_id);\nCREATE INDEX idx_orders_created_at ON orders(created_at DESC);\n</code></pre>"},{"location":"banco-de-dados/tabelas/orders/#campos","title":"Campos","text":"Campo Tipo Descri\u00e7\u00e3o Obrigat\u00f3rio <code>id</code> <code>bigserial</code> Chave prim\u00e1ria \u2713 <code>user_id</code> <code>bigint</code> FK para users (comprador) \u2713 <code>video_id</code> <code>bigint</code> FK para videos \u2713 <code>promoter_id</code> <code>bigint</code> FK para owners (promoter) \u2717 <code>video_affiliate_link_id</code> <code>bigint</code> FK para video_affiliate_links \u2717 <code>amount</code> <code>integer</code> Valor total em centavos \u2713 <code>platform_amount</code> <code>integer</code> Comiss\u00e3o plataforma (centavos) \u2713 <code>owner_amount</code> <code>integer</code> Comiss\u00e3o influencer (centavos) \u2713 <code>promoter_amount</code> <code>integer</code> Comiss\u00e3o promoter (centavos) \u2713 <code>created_at</code> <code>timestamp</code> Data de cria\u00e7\u00e3o \u2713"},{"location":"banco-de-dados/tabelas/orders/#relacionamentos","title":"Relacionamentos","text":"<pre><code>erDiagram\n    orders }o--|| users : \"pertence a\"\n    orders }o--|| videos : \"compra\"\n    orders }o--o| owners : \"promoter opcional\"\n    orders }o--o| video_affiliate_links : \"link opcional\"\n    orders ||--|| payments : \"tem\"\n    orders ||--o{ incomes : \"gera\"</code></pre> <ul> <li>N:1 com <code>users</code> - Comprador do v\u00eddeo</li> <li>N:1 com <code>videos</code> - V\u00eddeo comprado</li> <li>N:0..1 com <code>owners</code> - Promoter (se compra via link)</li> <li>N:0..1 com <code>video_affiliate_links</code> - Link usado</li> <li>1:1 com <code>payments</code> - Pagamento associado</li> <li>1:N com <code>incomes</code> - Comiss\u00f5es distribu\u00eddas (2-3 registros)</li> </ul>"},{"location":"banco-de-dados/tabelas/orders/#entidade-c","title":"Entidade C","text":"<pre><code>public class Order\n{\n    public long Id { get; set; }\n    public long UserId { get; set; }\n    public long VideoId { get; set; }\n    public long? PromoterId { get; set; }\n    public long? VideoAffiliateLinkId { get; set; }\n\n    // Valores em centavos\n    public int Amount { get; set; }\n    public int PlatformAmount { get; set; }\n    public int OwnerAmount { get; set; }\n    public int PromoterAmount { get; set; }\n\n    public DateTime CreatedAt { get; set; }\n\n    // Navigation properties\n    public User User { get; set; }\n    public Video Video { get; set; }\n    public Owner? Promoter { get; set; }\n    public VideoAffiliateLink? VideoAffiliateLink { get; set; }\n    public Payment Payment { get; set; }\n    public ICollection&lt;Income&gt; Incomes { get; set; }\n}\n</code></pre>"},{"location":"banco-de-dados/tabelas/orders/#calculo-de-valores","title":"C\u00e1lculo de Valores","text":""},{"location":"banco-de-dados/tabelas/orders/#com-promoter","title":"Com Promoter","text":"<pre><code>var video = await _context.Videos\n    .Include(v =&gt; v.VideoRevenueConfig)\n    .FirstAsync(v =&gt; v.Id == videoId);\n\nvar config = video.VideoRevenueConfig;\nvar totalCents = (int)(video.Price * 100);\n\n// Calcular split\nvar platformCents = (int)(totalCents * config.PlatformPercentage / 100);\nvar ownerCents = (int)(totalCents * config.OwnerPercentage / 100);\nvar promoterCents = (int)(totalCents * config.PromoterPercentage / 100);\n\n// Ajustar arredondamento\nvar totalCalculated = platformCents + ownerCents + promoterCents;\nif (totalCalculated != totalCents)\n{\n    ownerCents += (totalCents - totalCalculated);\n}\n\nvar order = new Order\n{\n    UserId = userId,\n    VideoId = videoId,\n    PromoterId = promoterId,\n    Amount = totalCents,\n    PlatformAmount = platformCents,\n    OwnerAmount = ownerCents,\n    PromoterAmount = promoterCents\n};\n</code></pre>"},{"location":"banco-de-dados/tabelas/orders/#sem-promoter","title":"Sem Promoter","text":"<pre><code>// Se n\u00e3o tem promoter, promoter_amount = 0\n// Owner recebe a parte que seria do promoter\nvar platformCents = (int)(totalCents * config.PlatformPercentage / 100);\nvar ownerCents = totalCents - platformCents;\n\nvar order = new Order\n{\n    UserId = userId,\n    VideoId = videoId,\n    PromoterId = null,\n    Amount = totalCents,\n    PlatformAmount = platformCents,\n    OwnerAmount = ownerCents,\n    PromoterAmount = 0\n};\n</code></pre>"},{"location":"banco-de-dados/tabelas/orders/#queries-comuns","title":"Queries Comuns","text":""},{"location":"banco-de-dados/tabelas/orders/#pedidos-de-um-usuario","title":"Pedidos de um usu\u00e1rio","text":"<pre><code>SELECT o.*, v.title, p.status\nFROM orders o\nINNER JOIN videos v ON v.id = o.video_id\nINNER JOIN payments p ON p.order_id = o.id\nWHERE o.user_id = 123\nORDER BY o.created_at DESC;\n</code></pre> <pre><code>var orders = await _context.Orders\n    .Include(o =&gt; o.Video)\n    .Include(o =&gt; o.Payment)\n    .Where(o =&gt; o.UserId == userId)\n    .OrderByDescending(o =&gt; o.CreatedAt)\n    .ToListAsync();\n</code></pre>"},{"location":"banco-de-dados/tabelas/orders/#pedidos-pagos-de-um-video","title":"Pedidos pagos de um v\u00eddeo","text":"<pre><code>SELECT o.*, u.email, p.iugu_paid_at\nFROM orders o\nINNER JOIN users u ON u.id = o.user_id\nINNER JOIN payments p ON p.order_id = o.id\nWHERE o.video_id = 456\n  AND p.status = 'Paid';\n</code></pre> <pre><code>var orders = await _context.Orders\n    .Include(o =&gt; o.User)\n    .Include(o =&gt; o.Payment)\n    .Where(o =&gt; o.VideoId == videoId &amp;&amp;\n                o.Payment.Status == PaymentStatusEnum.Paid)\n    .ToListAsync();\n</code></pre>"},{"location":"banco-de-dados/tabelas/orders/#pedidos-via-promoter","title":"Pedidos via promoter","text":"<pre><code>SELECT o.*, v.title, val.unique_code\nFROM orders o\nINNER JOIN videos v ON v.id = o.video_id\nLEFT JOIN video_affiliate_links val ON val.id = o.video_affiliate_link_id\nWHERE o.promoter_id = 789;\n</code></pre> <pre><code>var orders = await _context.Orders\n    .Include(o =&gt; o.Video)\n    .Include(o =&gt; o.VideoAffiliateLink)\n    .Where(o =&gt; o.PromoterId == promoterId)\n    .ToListAsync();\n</code></pre>"},{"location":"banco-de-dados/tabelas/orders/#total-vendido-por-video","title":"Total vendido por v\u00eddeo","text":"<pre><code>SELECT \n    v.title,\n    COUNT(o.id) as total_vendas,\n    SUM(o.amount) / 100.0 as total_valor\nFROM videos v\nINNER JOIN orders o ON o.video_id = v.id\nINNER JOIN payments p ON p.order_id = o.id\nWHERE p.status = 'Paid'\nGROUP BY v.id, v.title\nORDER BY total_valor DESC;\n</code></pre>"},{"location":"banco-de-dados/tabelas/orders/#regras-de-negocio","title":"Regras de Neg\u00f3cio","text":"<ol> <li>Valores em centavos: Sempre armazenados em centavos para precis\u00e3o</li> <li>Soma dos amounts: <code>platform_amount + owner_amount + promoter_amount = amount</code></li> <li>Promoter opcional: Se NULL, <code>promoter_amount</code> deve ser 0</li> <li>Unique constraint impl\u00edcito: Um usu\u00e1rio n\u00e3o deve comprar o mesmo v\u00eddeo duas vezes (validado em c\u00f3digo)</li> <li>Imut\u00e1vel: Ap\u00f3s criado, order n\u00e3o deve ser alterado</li> <li>Payment obrigat\u00f3rio: Todo order deve ter um payment associado</li> </ol>"},{"location":"banco-de-dados/tabelas/orders/#validacoes","title":"Valida\u00e7\u00f5es","text":"<pre><code>// Verificar se usu\u00e1rio j\u00e1 comprou\nvar alreadyPurchased = await _context.Orders\n    .Include(o =&gt; o.Payment)\n    .AnyAsync(o =&gt; o.UserId == userId &amp;&amp; \n                  o.VideoId == videoId &amp;&amp;\n                  o.Payment.Status == PaymentStatusEnum.Paid);\n\nif (alreadyPurchased)\n{\n    throw new InvalidOperationException(\"Voc\u00ea j\u00e1 possui este v\u00eddeo\");\n}\n\n// Validar soma dos valores\nif (order.PlatformAmount + order.OwnerAmount + order.PromoterAmount != order.Amount)\n{\n    throw new InvalidOperationException(\"Split inv\u00e1lido\");\n}\n</code></pre>"},{"location":"banco-de-dados/tabelas/orders/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<ul> <li>Veja Payments para status de pagamento</li> <li>Consulte Income para distribui\u00e7\u00e3o de comiss\u00f5es</li> <li>Entenda Caso de Uso: Compra completo</li> </ul>"},{"location":"banco-de-dados/tabelas/owners/","title":"Tabela: owners","text":""},{"location":"banco-de-dados/tabelas/owners/#descricao","title":"Descri\u00e7\u00e3o","text":"<p>A tabela <code>owners</code> armazena dados adicionais de usu\u00e1rios Promoters e Influencers, incluindo informa\u00e7\u00f5es de KYC (Know Your Customer) e subcontas Iugu para recebimento de comiss\u00f5es.</p>"},{"location":"banco-de-dados/tabelas/owners/#estrutura","title":"Estrutura","text":"<pre><code>CREATE TABLE owners (\n    id BIGSERIAL PRIMARY KEY,\n    user_id BIGINT NOT NULL UNIQUE REFERENCES users(id),\n    type VARCHAR(50) NOT NULL, -- Influencer, Promoter, Partner, Agent, Other\n\n    -- Subconta Iugu\n    iugu_account_id VARCHAR(100),\n    sub_account_status VARCHAR(20), -- Pending, Approved, Rejected\n\n    -- Dados KYC\n    cpf_cnpj VARCHAR(20),\n    rg VARCHAR(20),\n    birth_date DATE,\n\n    -- Endere\u00e7o\n    address_street VARCHAR(200),\n    address_number VARCHAR(20),\n    address_complement VARCHAR(100),\n    address_neighborhood VARCHAR(100),\n    address_city VARCHAR(100),\n    address_state VARCHAR(2),\n    address_zipcode VARCHAR(10),\n\n    -- Dados banc\u00e1rios\n    bank_code VARCHAR(10),\n    bank_agency VARCHAR(10),\n    bank_account VARCHAR(20),\n    bank_account_type VARCHAR(20), -- corrente, poupanca\n\n    -- Documentos (URLs Cloudinary)\n    document_cpf_url TEXT,\n    document_rg_url TEXT,\n    document_address_proof_url TEXT,\n    document_selfie_url TEXT,\n\n    -- Controle\n    is_active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP\n);\n\n-- \u00cdndices\nCREATE UNIQUE INDEX idx_owners_user_id ON owners(user_id);\nCREATE INDEX idx_owners_type ON owners(type);\nCREATE INDEX idx_owners_sub_account_status ON owners(sub_account_status);\nCREATE INDEX idx_owners_iugu_account_id ON owners(iugu_account_id);\n</code></pre>"},{"location":"banco-de-dados/tabelas/owners/#campos","title":"Campos","text":"Campo Tipo Descri\u00e7\u00e3o Obrigat\u00f3rio <code>id</code> <code>bigserial</code> Chave prim\u00e1ria \u2713 <code>user_id</code> <code>bigint</code> FK para users (unique) \u2713 <code>type</code> <code>varchar(50)</code> Tipo de owner (enum) \u2713 <code>iugu_account_id</code> <code>varchar(100)</code> ID da subconta no Iugu \u2717 <code>sub_account_status</code> <code>varchar(20)</code> Status do KYC (enum) \u2717 <code>cpf_cnpj</code> <code>varchar(20)</code> CPF ou CNPJ \u2717 <code>rg</code> <code>varchar(20)</code> RG \u2717 <code>birth_date</code> <code>date</code> Data de nascimento \u2717 <code>address_*</code> <code>varchar</code> Endere\u00e7o completo \u2717 <code>bank_*</code> <code>varchar</code> Dados banc\u00e1rios \u2717 <code>document_*_url</code> <code>text</code> URLs dos documentos no Cloudinary \u2717 <code>is_active</code> <code>boolean</code> Registro ativo? \u2713 <code>created_at</code> <code>timestamp</code> Data de cria\u00e7\u00e3o \u2713 <code>updated_at</code> <code>timestamp</code> Data de atualiza\u00e7\u00e3o \u2717"},{"location":"banco-de-dados/tabelas/owners/#enums","title":"Enums","text":""},{"location":"banco-de-dados/tabelas/owners/#ownertypeenum","title":"OwnerTypeEnum","text":"<pre><code>public enum OwnerTypeEnum\n{\n    Influencer, // Criador de conte\u00fado\n    Promoter,   // Afiliado (gera links)\n    Partner,    // Parceiro de neg\u00f3cio\n    Agent,      // Agente/representante\n    Other       // Outros tipos\n}\n</code></pre>"},{"location":"banco-de-dados/tabelas/owners/#ownersubaccountstatusenum","title":"OwnerSubAccountStatusEnum","text":"<pre><code>public enum OwnerSubAccountStatusEnum\n{\n    Pending,   // Aguardando aprova\u00e7\u00e3o de KYC\n    Approved,  // KYC aprovado, pode operar\n    Rejected   // KYC rejeitado, precisa reenviar\n}\n</code></pre>"},{"location":"banco-de-dados/tabelas/owners/#relacionamentos","title":"Relacionamentos","text":"<pre><code>erDiagram\n    owners ||--|| users : \"pertence a\"\n    owners ||--o{ owner_videos : \"possui\"\n    owners ||--o{ video_affiliate_links : \"cria\"\n    owners ||--o{ incomes : \"recebe\"\n    owners ||--o{ orders : \"promove\"</code></pre> <ul> <li>1:1 com <code>users</code> - Todo owner \u00e9 um user</li> <li>1:N com <code>owner_videos</code> - Influencer pode estar em v\u00e1rios v\u00eddeos</li> <li>1:N com <code>video_affiliate_links</code> - Promoter pode ter m\u00faltiplos links</li> <li>1:N com <code>incomes</code> - Recebe m\u00faltiplas comiss\u00f5es</li> <li>1:N com <code>orders</code> - Promoter vinculado a pedidos (como afiliado)</li> </ul>"},{"location":"banco-de-dados/tabelas/owners/#entidade-c","title":"Entidade C","text":"<pre><code>public class Owner : Base\n{\n    public long UserId { get; set; }\n    public OwnerTypeEnum Type { get; set; }\n\n    // Iugu\n    public string? IuguAccountId { get; set; }\n    public OwnerSubAccountStatusEnum? SubAccountStatus { get; set; }\n\n    // KYC\n    public string? CpfCnpj { get; set; }\n    public string? Rg { get; set; }\n    public DateTime? BirthDate { get; set; }\n\n    // Endere\u00e7o\n    public string? AddressStreet { get; set; }\n    public string? AddressNumber { get; set; }\n    public string? AddressComplement { get; set; }\n    public string? AddressNeighborhood { get; set; }\n    public string? AddressCity { get; set; }\n    public string? AddressState { get; set; }\n    public string? AddressZipcode { get; set; }\n\n    // Dados banc\u00e1rios\n    public string? BankCode { get; set; }\n    public string? BankAgency { get; set; }\n    public string? BankAccount { get; set; }\n    public string? BankAccountType { get; set; }\n\n    // Documentos\n    public string? DocumentCpfUrl { get; set; }\n    public string? DocumentRgUrl { get; set; }\n    public string? DocumentAddressProofUrl { get; set; }\n    public string? DocumentSelfieUrl { get; set; }\n\n    // Navigation properties\n    public User User { get; set; }\n    public ICollection&lt;OwnerVideo&gt; OwnerVideos { get; set; }\n    public ICollection&lt;VideoAffiliateLink&gt; VideoAffiliateLinks { get; set; }\n    public ICollection&lt;Income&gt; Incomes { get; set; }\n}\n</code></pre>"},{"location":"banco-de-dados/tabelas/owners/#fluxo-de-kyc","title":"Fluxo de KYC","text":"<pre><code>stateDiagram-v2\n    [*] --&gt; Criado: Owner criado\n    Criado --&gt; Pendente: Documentos enviados&lt;br/&gt;Subconta Iugu criada\n    Pendente --&gt; Aprovado: Admin aprova&lt;br/&gt;Subconta ativada\n    Pendente --&gt; Rejeitado: Admin rejeita&lt;br/&gt;Motivo informado\n    Rejeitado --&gt; Pendente: Reenvio de documentos\n    Aprovado --&gt; [*]: Pode operar</code></pre>"},{"location":"banco-de-dados/tabelas/owners/#criacao-de-owner","title":"Cria\u00e7\u00e3o de Owner","text":"<pre><code>// Quando usu\u00e1rio se cadastra como Promoter/Influencer\npublic async Task&lt;Owner&gt; CreateOwnerAsync(long userId, OwnerTypeEnum type)\n{\n    var owner = new Owner\n    {\n        UserId = userId,\n        Type = type,\n        SubAccountStatus = OwnerSubAccountStatusEnum.Pending,\n        CreatedAt = DateTime.UtcNow\n    };\n\n    await _context.Owners.AddAsync(owner);\n    await _context.SaveChangesAsync();\n\n    return owner;\n}\n</code></pre>"},{"location":"banco-de-dados/tabelas/owners/#envio-de-documentos-kyc","title":"Envio de Documentos KYC","text":"<pre><code>public async Task SubmitKycAsync(long ownerId, KycDocumentsDto dto)\n{\n    var owner = await _context.Owners\n        .Include(o =&gt; o.User)\n        .FirstAsync(o =&gt; o.Id == ownerId);\n\n    // Upload documentos para Cloudinary\n    owner.DocumentCpfUrl = await _cloudinary.UploadAsync(dto.CpfFile);\n    owner.DocumentRgUrl = await _cloudinary.UploadAsync(dto.RgFile);\n    owner.DocumentAddressProofUrl = await _cloudinary.UploadAsync(dto.AddressProofFile);\n    owner.DocumentSelfieUrl = await _cloudinary.UploadAsync(dto.SelfieFile);\n\n    // Dados pessoais e banc\u00e1rios\n    owner.CpfCnpj = dto.Cpf;\n    owner.Rg = dto.Rg;\n    owner.BirthDate = dto.BirthDate;\n    owner.AddressStreet = dto.AddressStreet;\n    // ... outros campos\n\n    owner.BankCode = dto.BankCode;\n    owner.BankAgency = dto.BankAgency;\n    owner.BankAccount = dto.BankAccount;\n    owner.BankAccountType = dto.BankAccountType;\n\n    // Criar ou atualizar subconta Iugu\n    if (string.IsNullOrEmpty(owner.IuguAccountId))\n    {\n        var subAccount = await _iuguService.CreateSubAccountAsync(owner);\n        owner.IuguAccountId = subAccount.AccountId;\n    }\n    else\n    {\n        await _iuguService.UpdateSubAccountAsync(owner);\n    }\n\n    owner.SubAccountStatus = OwnerSubAccountStatusEnum.Pending;\n    owner.UpdatedAt = DateTime.UtcNow;\n\n    await _context.SaveChangesAsync();\n\n    // Notificar admin\n    await _notificationService.NotifyAdminKycPendingAsync(ownerId);\n}\n</code></pre>"},{"location":"banco-de-dados/tabelas/owners/#aprovacao-de-kyc","title":"Aprova\u00e7\u00e3o de KYC","text":"<pre><code>public async Task ApproveKycAsync(long ownerId, long adminUserId)\n{\n    var owner = await _context.Owners.FindAsync(ownerId);\n\n    if (owner.SubAccountStatus != OwnerSubAccountStatusEnum.Pending)\n        throw new InvalidOperationException(\"KYC n\u00e3o est\u00e1 pendente\");\n\n    // Ativar subconta no Iugu\n    await _iuguService.VerifySubAccountAsync(owner.IuguAccountId);\n\n    owner.SubAccountStatus = OwnerSubAccountStatusEnum.Approved;\n    owner.UpdatedAt = DateTime.UtcNow;\n\n    await _context.SaveChangesAsync();\n\n    // Notificar usu\u00e1rio\n    await _notificationService.NotifyKycApprovedAsync(ownerId);\n}\n</code></pre>"},{"location":"banco-de-dados/tabelas/owners/#queries-comuns","title":"Queries Comuns","text":""},{"location":"banco-de-dados/tabelas/owners/#owners-com-kyc-pendente","title":"Owners com KYC pendente","text":"<pre><code>SELECT o.*, u.email, u.first_name, u.last_name\nFROM owners o\nINNER JOIN users u ON u.id = o.user_id\nWHERE o.sub_account_status = 'Pending'\nORDER BY o.updated_at;\n</code></pre> <pre><code>var pendingKyc = await _context.Owners\n    .Include(o =&gt; o.User)\n    .Where(o =&gt; o.SubAccountStatus == OwnerSubAccountStatusEnum.Pending)\n    .OrderBy(o =&gt; o.UpdatedAt)\n    .ToListAsync();\n</code></pre>"},{"location":"banco-de-dados/tabelas/owners/#promoters-aprovados","title":"Promoters aprovados","text":"<pre><code>SELECT o.*, u.email\nFROM owners o\nINNER JOIN users u ON u.id = o.user_id\nWHERE o.type = 'Promoter'\n  AND o.sub_account_status = 'Approved'\n  AND o.is_active = TRUE;\n</code></pre> <pre><code>var approvedPromoters = await _context.Owners\n    .Include(o =&gt; o.User)\n    .Where(o =&gt; o.Type == OwnerTypeEnum.Promoter &amp;&amp;\n                o.SubAccountStatus == OwnerSubAccountStatusEnum.Approved)\n    .ToListAsync();\n</code></pre>"},{"location":"banco-de-dados/tabelas/owners/#total-de-comissoes-recebidas","title":"Total de comiss\u00f5es recebidas","text":"<pre><code>SELECT \n    o.id,\n    u.first_name || ' ' || u.last_name as name,\n    o.type,\n    COUNT(i.id) as total_comissoes,\n    SUM(i.amount) / 100.0 as total_recebido\nFROM owners o\nINNER JOIN users u ON u.id = o.user_id\nLEFT JOIN incomes i ON i.owner_id = o.id\nGROUP BY o.id, u.first_name, u.last_name, o.type\nORDER BY total_recebido DESC;\n</code></pre>"},{"location":"banco-de-dados/tabelas/owners/#regras-de-negocio","title":"Regras de Neg\u00f3cio","text":"<ol> <li>1:1 com User: Cada owner pertence a exatamente um user</li> <li>KYC obrigat\u00f3rio: Deve ter KYC aprovado para receber comiss\u00f5es</li> <li>Documentos: Todos os 4 documentos s\u00e3o obrigat\u00f3rios para envio de KYC</li> <li>Subconta Iugu: Criada ao enviar documentos, ativada ap\u00f3s aprova\u00e7\u00e3o</li> <li>Rejei\u00e7\u00e3o: Owner pode reenviar documentos ap\u00f3s rejei\u00e7\u00e3o</li> <li>Promoter: S\u00f3 pode gerar links se SubAccountStatus = Approved</li> <li>Influencer: Pode estar vinculado a v\u00eddeos, mas s\u00f3 recebe se Approved</li> </ol>"},{"location":"banco-de-dados/tabelas/owners/#validacoes","title":"Valida\u00e7\u00f5es","text":"<pre><code>// Verificar se owner pode operar\npublic bool CanOperate(Owner owner)\n{\n    return owner.SubAccountStatus == OwnerSubAccountStatusEnum.Approved &amp;&amp;\n           !string.IsNullOrEmpty(owner.IuguAccountId);\n}\n\n// Validar dados banc\u00e1rios\npublic bool HasValidBankData(Owner owner)\n{\n    return !string.IsNullOrEmpty(owner.BankCode) &amp;&amp;\n           !string.IsNullOrEmpty(owner.BankAgency) &amp;&amp;\n           !string.IsNullOrEmpty(owner.BankAccount) &amp;&amp;\n           !string.IsNullOrEmpty(owner.BankAccountType);\n}\n</code></pre>"},{"location":"banco-de-dados/tabelas/owners/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<ul> <li>Veja Processo KYC para fluxo completo</li> <li>Consulte Income para entender comiss\u00f5es</li> <li>Entenda Conta Master e Subcontas</li> </ul>"},{"location":"banco-de-dados/tabelas/payments/","title":"Tabela: payments","text":""},{"location":"banco-de-dados/tabelas/payments/#descricao","title":"Descri\u00e7\u00e3o","text":"<p>A tabela <code>payments</code> registra o status de pagamento de cada order atrav\u00e9s do gateway Iugu. Cada order tem exatamente um payment associado.</p>"},{"location":"banco-de-dados/tabelas/payments/#estrutura","title":"Estrutura","text":"<pre><code>CREATE TABLE payments (\n    id BIGSERIAL PRIMARY KEY,\n    order_id BIGINT NOT NULL UNIQUE REFERENCES orders(id),\n\n    -- Iugu\n    iugu_invoice_id VARCHAR(100) UNIQUE NOT NULL,\n    iugu_secure_url TEXT,\n    iugu_paid_at TIMESTAMP,\n\n    -- Status\n    status VARCHAR(20) NOT NULL, -- Pending, Paid, Cancelled, Refunded\n    amount INTEGER NOT NULL,\n\n    -- Controle\n    is_active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP\n);\n\n-- \u00cdndices\nCREATE UNIQUE INDEX idx_payments_order_id ON payments(order_id);\nCREATE UNIQUE INDEX idx_payments_iugu_invoice_id ON payments(iugu_invoice_id);\nCREATE INDEX idx_payments_status ON payments(status);\nCREATE INDEX idx_payments_paid_at ON payments(iugu_paid_at);\n</code></pre>"},{"location":"banco-de-dados/tabelas/payments/#campos","title":"Campos","text":"Campo Tipo Descri\u00e7\u00e3o Obrigat\u00f3rio <code>id</code> <code>bigserial</code> Chave prim\u00e1ria \u2713 <code>order_id</code> <code>bigint</code> FK para orders (unique) \u2713 <code>iugu_invoice_id</code> <code>varchar(100)</code> ID da invoice no Iugu (unique) \u2713 <code>iugu_secure_url</code> <code>text</code> URL de pagamento do Iugu \u2717 <code>iugu_paid_at</code> <code>timestamp</code> Data/hora do pagamento confirmado \u2717 <code>status</code> <code>varchar(20)</code> Status do pagamento (enum) \u2713 <code>amount</code> <code>integer</code> Valor em centavos \u2713 <code>is_active</code> <code>boolean</code> Registro ativo? \u2713 <code>created_at</code> <code>timestamp</code> Data de cria\u00e7\u00e3o \u2713 <code>updated_at</code> <code>timestamp</code> Data de atualiza\u00e7\u00e3o \u2717"},{"location":"banco-de-dados/tabelas/payments/#enum-paymentstatusenum","title":"Enum: PaymentStatusEnum","text":"<pre><code>public enum PaymentStatusEnum\n{\n    Pending,    // Aguardando pagamento\n    Paid,       // Pago e confirmado\n    Cancelled,  // Cancelado\n    Refunded    // Estornado\n}\n</code></pre>"},{"location":"banco-de-dados/tabelas/payments/#relacionamentos","title":"Relacionamentos","text":"<pre><code>erDiagram\n    payments ||--|| orders : \"pertence a\"</code></pre> <ul> <li>1:1 com <code>orders</code> - Cada payment pertence a um order espec\u00edfico</li> </ul>"},{"location":"banco-de-dados/tabelas/payments/#entidade-c","title":"Entidade C","text":"<pre><code>public class Payment : Base\n{\n    public long OrderId { get; set; }\n    public string IuguInvoiceId { get; set; }\n    public string? IuguSecureUrl { get; set; }\n    public DateTime? IuguPaidAt { get; set; }\n    public PaymentStatusEnum Status { get; set; }\n    public int Amount { get; set; }\n\n    // Navigation properties\n    public Order Order { get; set; }\n}\n</code></pre>"},{"location":"banco-de-dados/tabelas/payments/#ciclo-de-vida","title":"Ciclo de Vida","text":"<pre><code>stateDiagram-v2\n    [*] --&gt; Pending: Payment criado\n    Pending --&gt; Paid: Webhook confirma\n    Pending --&gt; Cancelled: Usu\u00e1rio cancela\n    Pending --&gt; Cancelled: Timeout\n    Paid --&gt; Refunded: Admin estorna\n    Cancelled --&gt; [*]\n    Refunded --&gt; [*]\n    Paid --&gt; [*]</code></pre>"},{"location":"banco-de-dados/tabelas/payments/#criacao-de-payment","title":"Cria\u00e7\u00e3o de Payment","text":"<pre><code>// Ap\u00f3s criar order e invoice no Iugu\nvar payment = new Payment\n{\n    OrderId = order.Id,\n    IuguInvoiceId = invoice.Id,\n    IuguSecureUrl = invoice.SecureUrl,\n    Status = PaymentStatusEnum.Pending,\n    Amount = order.Amount,\n    CreatedAt = DateTime.UtcNow\n};\n\nawait _context.Payments.AddAsync(payment);\nawait _context.SaveChangesAsync();\n\n// Usu\u00e1rio \u00e9 redirecionado para iugu_secure_url\nreturn payment.IuguSecureUrl;\n</code></pre>"},{"location":"banco-de-dados/tabelas/payments/#confirmacao-via-webhook","title":"Confirma\u00e7\u00e3o via Webhook","text":"<pre><code>// Webhook do Iugu envia invoice_id quando status muda para \"paid\"\npublic async Task ConfirmPaymentAsync(string iuguInvoiceId)\n{\n    var payment = await _context.Payments\n        .Include(p =&gt; p.Order)\n        .ThenInclude(o =&gt; o.Video)\n        .FirstAsync(p =&gt; p.IuguInvoiceId == iuguInvoiceId);\n\n    // Idempot\u00eancia - n\u00e3o processar se j\u00e1 foi pago\n    if (payment.Status == PaymentStatusEnum.Paid)\n    {\n        _logger.LogInformation(\"Payment j\u00e1 confirmado: {PaymentId}\", payment.Id);\n        return;\n    }\n\n    using var transaction = await _context.Database.BeginTransactionAsync();\n    try\n    {\n        // Atualizar payment\n        payment.Status = PaymentStatusEnum.Paid;\n        payment.IuguPaidAt = DateTime.UtcNow;\n        payment.UpdatedAt = DateTime.UtcNow;\n\n        // Criar incomes\n        var incomes = CreateIncomesForOrder(payment.Order);\n        await _context.Incomes.AddRangeAsync(incomes);\n\n        // Criar notifica\u00e7\u00e3o\n        var notification = new Notification\n        {\n            Type = NotificationTypeEnum.PaymentConfirmed,\n            Channel = payment.Order.User.NotificationPreference,\n            MetadataJson = JsonSerializer.Serialize(new\n            {\n                OrderId = payment.Order.Id,\n                VideoTitle = payment.Order.Video.Title\n            })\n        };\n\n        await _context.Notifications.AddAsync(notification);\n        await _context.SaveChangesAsync();\n        await transaction.CommitAsync();\n\n        _logger.LogInformation(\"Payment confirmado: {PaymentId}\", payment.Id);\n    }\n    catch\n    {\n        await transaction.RollbackAsync();\n        throw;\n    }\n}\n</code></pre>"},{"location":"banco-de-dados/tabelas/payments/#queries-comuns","title":"Queries Comuns","text":""},{"location":"banco-de-dados/tabelas/payments/#payments-pendentes-timeout","title":"Payments pendentes (timeout)","text":"<pre><code>SELECT * FROM payments \nWHERE status = 'Pending' \n  AND created_at &lt; NOW() - INTERVAL '24 hours';\n</code></pre> <pre><code>var expiredPayments = await _context.Payments\n    .Where(p =&gt; p.Status == PaymentStatusEnum.Pending &amp;&amp;\n                p.CreatedAt &lt; DateTime.UtcNow.AddHours(-24))\n    .ToListAsync();\n</code></pre>"},{"location":"banco-de-dados/tabelas/payments/#payments-por-status","title":"Payments por status","text":"<pre><code>SELECT status, COUNT(*) as total, SUM(amount) / 100.0 as total_valor\nFROM payments\nGROUP BY status;\n</code></pre> <pre><code>var stats = await _context.Payments\n    .GroupBy(p =&gt; p.Status)\n    .Select(g =&gt; new\n    {\n        Status = g.Key,\n        Total = g.Count(),\n        TotalValor = g.Sum(p =&gt; p.Amount) / 100m\n    })\n    .ToListAsync();\n</code></pre>"},{"location":"banco-de-dados/tabelas/payments/#payments-pagos-de-um-periodo","title":"Payments pagos de um per\u00edodo","text":"<pre><code>SELECT p.*, o.user_id, o.video_id\nFROM payments p\nINNER JOIN orders o ON o.id = p.order_id\nWHERE p.status = 'Paid'\n  AND p.iugu_paid_at BETWEEN '2025-01-01' AND '2025-01-31';\n</code></pre> <pre><code>var payments = await _context.Payments\n    .Include(p =&gt; p.Order)\n    .Where(p =&gt; p.Status == PaymentStatusEnum.Paid &amp;&amp;\n                p.IuguPaidAt &gt;= startDate &amp;&amp;\n                p.IuguPaidAt &lt;= endDate)\n    .ToListAsync();\n</code></pre>"},{"location":"banco-de-dados/tabelas/payments/#regras-de-negocio","title":"Regras de Neg\u00f3cio","text":"<ol> <li>1:1 com Order: Cada payment pertence a exatamente um order</li> <li>IuguInvoiceId \u00fanico: N\u00e3o pode haver dois payments com mesmo invoice</li> <li>Status imut\u00e1vel para Paid: Uma vez pago, n\u00e3o pode voltar para pending</li> <li>IuguPaidAt: S\u00f3 preenchido quando status = Paid</li> <li>Idempot\u00eancia: Webhook pode chegar m\u00faltiplas vezes, n\u00e3o processar duplicado</li> <li>Amount deve bater com Order: <code>payment.Amount == order.Amount</code></li> </ol>"},{"location":"banco-de-dados/tabelas/payments/#webhook-iugu","title":"Webhook Iugu","text":""},{"location":"banco-de-dados/tabelas/payments/#eventos-processados","title":"Eventos Processados","text":"Evento A\u00e7\u00e3o <code>invoice.status_changed</code> (paid) Confirmar payment, criar incomes <code>invoice.status_changed</code> (canceled) Cancelar payment <code>invoice.refunded</code> Estornar payment <code>invoice.payment_failed</code> Logar falha (opcional: notificar usu\u00e1rio)"},{"location":"banco-de-dados/tabelas/payments/#validacao-de-assinatura","title":"Valida\u00e7\u00e3o de Assinatura","text":"<pre><code>private bool ValidateIuguSignature(string body, string signature, string secret)\n{\n    var expectedHash = signature.Replace(\"sha256=\", \"\");\n\n    using var hmac = new HMACSHA256(Encoding.UTF8.GetBytes(secret));\n    var hash = hmac.ComputeHash(Encoding.UTF8.GetBytes(body));\n    var computedHash = BitConverter.ToString(hash).Replace(\"-\", \"\").ToLower();\n\n    return computedHash.Equals(expectedHash, StringComparison.OrdinalIgnoreCase);\n}\n</code></pre>"},{"location":"banco-de-dados/tabelas/payments/#monitoramento","title":"Monitoramento","text":""},{"location":"banco-de-dados/tabelas/payments/#payments-pendentes-ha-muito-tempo","title":"Payments pendentes h\u00e1 muito tempo","text":"<pre><code>SELECT \n    p.id,\n    p.created_at,\n    EXTRACT(EPOCH FROM (NOW() - p.created_at))/3600 as hours_pending,\n    o.user_id,\n    o.video_id\nFROM payments p\nINNER JOIN orders o ON o.id = p.order_id\nWHERE p.status = 'Pending'\n  AND p.created_at &lt; NOW() - INTERVAL '6 hours'\nORDER BY p.created_at;\n</code></pre>"},{"location":"banco-de-dados/tabelas/payments/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<ul> <li>Veja Orders para entender o pedido</li> <li>Consulte Webhooks para integra\u00e7\u00e3o Iugu</li> <li>Entenda Income para distribui\u00e7\u00e3o de comiss\u00f5es</li> </ul>"},{"location":"banco-de-dados/tabelas/relacionamentos/","title":"Relacionamentos entre Tabelas","text":""},{"location":"banco-de-dados/tabelas/relacionamentos/#descricao","title":"Descri\u00e7\u00e3o","text":"<p>Este documento mostra exemplos pr\u00e1ticos de queries com JOINs entre as principais tabelas do banco de dados, demonstrando os relacionamentos na pr\u00e1tica.</p>"},{"location":"banco-de-dados/tabelas/relacionamentos/#diagrama-simplificado","title":"Diagrama Simplificado","text":"<pre><code>erDiagram\n    users ||--o| owners : \"pode ser\"\n    users ||--o{ orders : \"faz\"\n    videos ||--o{ orders : \"\u00e9 comprado\"\n    orders ||--|| payments : \"tem\"\n    orders ||--o{ incomes : \"gera\"\n    owners ||--o{ incomes : \"recebe\"\n    owners ||--o{ owner_videos : \"participa\"\n    videos ||--o{ owner_videos : \"tem\"\n    videos ||--|| video_revenue_configs : \"tem\"\n    owners ||--o{ video_affiliate_links : \"cria\"\n    videos ||--o{ video_affiliate_links : \"tem\"</code></pre>"},{"location":"banco-de-dados/tabelas/relacionamentos/#1-user-order-payment-income","title":"1. User \u2192 Order \u2192 Payment \u2192 Income","text":""},{"location":"banco-de-dados/tabelas/relacionamentos/#buscar-todo-historico-de-compras-de-um-usuario","title":"Buscar todo hist\u00f3rico de compras de um usu\u00e1rio","text":"<pre><code>SELECT \n    u.first_name || ' ' || u.last_name as usuario,\n    o.id as order_id,\n    v.title as video_titulo,\n    o.amount / 100.0 as valor_pago,\n    p.status as status_pagamento,\n    p.iugu_paid_at as data_pagamento,\n    COUNT(i.id) as qtd_comissoes\nFROM users u\nINNER JOIN orders o ON o.user_id = u.id\nINNER JOIN videos v ON v.id = o.video_id\nINNER JOIN payments p ON p.order_id = o.id\nLEFT JOIN incomes i ON i.order_id = o.id\nWHERE u.id = 123\nGROUP BY u.first_name, u.last_name, o.id, v.title, o.amount, p.status, p.iugu_paid_at\nORDER BY p.iugu_paid_at DESC;\n</code></pre> <pre><code>var userPurchases = await _context.Orders\n    .Include(o =&gt; o.Video)\n    .Include(o =&gt; o.Payment)\n    .Include(o =&gt; o.Incomes)\n    .Where(o =&gt; o.UserId == userId)\n    .OrderByDescending(o =&gt; o.Payment.IuguPaidAt)\n    .Select(o =&gt; new\n    {\n        OrderId = o.Id,\n        VideoTitle = o.Video.Title,\n        Amount = o.Amount / 100m,\n        PaymentStatus = o.Payment.Status,\n        PaidAt = o.Payment.IuguPaidAt,\n        CommissionsCount = o.Incomes.Count\n    })\n    .ToListAsync();\n</code></pre>"},{"location":"banco-de-dados/tabelas/relacionamentos/#2-video-order-income","title":"2. Video \u2192 Order \u2192 Income","text":""},{"location":"banco-de-dados/tabelas/relacionamentos/#buscar-performance-de-um-video-vendas-e-comissoes","title":"Buscar performance de um v\u00eddeo (vendas e comiss\u00f5es)","text":"<pre><code>SELECT \n    v.id as video_id,\n    v.title,\n    COUNT(DISTINCT o.id) as total_vendas,\n    SUM(o.amount) / 100.0 as receita_total,\n    SUM(CASE WHEN i.owner_id IS NULL THEN i.amount ELSE 0 END) / 100.0 as receita_plataforma,\n    SUM(CASE WHEN i.type = 'Owner' THEN i.amount ELSE 0 END) / 100.0 as comissao_influencer,\n    SUM(CASE WHEN i.type = 'Promoter' THEN i.amount ELSE 0 END) / 100.0 as comissao_promoters\nFROM videos v\nINNER JOIN orders o ON o.video_id = v.id\nINNER JOIN payments p ON p.order_id = o.id AND p.status = 'Paid'\nINNER JOIN incomes i ON i.order_id = o.id\nWHERE v.id = 456\nGROUP BY v.id, v.title;\n</code></pre> <pre><code>var videoPerformance = await _context.Videos\n    .Where(v =&gt; v.Id == videoId)\n    .Select(v =&gt; new\n    {\n        VideoId = v.Id,\n        Title = v.Title,\n        TotalSales = v.Orders.Count(o =&gt; o.Payment.Status == PaymentStatusEnum.Paid),\n        TotalRevenue = v.Orders\n            .Where(o =&gt; o.Payment.Status == PaymentStatusEnum.Paid)\n            .Sum(o =&gt; o.Amount) / 100m,\n        PlatformRevenue = v.Orders\n            .SelectMany(o =&gt; o.Incomes)\n            .Where(i =&gt; i.OwnerId == null)\n            .Sum(i =&gt; i.Amount) / 100m,\n        InfluencerCommission = v.Orders\n            .SelectMany(o =&gt; o.Incomes)\n            .Where(i =&gt; i.Type == IncomeTypeEnum.Owner)\n            .Sum(i =&gt; i.Amount) / 100m,\n        PromoterCommission = v.Orders\n            .SelectMany(o =&gt; o.Incomes)\n            .Where(i =&gt; i.Type == IncomeTypeEnum.Promoter)\n            .Sum(i =&gt; i.Amount) / 100m\n    })\n    .FirstAsync();\n</code></pre>"},{"location":"banco-de-dados/tabelas/relacionamentos/#3-owner-income-promoter-e-influencer","title":"3. Owner \u2192 Income (Promoter e Influencer)","text":""},{"location":"banco-de-dados/tabelas/relacionamentos/#dashboard-de-comissoes-de-um-promoter","title":"Dashboard de comiss\u00f5es de um Promoter","text":"<pre><code>SELECT \n    own.id as promoter_id,\n    u.first_name || ' ' || u.last_name as nome,\n    COUNT(DISTINCT o.id) as total_vendas,\n    COUNT(DISTINCT val.id) as total_links,\n    SUM(val.clicks) as total_clicks,\n    SUM(i.amount) / 100.0 as total_comissoes,\n    AVG(i.amount) / 100.0 as comissao_media\nFROM owners own\nINNER JOIN users u ON u.id = own.user_id\nLEFT JOIN video_affiliate_links val ON val.owner_id = own.id\nLEFT JOIN orders o ON o.promoter_id = own.id\nLEFT JOIN incomes i ON i.order_id = o.id AND i.type = 'Promoter'\nWHERE own.id = 789\n  AND own.type = 'Promoter'\nGROUP BY own.id, u.first_name, u.last_name;\n</code></pre> <pre><code>var promoterDashboard = await _context.Owners\n    .Where(o =&gt; o.Id == promoterId &amp;&amp; o.Type == OwnerTypeEnum.Promoter)\n    .Select(o =&gt; new\n    {\n        PromoterId = o.Id,\n        Name = o.User.FirstName + \" \" + o.User.LastName,\n        TotalSales = o.Incomes.Count(i =&gt; i.Type == IncomeTypeEnum.Promoter),\n        TotalLinks = o.VideoAffiliateLinks.Count,\n        TotalClicks = o.VideoAffiliateLinks.Sum(l =&gt; l.Clicks),\n        TotalCommissions = o.Incomes\n            .Where(i =&gt; i.Type == IncomeTypeEnum.Promoter)\n            .Sum(i =&gt; i.Amount) / 100m,\n        AverageCommission = o.Incomes\n            .Where(i =&gt; i.Type == IncomeTypeEnum.Promoter)\n            .Average(i =&gt; (decimal?)i.Amount) / 100m ?? 0\n    })\n    .FirstAsync();\n</code></pre>"},{"location":"banco-de-dados/tabelas/relacionamentos/#dashboard-de-comissoes-de-um-influencer","title":"Dashboard de comiss\u00f5es de um Influencer","text":"<pre><code>SELECT \n    own.id as influencer_id,\n    u.first_name || ' ' || u.last_name as nome,\n    COUNT(DISTINCT ov.video_id) as total_videos,\n    COUNT(DISTINCT o.id) as total_vendas,\n    SUM(i.amount) / 100.0 as total_comissoes\nFROM owners own\nINNER JOIN users u ON u.id = own.user_id\nLEFT JOIN owner_videos ov ON ov.owner_id = own.id\nLEFT JOIN orders o ON o.video_id = ov.video_id\nLEFT JOIN incomes i ON i.order_id = o.id AND i.type = 'Owner'\nWHERE own.id = 321\n  AND own.type = 'Influencer'\nGROUP BY own.id, u.first_name, u.last_name;\n</code></pre> <pre><code>var influencerDashboard = await _context.Owners\n    .Where(o =&gt; o.Id == influencerId &amp;&amp; o.Type == OwnerTypeEnum.Influencer)\n    .Select(o =&gt; new\n    {\n        InfluencerId = o.Id,\n        Name = o.User.FirstName + \" \" + o.User.LastName,\n        TotalVideos = o.OwnerVideos.Select(ov =&gt; ov.VideoId).Distinct().Count(),\n        TotalSales = o.Incomes.Count(i =&gt; i.Type == IncomeTypeEnum.Owner),\n        TotalCommissions = o.Incomes\n            .Where(i =&gt; i.Type == IncomeTypeEnum.Owner)\n            .Sum(i =&gt; i.Amount) / 100m\n    })\n    .FirstAsync();\n</code></pre>"},{"location":"banco-de-dados/tabelas/relacionamentos/#4-video-videorevenueconfig","title":"4. Video \u2192 VideoRevenueConfig","text":""},{"location":"banco-de-dados/tabelas/relacionamentos/#videos-com-suas-configuracoes-de-comissao","title":"V\u00eddeos com suas configura\u00e7\u00f5es de comiss\u00e3o","text":"<pre><code>SELECT \n    v.id,\n    v.title,\n    v.price,\n    vrc.platform_percentage,\n    vrc.owner_percentage,\n    vrc.promoter_percentage,\n    (v.price * vrc.platform_percentage / 100) as valor_plataforma,\n    (v.price * vrc.owner_percentage / 100) as valor_influencer,\n    (v.price * vrc.promoter_percentage / 100) as valor_promoter\nFROM videos v\nINNER JOIN video_revenue_configs vrc ON vrc.video_id = v.id\nWHERE v.is_active = TRUE\n  AND v.deleted_at IS NULL;\n</code></pre> <pre><code>var videosWithConfig = await _context.Videos\n    .Include(v =&gt; v.VideoRevenueConfig)\n    .Where(v =&gt; v.IsActive)\n    .Select(v =&gt; new\n    {\n        VideoId = v.Id,\n        Title = v.Title,\n        Price = v.Price,\n        PlatformPercentage = v.VideoRevenueConfig.PlatformPercentage,\n        OwnerPercentage = v.VideoRevenueConfig.OwnerPercentage,\n        PromoterPercentage = v.VideoRevenueConfig.PromoterPercentage,\n        PlatformAmount = v.Price * v.VideoRevenueConfig.PlatformPercentage / 100,\n        OwnerAmount = v.Price * v.VideoRevenueConfig.OwnerPercentage / 100,\n        PromoterAmount = v.Price * v.VideoRevenueConfig.PromoterPercentage / 100\n    })\n    .ToListAsync();\n</code></pre>"},{"location":"banco-de-dados/tabelas/relacionamentos/#5-owner-videoaffiliatelink-order","title":"5. Owner \u2192 VideoAffiliateLink \u2192 Order","text":""},{"location":"banco-de-dados/tabelas/relacionamentos/#rastreamento-de-conversoes-por-link-de-afiliado","title":"Rastreamento de convers\u00f5es por link de afiliado","text":"<pre><code>SELECT \n    val.id as link_id,\n    val.unique_code,\n    v.title as video_titulo,\n    u.first_name || ' ' || u.last_name as promoter_nome,\n    val.clicks,\n    COUNT(o.id) as conversoes,\n    SUM(o.promoter_amount) / 100.0 as comissao_total,\n    CASE \n        WHEN val.clicks &gt; 0 \n        THEN (COUNT(o.id)::float / val.clicks * 100) \n        ELSE 0 \n    END as taxa_conversao\nFROM video_affiliate_links val\nINNER JOIN videos v ON v.id = val.video_id\nINNER JOIN owners own ON own.id = val.owner_id\nINNER JOIN users u ON u.id = own.user_id\nLEFT JOIN orders o ON o.video_affiliate_link_id = val.id\nWHERE val.owner_id = 789\nGROUP BY val.id, val.unique_code, v.title, u.first_name, u.last_name, val.clicks\nORDER BY conversoes DESC;\n</code></pre> <pre><code>var linkPerformance = await _context.VideoAffiliateLinks\n    .Include(l =&gt; l.Video)\n    .Include(l =&gt; l.Owner)\n    .ThenInclude(o =&gt; o.User)\n    .Where(l =&gt; l.OwnerId == promoterId)\n    .Select(l =&gt; new\n    {\n        LinkId = l.Id,\n        UniqueCode = l.UniqueCode,\n        VideoTitle = l.Video.Title,\n        PromoterName = l.Owner.User.FirstName + \" \" + l.Owner.User.LastName,\n        Clicks = l.Clicks,\n        Conversions = l.Orders.Count,\n        TotalCommission = l.Orders.Sum(o =&gt; o.PromoterAmount) / 100m,\n        ConversionRate = l.Clicks &gt; 0 \n            ? (decimal)l.Orders.Count / l.Clicks * 100 \n            : 0\n    })\n    .OrderByDescending(x =&gt; x.Conversions)\n    .ToListAsync();\n</code></pre>"},{"location":"banco-de-dados/tabelas/relacionamentos/#6-video-ownervideo-owner","title":"6. Video \u2192 OwnerVideo \u2192 Owner","text":""},{"location":"banco-de-dados/tabelas/relacionamentos/#influencers-participantes-de-um-video","title":"Influencers participantes de um v\u00eddeo","text":"<pre><code>SELECT \n    v.id as video_id,\n    v.title,\n    u.id as influencer_user_id,\n    u.first_name || ' ' || u.last_name as influencer_nome,\n    own.sub_account_status,\n    ov.created_at as vinculado_em\nFROM videos v\nINNER JOIN owner_videos ov ON ov.video_id = v.id\nINNER JOIN owners own ON own.id = ov.owner_id\nINNER JOIN users u ON u.id = own.user_id\nWHERE v.id = 456\n  AND own.type = 'Influencer';\n</code></pre> <pre><code>var videoInfluencers = await _context.Videos\n    .Where(v =&gt; v.Id == videoId)\n    .SelectMany(v =&gt; v.OwnerVideos)\n    .Where(ov =&gt; ov.Owner.Type == OwnerTypeEnum.Influencer)\n    .Select(ov =&gt; new\n    {\n        VideoId = ov.VideoId,\n        VideoTitle = ov.Video.Title,\n        InfluencerUserId = ov.Owner.UserId,\n        InfluencerName = ov.Owner.User.FirstName + \" \" + ov.Owner.User.LastName,\n        SubAccountStatus = ov.Owner.SubAccountStatus,\n        LinkedAt = ov.CreatedAt\n    })\n    .ToListAsync();\n</code></pre>"},{"location":"banco-de-dados/tabelas/relacionamentos/#7-user-payment-order-video-videos-comprados","title":"7. User \u2192 Payment \u2192 Order \u2192 Video (V\u00eddeos comprados)","text":""},{"location":"banco-de-dados/tabelas/relacionamentos/#videos-que-um-usuario-ja-possui","title":"V\u00eddeos que um usu\u00e1rio j\u00e1 possui","text":"<pre><code>SELECT DISTINCT\n    v.id as video_id,\n    v.title,\n    v.cloudinary_public_id,\n    o.amount / 100.0 as valor_pago,\n    p.iugu_paid_at as comprado_em,\n    v.expiration_view_date,\n    CASE \n        WHEN v.expiration_view_date IS NULL OR v.expiration_view_date &gt;= CURRENT_DATE \n        THEN TRUE \n        ELSE FALSE \n    END as pode_assistir\nFROM users u\nINNER JOIN orders o ON o.user_id = u.id\nINNER JOIN payments p ON p.order_id = o.id AND p.status = 'Paid'\nINNER JOIN videos v ON v.id = o.video_id\nWHERE u.id = 123\nORDER BY p.iugu_paid_at DESC;\n</code></pre> <pre><code>var userVideos = await _context.Orders\n    .Include(o =&gt; o.Payment)\n    .Include(o =&gt; o.Video)\n    .Where(o =&gt; o.UserId == userId &amp;&amp;\n                o.Payment.Status == PaymentStatusEnum.Paid)\n    .Select(o =&gt; new\n    {\n        VideoId = o.Video.Id,\n        Title = o.Video.Title,\n        CloudinaryPublicId = o.Video.CloudinaryPublicId,\n        AmountPaid = o.Amount / 100m,\n        PurchasedAt = o.Payment.IuguPaidAt,\n        ExpirationViewDate = o.Video.ExpirationViewDate,\n        CanWatch = o.Video.ExpirationViewDate == null ||\n                   o.Video.ExpirationViewDate &gt;= DateTime.Today\n    })\n    .OrderByDescending(x =&gt; x.PurchasedAt)\n    .ToListAsync();\n</code></pre>"},{"location":"banco-de-dados/tabelas/relacionamentos/#8-relatorios-gerais","title":"8. Relat\u00f3rios Gerais","text":""},{"location":"banco-de-dados/tabelas/relacionamentos/#resumo-financeiro-da-plataforma","title":"Resumo financeiro da plataforma","text":"<pre><code>SELECT \n    COUNT(DISTINCT o.id) as total_vendas,\n    COUNT(DISTINCT u.id) as total_compradores,\n    COUNT(DISTINCT v.id) as videos_vendidos,\n    SUM(o.amount) / 100.0 as receita_bruta,\n    SUM(i_platform.amount) / 100.0 as receita_plataforma,\n    SUM(i_owner.amount) / 100.0 as comissoes_influencers,\n    SUM(i_promoter.amount) / 100.0 as comissoes_promoters\nFROM orders o\nINNER JOIN payments p ON p.order_id = o.id AND p.status = 'Paid'\nINNER JOIN users u ON u.id = o.user_id\nINNER JOIN videos v ON v.id = o.video_id\nLEFT JOIN incomes i_platform ON i_platform.order_id = o.id \n    AND i_platform.owner_id IS NULL\nLEFT JOIN incomes i_owner ON i_owner.order_id = o.id \n    AND i_owner.type = 'Owner'\nLEFT JOIN incomes i_promoter ON i_promoter.order_id = o.id \n    AND i_promoter.type = 'Promoter';\n</code></pre>"},{"location":"banco-de-dados/tabelas/relacionamentos/#top-10-videos-mais-vendidos","title":"Top 10 v\u00eddeos mais vendidos","text":"<pre><code>SELECT \n    v.id,\n    v.title,\n    COUNT(o.id) as total_vendas,\n    SUM(o.amount) / 100.0 as receita_total,\n    AVG(o.amount) / 100.0 as ticket_medio\nFROM videos v\nINNER JOIN orders o ON o.video_id = v.id\nINNER JOIN payments p ON p.order_id = o.id AND p.status = 'Paid'\nGROUP BY v.id, v.title\nORDER BY total_vendas DESC\nLIMIT 10;\n</code></pre>"},{"location":"banco-de-dados/tabelas/relacionamentos/#top-10-promoters-por-comissao","title":"Top 10 promoters (por comiss\u00e3o)","text":"<pre><code>SELECT \n    own.id,\n    u.first_name || ' ' || u.last_name as nome,\n    COUNT(DISTINCT o.id) as total_vendas,\n    SUM(i.amount) / 100.0 as total_comissoes,\n    AVG(i.amount) / 100.0 as comissao_media\nFROM owners own\nINNER JOIN users u ON u.id = own.user_id\nINNER JOIN incomes i ON i.owner_id = own.id AND i.type = 'Promoter'\nINNER JOIN orders o ON o.id = i.order_id\nWHERE own.type = 'Promoter'\nGROUP BY own.id, u.first_name, u.last_name\nORDER BY total_comissoes DESC\nLIMIT 10;\n</code></pre>"},{"location":"banco-de-dados/tabelas/relacionamentos/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<ul> <li>Veja Tabelas individuais para detalhes de cada uma</li> <li>Consulte Modelo ER para diagrama completo</li> <li>Entenda Casos de Uso para queries em contexto</li> </ul>"},{"location":"banco-de-dados/tabelas/users/","title":"Tabela: users","text":""},{"location":"banco-de-dados/tabelas/users/#descricao","title":"Descri\u00e7\u00e3o","text":"<p>A tabela <code>users</code> armazena todos os usu\u00e1rios da plataforma Amasso, incluindo os 4 tipos de perfil: Admin, Default, Promoter e Influencer.</p>"},{"location":"banco-de-dados/tabelas/users/#estrutura","title":"Estrutura","text":"<pre><code>CREATE TABLE users (\n    id BIGSERIAL PRIMARY KEY,\n    email VARCHAR(255) UNIQUE NOT NULL,\n    password_hash VARCHAR(255) NOT NULL,\n    type VARCHAR(50) NOT NULL, -- Admin, Default, Promoter, Influencer\n\n    -- Dados pessoais\n    first_name VARCHAR(100) NOT NULL,\n    last_name VARCHAR(100) NOT NULL,\n    cpf VARCHAR(14),\n    birth_date DATE,\n    telephone VARCHAR(20),\n\n    -- Prefer\u00eancias\n    notification_preference VARCHAR(20), -- Email, WhatsApp, All\n\n    -- Controle\n    is_active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP,\n    deleted_at TIMESTAMP\n);\n\n-- \u00cdndices\nCREATE UNIQUE INDEX idx_users_email ON users(email);\nCREATE INDEX idx_users_type ON users(type);\nCREATE INDEX idx_users_active ON users(id) WHERE is_active = TRUE AND deleted_at IS NULL;\n</code></pre>"},{"location":"banco-de-dados/tabelas/users/#campos","title":"Campos","text":"Campo Tipo Descri\u00e7\u00e3o Obrigat\u00f3rio <code>id</code> <code>bigserial</code> Chave prim\u00e1ria auto-incremento \u2713 <code>email</code> <code>varchar(255)</code> Email \u00fanico do usu\u00e1rio \u2713 <code>password_hash</code> <code>varchar(255)</code> Hash bcrypt da senha \u2713 <code>type</code> <code>varchar(50)</code> Tipo de usu\u00e1rio (enum) \u2713 <code>first_name</code> <code>varchar(100)</code> Primeiro nome \u2713 <code>last_name</code> <code>varchar(100)</code> Sobrenome \u2713 <code>cpf</code> <code>varchar(14)</code> CPF (opcional) \u2717 <code>birth_date</code> <code>date</code> Data de nascimento \u2717 <code>telephone</code> <code>varchar(20)</code> Telefone com DDD \u2717 <code>notification_preference</code> <code>varchar(20)</code> Canal preferido de notifica\u00e7\u00e3o \u2717 <code>is_active</code> <code>boolean</code> Usu\u00e1rio ativo? \u2713 <code>created_at</code> <code>timestamp</code> Data de cria\u00e7\u00e3o \u2713 <code>updated_at</code> <code>timestamp</code> Data de atualiza\u00e7\u00e3o \u2717 <code>deleted_at</code> <code>timestamp</code> Data de exclus\u00e3o l\u00f3gica \u2717"},{"location":"banco-de-dados/tabelas/users/#enum-usertypeenum","title":"Enum: UserTypeEnum","text":"<pre><code>public enum UserTypeEnum\n{\n    Admin,      // Administrador da plataforma\n    Default,    // Usu\u00e1rio padr\u00e3o (comprador)\n    Promoter,   // Afiliado (gera links)\n    Influencer  // Criador de conte\u00fado\n}\n</code></pre>"},{"location":"banco-de-dados/tabelas/users/#relacionamentos","title":"Relacionamentos","text":"<pre><code>erDiagram\n    users ||--o| owners : \"pode ser\"\n    users ||--o{ orders : \"faz\"\n    users ||--o{ user_video_logs : \"assiste\"\n    users ||--o{ mfa_codes : \"tem\"</code></pre> <ul> <li>1:0..1 com <code>owners</code> - Promoters e Influencers t\u00eam registro em owners</li> <li>1:N com <code>orders</code> - Um usu\u00e1rio pode fazer m\u00faltiplas compras</li> <li>1:N com <code>user_video_logs</code> - Logs de visualiza\u00e7\u00e3o</li> <li>1:N com <code>mfa_codes</code> - C\u00f3digos de autentica\u00e7\u00e3o MFA</li> </ul>"},{"location":"banco-de-dados/tabelas/users/#entidade-c","title":"Entidade C","text":"<pre><code>public class User : Base\n{\n    public string Email { get; set; }\n    public string PasswordHash { get; set; }\n    public UserTypeEnum Type { get; set; }\n    public string FirstName { get; set; }\n    public string LastName { get; set; }\n    public string? Cpf { get; set; }\n    public DateTime? BirthDate { get; set; }\n    public string? Telephone { get; set; }\n    public NotificationChannelEnum? NotificationPreference { get; set; }\n\n    // Navigation properties\n    public Owner? Owner { get; set; }\n    public ICollection&lt;Order&gt; Orders { get; set; }\n    public ICollection&lt;UserVideoLog&gt; UserVideoLogs { get; set; }\n    public ICollection&lt;MfaCode&gt; MfaCodes { get; set; }\n}\n</code></pre>"},{"location":"banco-de-dados/tabelas/users/#queries-comuns","title":"Queries Comuns","text":""},{"location":"banco-de-dados/tabelas/users/#buscar-usuario-por-email","title":"Buscar usu\u00e1rio por email","text":"<pre><code>SELECT * FROM users \nWHERE email = 'user@example.com' \n  AND is_active = TRUE \n  AND deleted_at IS NULL;\n</code></pre> <pre><code>var user = await _context.Users\n    .FirstOrDefaultAsync(u =&gt; u.Email == email);\n</code></pre>"},{"location":"banco-de-dados/tabelas/users/#listar-todos-os-promoters","title":"Listar todos os promoters","text":"<pre><code>SELECT * FROM users \nWHERE type = 'Promoter' \n  AND is_active = TRUE \n  AND deleted_at IS NULL;\n</code></pre> <pre><code>var promoters = await _context.Users\n    .Where(u =&gt; u.Type == UserTypeEnum.Promoter)\n    .ToListAsync();\n</code></pre>"},{"location":"banco-de-dados/tabelas/users/#contar-usuarios-por-tipo","title":"Contar usu\u00e1rios por tipo","text":"<pre><code>SELECT type, COUNT(*) as total \nFROM users \nWHERE is_active = TRUE \n  AND deleted_at IS NULL \nGROUP BY type;\n</code></pre>"},{"location":"banco-de-dados/tabelas/users/#regras-de-negocio","title":"Regras de Neg\u00f3cio","text":"<ol> <li>Email \u00fanico: N\u00e3o pode haver dois usu\u00e1rios com o mesmo email</li> <li>Senha: Deve ser armazenada como hash bcrypt</li> <li>Type: Define as permiss\u00f5es e funcionalidades dispon\u00edveis</li> <li>Soft delete: Usu\u00e1rios s\u00e3o desativados, n\u00e3o deletados fisicamente</li> <li>CPF: Obrigat\u00f3rio apenas para Promoters e Influencers (validado no KYC)</li> </ol>"},{"location":"banco-de-dados/tabelas/users/#seguranca","title":"Seguran\u00e7a","text":"<ul> <li>Senha nunca \u00e9 armazenada em texto plano</li> <li>Hash bcrypt com salt aleat\u00f3rio</li> <li>Email \u00e9 case-insensitive na busca</li> <li>JWT gerado baseado no user.Id e user.Type</li> </ul>"},{"location":"banco-de-dados/tabelas/users/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<ul> <li>Veja Owners para dados adicionais de Promoters/Influencers</li> <li>Consulte Orders para entender compras</li> <li>Entenda Perfis de Usu\u00e1rio para cada tipo</li> </ul>"},{"location":"banco-de-dados/tabelas/videos/","title":"Tabela: videos","text":""},{"location":"banco-de-dados/tabelas/videos/#descricao","title":"Descri\u00e7\u00e3o","text":"<p>A tabela <code>videos</code> armazena o cat\u00e1logo de v\u00eddeos dispon\u00edveis para venda na plataforma. Os v\u00eddeos s\u00e3o hospedados no Cloudinary CDN.</p>"},{"location":"banco-de-dados/tabelas/videos/#estrutura","title":"Estrutura","text":"<pre><code>CREATE TABLE videos (\n    id BIGSERIAL PRIMARY KEY,\n    title VARCHAR(200) NOT NULL,\n    description TEXT,\n\n    -- Cloudinary\n    cloudinary_public_id VARCHAR(255) NOT NULL,\n    duration_seconds INTEGER,\n    thumb_img_url TEXT,\n\n    -- Pre\u00e7o e disponibilidade\n    price DECIMAL(10,2) NOT NULL,\n    release_date DATE,\n    expiration_sale_date DATE,\n    expiration_view_date DATE,\n\n    -- Controle\n    is_active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP,\n    deleted_at TIMESTAMP\n);\n\n-- \u00cdndices\nCREATE INDEX idx_videos_active ON videos(id) \n    WHERE is_active = TRUE AND deleted_at IS NULL;\nCREATE INDEX idx_videos_release_date ON videos(release_date);\nCREATE INDEX idx_videos_price ON videos(price);\n</code></pre>"},{"location":"banco-de-dados/tabelas/videos/#campos","title":"Campos","text":"Campo Tipo Descri\u00e7\u00e3o Obrigat\u00f3rio <code>id</code> <code>bigserial</code> Chave prim\u00e1ria \u2713 <code>title</code> <code>varchar(200)</code> T\u00edtulo do v\u00eddeo \u2713 <code>description</code> <code>text</code> Descri\u00e7\u00e3o completa \u2717 <code>cloudinary_public_id</code> <code>varchar(255)</code> ID do v\u00eddeo no Cloudinary \u2713 <code>duration_seconds</code> <code>integer</code> Dura\u00e7\u00e3o em segundos \u2717 <code>thumb_img_url</code> <code>text</code> URL da thumbnail \u2717 <code>price</code> <code>decimal(10,2)</code> Pre\u00e7o em reais \u2713 <code>release_date</code> <code>date</code> Data de lan\u00e7amento \u2717 <code>expiration_sale_date</code> <code>date</code> Data limite para venda \u2717 <code>expiration_view_date</code> <code>date</code> Data limite para visualiza\u00e7\u00e3o \u2717 <code>is_active</code> <code>boolean</code> V\u00eddeo ativo? \u2713 <code>created_at</code> <code>timestamp</code> Data de cria\u00e7\u00e3o \u2713 <code>updated_at</code> <code>timestamp</code> Data de atualiza\u00e7\u00e3o \u2717 <code>deleted_at</code> <code>timestamp</code> Data de exclus\u00e3o l\u00f3gica \u2717"},{"location":"banco-de-dados/tabelas/videos/#relacionamentos","title":"Relacionamentos","text":"<pre><code>erDiagram\n    videos ||--|| video_revenue_configs : \"tem\"\n    videos ||--o{ video_trailers : \"tem\"\n    videos ||--o{ owner_videos : \"pertence a\"\n    videos ||--o{ orders : \"\u00e9 comprado\"\n    videos ||--o{ video_affiliate_links : \"promovido por\"</code></pre> <ul> <li>1:1 com <code>video_revenue_configs</code> - Configura\u00e7\u00e3o de comiss\u00f5es</li> <li>1:N com <code>video_trailers</code> - Trailers/teasers</li> <li>1:N com <code>owner_videos</code> - Influencers participantes</li> <li>1:N com <code>orders</code> - Compras realizadas</li> <li>1:N com <code>video_affiliate_links</code> - Links de afiliado</li> </ul>"},{"location":"banco-de-dados/tabelas/videos/#entidade-c","title":"Entidade C","text":"<pre><code>public class Video : Base\n{\n    public string Title { get; set; }\n    public string? Description { get; set; }\n    public string CloudinaryPublicId { get; set; }\n    public int? DurationSeconds { get; set; }\n    public string? ThumbImgUrl { get; set; }\n    public decimal Price { get; set; }\n    public DateTime? ReleaseDate { get; set; }\n    public DateTime? ExpirationSaleDate { get; set; }\n    public DateTime? ExpirationViewDate { get; set; }\n\n    // Navigation properties\n    public VideoRevenueConfig VideoRevenueConfig { get; set; }\n    public ICollection&lt;VideoTrailer&gt; VideoTrailers { get; set; }\n    public ICollection&lt;OwnerVideo&gt; OwnerVideos { get; set; }\n    public ICollection&lt;Order&gt; Orders { get; set; }\n    public ICollection&lt;VideoAffiliateLink&gt; VideoAffiliateLinks { get; set; }\n}\n</code></pre>"},{"location":"banco-de-dados/tabelas/videos/#integracao-cloudinary","title":"Integra\u00e7\u00e3o Cloudinary","text":""},{"location":"banco-de-dados/tabelas/videos/#upload-de-video","title":"Upload de V\u00eddeo","text":"<pre><code>public async Task&lt;string&gt; UploadVideoAsync(IFormFile file)\n{\n    var uploadParams = new VideoUploadParams\n    {\n        File = new FileDescription(file.FileName, file.OpenReadStream()),\n        PublicId = $\"videos/{Guid.NewGuid()}\",\n        ResourceType = ResourceType.Video,\n        Folder = \"amasso-videos\"\n    };\n\n    var result = await _cloudinary.UploadAsync(uploadParams);\n    return result.PublicId; // Salvar no banco\n}\n</code></pre>"},{"location":"banco-de-dados/tabelas/videos/#streaming-url","title":"Streaming URL","text":"<pre><code>public string GetVideoUrl(string publicId)\n{\n    return _cloudinary.Api.UrlVideoUp\n        .Transform(new Transformation().Quality(\"auto\"))\n        .BuildUrl(publicId);\n}\n</code></pre>"},{"location":"banco-de-dados/tabelas/videos/#queries-comuns","title":"Queries Comuns","text":""},{"location":"banco-de-dados/tabelas/videos/#videos-disponiveis-para-venda","title":"V\u00eddeos dispon\u00edveis para venda","text":"<pre><code>SELECT * FROM videos \nWHERE is_active = TRUE \n  AND deleted_at IS NULL\n  AND (release_date IS NULL OR release_date &lt;= CURRENT_DATE)\n  AND (expiration_sale_date IS NULL OR expiration_sale_date &gt;= CURRENT_DATE);\n</code></pre> <pre><code>var videos = await _context.Videos\n    .Include(v =&gt; v.VideoRevenueConfig)\n    .Where(v =&gt; v.IsActive &amp;&amp;\n                (v.ReleaseDate == null || v.ReleaseDate &lt;= DateTime.Today) &amp;&amp;\n                (v.ExpirationSaleDate == null || v.ExpirationSaleDate &gt;= DateTime.Today))\n    .ToListAsync();\n</code></pre>"},{"location":"banco-de-dados/tabelas/videos/#videos-com-influencer-especifico","title":"V\u00eddeos com influencer espec\u00edfico","text":"<pre><code>SELECT v.* \nFROM videos v\nINNER JOIN owner_videos ov ON ov.video_id = v.id\nWHERE ov.owner_id = 123\n  AND v.is_active = TRUE;\n</code></pre> <pre><code>var videos = await _context.Videos\n    .Where(v =&gt; v.OwnerVideos.Any(ov =&gt; ov.OwnerId == influencerId))\n    .ToListAsync();\n</code></pre>"},{"location":"banco-de-dados/tabelas/videos/#videos-disponiveis-para-promoters-com-comissao-0","title":"V\u00eddeos dispon\u00edveis para promoters (com comiss\u00e3o &gt; 0%)","text":"<pre><code>SELECT v.* \nFROM videos v\nINNER JOIN video_revenue_configs vrc ON vrc.video_id = v.id\nWHERE v.is_active = TRUE \n  AND v.deleted_at IS NULL\n  AND vrc.promoter_percentage &gt; 0;\n</code></pre> <pre><code>var videos = await _context.Videos\n    .Include(v =&gt; v.VideoRevenueConfig)\n    .Where(v =&gt; v.VideoRevenueConfig.PromoterPercentage &gt; 0)\n    .ToListAsync();\n</code></pre>"},{"location":"banco-de-dados/tabelas/videos/#regras-de-negocio","title":"Regras de Neg\u00f3cio","text":"<ol> <li>CloudinaryPublicId: Obrigat\u00f3rio para streaming</li> <li>Price: Sempre positivo, n\u00e3o pode ser zero</li> <li>ReleaseDate: V\u00eddeo s\u00f3 aparece ap\u00f3s esta data</li> <li>ExpirationSaleDate: Ap\u00f3s esta data, n\u00e3o pode mais ser comprado</li> <li>ExpirationViewDate: Ap\u00f3s esta data, usu\u00e1rios que compraram n\u00e3o podem mais assistir</li> <li>VideoRevenueConfig: Todo v\u00eddeo deve ter uma configura\u00e7\u00e3o de comiss\u00f5es</li> <li>Soft delete: V\u00eddeos s\u00e3o desativados, n\u00e3o deletados</li> </ol>"},{"location":"banco-de-dados/tabelas/videos/#validacoes","title":"Valida\u00e7\u00f5es","text":"<pre><code>public class VideoValidator : AbstractValidator&lt;Video&gt;\n{\n    public VideoValidator()\n    {\n        RuleFor(v =&gt; v.Title).NotEmpty().MaximumLength(200);\n        RuleFor(v =&gt; v.CloudinaryPublicId).NotEmpty();\n        RuleFor(v =&gt; v.Price).GreaterThan(0);\n        RuleFor(v =&gt; v.ExpirationSaleDate)\n            .GreaterThan(v =&gt; v.ReleaseDate)\n            .When(v =&gt; v.ReleaseDate.HasValue &amp;&amp; v.ExpirationSaleDate.HasValue);\n    }\n}\n</code></pre>"},{"location":"banco-de-dados/tabelas/videos/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<ul> <li>Veja Video Revenue Configs para comiss\u00f5es</li> <li>Consulte Orders para entender compras</li> <li>Entenda Owner Videos para influencers</li> </ul>"},{"location":"casos-de-uso/admin-gerencia-plataforma/","title":"Caso de Uso: Admin Gerencia Plataforma","text":""},{"location":"casos-de-uso/admin-gerencia-plataforma/#historia","title":"Hist\u00f3ria","text":"<p>\"Como admin, gerencio toda a plataforma, incluindo aprova\u00e7\u00e3o de KYC, cria\u00e7\u00e3o de v\u00eddeos, configura\u00e7\u00e3o de comiss\u00f5es e vincula\u00e7\u00e3o de influencers.\"</p>"},{"location":"casos-de-uso/admin-gerencia-plataforma/#atores","title":"Atores","text":"<ul> <li>Admin (administrador da plataforma)</li> <li>Sistema (Backend API + Cloudinary + Iugu)</li> </ul>"},{"location":"casos-de-uso/admin-gerencia-plataforma/#pre-condicoes","title":"Pr\u00e9-condi\u00e7\u00f5es","text":"<ol> <li>Admin deve estar logado</li> <li>Admin deve ter tipo de usu\u00e1rio <code>Admin</code></li> </ol>"},{"location":"casos-de-uso/admin-gerencia-plataforma/#funcionalidades","title":"Funcionalidades","text":""},{"location":"casos-de-uso/admin-gerencia-plataforma/#1-aprovarrejeitar-kyc","title":"1. Aprovar/Rejeitar KYC","text":"<p>Ver Caso de Uso: Promoter - Aprova\u00e7\u00e3o KYC para detalhes completos.</p> <p>Resumo:</p> <pre><code>graph TD\n    A[Listar KYC Pendentes] --&gt; B{Revisar Documentos}\n    B --&gt;|OK| C[Aprovar KYC]\n    B --&gt;|Problemas| D[Rejeitar KYC com Motivo]\n    C --&gt; E[Status = Approved]\n    D --&gt; F[Status = Rejected]\n    E --&gt; G[Notificar Usu\u00e1rio]\n    F --&gt; G</code></pre> <p>Frontend: <pre><code>// pages/Admin/KycApprovals.tsx\nconst { data: pendingKyc } = useQuery({\n  queryKey: ['pending-kyc'],\n  queryFn: async () =&gt; {\n    const response = await httpClient.get('/api/admin/kyc/pending')\n    return response.data\n  }\n})\n\nconst handleApprove = async (ownerId: number) =&gt; {\n  await httpClient.post(`/api/admin/kyc/${ownerId}/approve`)\n  toast.success('KYC aprovado!')\n}\n\nconst handleReject = async (ownerId: number, reason: string) =&gt; {\n  await httpClient.post(`/api/admin/kyc/${ownerId}/reject`, { reason })\n  toast.success('KYC rejeitado')\n}\n</code></pre></p>"},{"location":"casos-de-uso/admin-gerencia-plataforma/#2-criar-video","title":"2. Criar V\u00eddeo","text":"<p>Fluxo:</p> <pre><code>sequenceDiagram\n    participant A as Admin\n    participant F as Frontend\n    participant B as Backend\n    participant C as Cloudinary\n    participant DB as PostgreSQL\n\n    A-&gt;&gt;F: Upload v\u00eddeo + dados\n    F-&gt;&gt;B: POST /api/admin/videos (multipart)\n    B-&gt;&gt;C: Upload v\u00eddeo\n    C--&gt;&gt;B: {publicId, duration, thumbnail}\n    B-&gt;&gt;DB: INSERT INTO videos\n    DB--&gt;&gt;B: Video criado (isActive=false)\n    B--&gt;&gt;F: Video criado\n    F--&gt;&gt;A: V\u00eddeo carregado! Configure comiss\u00f5es.</code></pre> <p>Frontend: <pre><code>// pages/Admin/VideoManagement.tsx\nconst VideoUpload = () =&gt; {\n  const { register, handleSubmit } = useForm&lt;VideoForm&gt;()\n  const [isUploading, setIsUploading] = useState(false)\n\n  const onSubmit = async (data: VideoForm) =&gt; {\n    setIsUploading(true)\n\n    try {\n      const formData = new FormData()\n      formData.append('title', data.title)\n      formData.append('description', data.description)\n      formData.append('price', data.price)\n      formData.append('videoFile', data.videoFile[0])\n      formData.append('releaseDate', data.releaseDate)\n      formData.append('expirationSaleDate', data.expirationSaleDate)\n\n      const response = await httpClient.post('/api/admin/videos', formData, {\n        headers: { 'Content-Type': 'multipart/form-data' },\n        onUploadProgress: (progressEvent) =&gt; {\n          const percent = (progressEvent.loaded / progressEvent.total) * 100\n          setUploadProgress(percent)\n        }\n      })\n\n      toast.success('V\u00eddeo criado! Configure as comiss\u00f5es.')\n      navigate(`/admin/videos/${response.data.id}/configure`)\n    } catch (error) {\n      toast.error('Erro ao criar v\u00eddeo')\n    } finally {\n      setIsUploading(false)\n    }\n  }\n\n  return (\n    &lt;form onSubmit={handleSubmit(onSubmit)}&gt;\n      &lt;h1&gt;Criar Novo V\u00eddeo&lt;/h1&gt;\n\n      &lt;input {...register('title')} placeholder=\"T\u00edtulo\" required /&gt;\n      &lt;textarea {...register('description')} placeholder=\"Descri\u00e7\u00e3o\" /&gt;\n      &lt;input {...register('price')} type=\"number\" step=\"0.01\" placeholder=\"Pre\u00e7o\" required /&gt;\n\n      &lt;label&gt;\n        Arquivo do V\u00eddeo (MP4):\n        &lt;input \n          type=\"file\" \n          {...register('videoFile')} \n          accept=\"video/mp4,video/mov\" \n          required \n        /&gt;\n      &lt;/label&gt;\n\n      &lt;input {...register('releaseDate')} type=\"date\" /&gt;\n      &lt;input {...register('expirationSaleDate')} type=\"date\" /&gt;\n\n      {isUploading &amp;&amp; (\n        &lt;ProgressBar progress={uploadProgress} /&gt;\n      )}\n\n      &lt;button type=\"submit\" disabled={isUploading}&gt;\n        {isUploading ? 'Enviando...' : 'Criar V\u00eddeo'}\n      &lt;/button&gt;\n    &lt;/form&gt;\n  )\n}\n</code></pre></p> <p>Backend: <pre><code>// AdminEndpoints.cs\napp.MapPost(\"/api/admin/videos\", async (\n    HttpRequest request,\n    ICloudinaryService cloudinary,\n    ApplicationDbContext context) =&gt;\n{\n    var form = await request.ReadFormAsync();\n    var videoFile = form.Files[\"videoFile\"];\n\n    // Upload para Cloudinary\n    var uploadResult = await cloudinary.UploadVideoAsync(videoFile);\n\n    // Criar v\u00eddeo (inativo at\u00e9 configurar comiss\u00f5es)\n    var video = new Video\n    {\n        Title = form[\"title\"],\n        Description = form[\"description\"],\n        CloudinaryPublicId = uploadResult.PublicId,\n        DurationSeconds = uploadResult.Duration,\n        ThumbImgUrl = uploadResult.ThumbnailUrl,\n        Price = decimal.Parse(form[\"price\"]),\n        ReleaseDate = DateTime.Parse(form[\"releaseDate\"]),\n        ExpirationSaleDate = DateTime.Parse(form[\"expirationSaleDate\"]),\n        IsActive = false, // Ativar ap\u00f3s configurar comiss\u00f5es\n        CreatedAt = DateTime.UtcNow\n    };\n\n    await context.Videos.AddAsync(video);\n    await context.SaveChangesAsync();\n\n    return Results.Created($\"/api/videos/{video.Id}\", video);\n})\n.RequireAuthorization(\"Admin\")\n.DisableAntiforgery()\n.WithName(\"CreateVideo\");\n</code></pre></p>"},{"location":"casos-de-uso/admin-gerencia-plataforma/#3-configurar-comissoes-videorevenueconfig","title":"3. Configurar Comiss\u00f5es (VideoRevenueConfig)","text":"<p>Frontend: <pre><code>// pages/Admin/VideoRevenueConfig.tsx\nconst VideoRevenueConfig = () =&gt; {\n  const { videoId } = useParams()\n  const { register, handleSubmit, watch } = useForm&lt;RevenueConfigForm&gt;({\n    defaultValues: {\n      platformPercentage: 20,\n      ownerPercentage: 50,\n      promoterPercentage: 30\n    }\n  })\n\n  const values = watch()\n  const total = values.platformPercentage + values.ownerPercentage + values.promoterPercentage\n\n  const onSubmit = async (data: RevenueConfigForm) =&gt; {\n    if (total !== 100) {\n      toast.error('A soma das porcentagens deve ser 100%')\n      return\n    }\n\n    try {\n      await httpClient.post(`/api/admin/videos/${videoId}/revenue-config`, data)\n      toast.success('Comiss\u00f5es configuradas! V\u00eddeo ativado.')\n      navigate('/admin/videos')\n    } catch (error) {\n      toast.error('Erro ao configurar comiss\u00f5es')\n    }\n  }\n\n  return (\n    &lt;form onSubmit={handleSubmit(onSubmit)}&gt;\n      &lt;h1&gt;Configurar Comiss\u00f5es&lt;/h1&gt;\n\n      &lt;div className=\"field\"&gt;\n        &lt;label&gt;Plataforma (%)&lt;/label&gt;\n        &lt;input \n          {...register('platformPercentage', { valueAsNumber: true })} \n          type=\"number\" \n          min=\"0\" \n          max=\"100\" \n        /&gt;\n      &lt;/div&gt;\n\n      &lt;div className=\"field\"&gt;\n        &lt;label&gt;Owner/Influencer (%)&lt;/label&gt;\n        &lt;input \n          {...register('ownerPercentage', { valueAsNumber: true })} \n          type=\"number\" \n          min=\"0\" \n          max=\"100\" \n        /&gt;\n      &lt;/div&gt;\n\n      &lt;div className=\"field\"&gt;\n        &lt;label&gt;Promoter (%)&lt;/label&gt;\n        &lt;input \n          {...register('promoterPercentage', { valueAsNumber: true })} \n          type=\"number\" \n          min=\"0\" \n          max=\"100\" \n        /&gt;\n        &lt;small&gt;\n          \u26a0\ufe0f Se 0%, v\u00eddeo N\u00c3O aparecer\u00e1 para promoters gerarem links\n        &lt;/small&gt;\n      &lt;/div&gt;\n\n      &lt;div className={`total ${total === 100 ? 'valid' : 'invalid'}`}&gt;\n        Total: {total}% {total === 100 ? '\u2713' : '\u2717'}\n      &lt;/div&gt;\n\n      &lt;button type=\"submit\" disabled={total !== 100}&gt;\n        Salvar Configura\u00e7\u00e3o\n      &lt;/button&gt;\n    &lt;/form&gt;\n  )\n}\n</code></pre></p> <p>Backend: <pre><code>app.MapPost(\"/api/admin/videos/{id:long}/revenue-config\", async (\n    long id,\n    VideoRevenueConfigDto dto,\n    ApplicationDbContext context) =&gt;\n{\n    // Validar soma = 100%\n    var total = dto.PlatformPercentage + dto.OwnerPercentage + dto.PromoterPercentage;\n    if (total != 100)\n    {\n        return Results.BadRequest(new \n        { \n            error = $\"Soma deve ser 100% (atual: {total}%)\" \n        });\n    }\n\n    var config = new VideoRevenueConfig\n    {\n        VideoId = id,\n        PlatformPercentage = dto.PlatformPercentage,\n        OwnerPercentage = dto.OwnerPercentage,\n        PromoterPercentage = dto.PromoterPercentage,\n        CreatedAt = DateTime.UtcNow\n    };\n\n    await context.VideoRevenueConfigs.AddAsync(config);\n\n    // Ativar v\u00eddeo agora que tem comiss\u00f5es\n    var video = await context.Videos.FindAsync(id);\n    video.IsActive = true;\n    video.UpdatedAt = DateTime.UtcNow;\n\n    await context.SaveChangesAsync();\n\n    return Results.Ok(config);\n})\n.RequireAuthorization(\"Admin\");\n</code></pre></p>"},{"location":"casos-de-uso/admin-gerencia-plataforma/#4-vincular-influencer-ao-video","title":"4. Vincular Influencer ao V\u00eddeo","text":"<p>Frontend: <pre><code>// pages/Admin/VideoInfluencers.tsx\nconst VideoInfluencers = () =&gt; {\n  const { videoId } = useParams()\n\n  const { data: approvedInfluencers } = useQuery({\n    queryKey: ['approved-influencers'],\n    queryFn: async () =&gt; {\n      const response = await httpClient.get('/api/admin/owners', {\n        params: { type: 'Influencer', status: 'Approved' }\n      })\n      return response.data\n    }\n  })\n\n  const handleAddInfluencer = async (influencerId: number) =&gt; {\n    try {\n      await httpClient.post(`/api/admin/videos/${videoId}/add-influencer`, {\n        influencerId\n      })\n      toast.success('Influencer vinculado!')\n    } catch (error: any) {\n      toast.error(error.response?.data?.error || 'Erro ao vincular')\n    }\n  }\n\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Vincular Influencers ao V\u00eddeo&lt;/h1&gt;\n\n      &lt;table&gt;\n        &lt;thead&gt;\n          &lt;tr&gt;\n            &lt;th&gt;Nome&lt;/th&gt;\n            &lt;th&gt;Email&lt;/th&gt;\n            &lt;th&gt;Status KYC&lt;/th&gt;\n            &lt;th&gt;A\u00e7\u00e3o&lt;/th&gt;\n          &lt;/tr&gt;\n        &lt;/thead&gt;\n        &lt;tbody&gt;\n          {approvedInfluencers?.map(influencer =&gt; (\n            &lt;tr key={influencer.id}&gt;\n              &lt;td&gt;{influencer.name}&lt;/td&gt;\n              &lt;td&gt;{influencer.email}&lt;/td&gt;\n              &lt;td&gt;\n                &lt;span className=\"badge success\"&gt;Aprovado&lt;/span&gt;\n              &lt;/td&gt;\n              &lt;td&gt;\n                &lt;button onClick={() =&gt; handleAddInfluencer(influencer.id)}&gt;\n                  Vincular\n                &lt;/button&gt;\n              &lt;/td&gt;\n            &lt;/tr&gt;\n          ))}\n        &lt;/tbody&gt;\n      &lt;/table&gt;\n    &lt;/div&gt;\n  )\n}\n</code></pre></p> <p>Backend: <pre><code>app.MapPost(\"/api/admin/videos/{videoId:long}/add-influencer\", async (\n    long videoId,\n    AddInfluencerDto dto,\n    ApplicationDbContext context) =&gt;\n{\n    // Verificar se \u00e9 influencer com KYC aprovado\n    var owner = await context.Owners\n        .FirstOrDefaultAsync(o =&gt; o.Id == dto.InfluencerId &amp;&amp;\n                                  o.Type == OwnerTypeEnum.Influencer &amp;&amp;\n                                  o.SubAccountStatus == OwnerSubAccountStatusEnum.Approved);\n\n    if (owner == null)\n    {\n        return Results.BadRequest(new \n        { \n            error = \"Influencer n\u00e3o encontrado ou KYC n\u00e3o aprovado\" \n        });\n    }\n\n    // Verificar se j\u00e1 est\u00e1 vinculado\n    var exists = await context.OwnerVideos\n        .AnyAsync(ov =&gt; ov.VideoId == videoId &amp;&amp; ov.OwnerId == dto.InfluencerId);\n\n    if (exists)\n    {\n        return Results.BadRequest(new \n        { \n            error = \"Influencer j\u00e1 vinculado a este v\u00eddeo\" \n        });\n    }\n\n    var ownerVideo = new OwnerVideo\n    {\n        VideoId = videoId,\n        OwnerId = dto.InfluencerId,\n        CreatedAt = DateTime.UtcNow\n    };\n\n    await context.OwnerVideos.AddAsync(ownerVideo);\n    await context.SaveChangesAsync();\n\n    return Results.Ok(ownerVideo);\n})\n.RequireAuthorization(\"Admin\");\n</code></pre></p>"},{"location":"casos-de-uso/admin-gerencia-plataforma/#5-ver-relatorios-de-vendas","title":"5. Ver Relat\u00f3rios de Vendas","text":"<p>Frontend: <pre><code>// pages/Admin/SalesReport.tsx\nconst SalesReport = () =&gt; {\n  const { data: report } = useQuery({\n    queryKey: ['sales-report'],\n    queryFn: async () =&gt; {\n      const response = await httpClient.get('/api/admin/reports/sales')\n      return response.data\n    }\n  })\n\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Relat\u00f3rio de Vendas&lt;/h1&gt;\n\n      &lt;div className=\"metrics\"&gt;\n        &lt;Card&gt;\n          &lt;h3&gt;Total de Vendas&lt;/h3&gt;\n          &lt;p&gt;{report.totalOrders}&lt;/p&gt;\n        &lt;/Card&gt;\n\n        &lt;Card&gt;\n          &lt;h3&gt;Faturamento Total&lt;/h3&gt;\n          &lt;p&gt;R$ {report.totalRevenue.toFixed(2)}&lt;/p&gt;\n        &lt;/Card&gt;\n\n        &lt;Card&gt;\n          &lt;h3&gt;Comiss\u00e3o Plataforma&lt;/h3&gt;\n          &lt;p&gt;R$ {report.platformCommission.toFixed(2)}&lt;/p&gt;\n        &lt;/Card&gt;\n      &lt;/div&gt;\n\n      &lt;h2&gt;Top V\u00eddeos&lt;/h2&gt;\n      &lt;table&gt;\n        &lt;thead&gt;\n          &lt;tr&gt;\n            &lt;th&gt;V\u00eddeo&lt;/th&gt;\n            &lt;th&gt;Vendas&lt;/th&gt;\n            &lt;th&gt;Faturamento&lt;/th&gt;\n          &lt;/tr&gt;\n        &lt;/thead&gt;\n        &lt;tbody&gt;\n          {report.topVideos?.map(video =&gt; (\n            &lt;tr key={video.id}&gt;\n              &lt;td&gt;{video.title}&lt;/td&gt;\n              &lt;td&gt;{video.sales}&lt;/td&gt;\n              &lt;td&gt;R$ {video.revenue.toFixed(2)}&lt;/td&gt;\n            &lt;/tr&gt;\n          ))}\n        &lt;/tbody&gt;\n      &lt;/table&gt;\n    &lt;/div&gt;\n  )\n}\n</code></pre></p>"},{"location":"casos-de-uso/admin-gerencia-plataforma/#regra-especial-promoter-percentage-0","title":"Regra Especial: Promoter Percentage = 0%","text":"<p>Se <code>promoter_percentage = 0%</code>:</p> <ul> <li>\u274c V\u00eddeo N\u00c3O aparece para promoters gerarem links</li> <li>\u2705 V\u00eddeo aparece normalmente para usu\u00e1rios comprarem</li> <li>\u2705 Se comprado sem promoter, owner recebe 100% - platform%</li> </ul> <p>Exemplo:</p> <pre><code>{\n  \"platformPercentage\": 20,\n  \"ownerPercentage\": 80,\n  \"promoterPercentage\": 0\n}\n</code></pre> <p>Query para filtrar v\u00eddeos com comiss\u00e3o: <pre><code>var videos = await _context.Videos\n    .Include(v =&gt; v.VideoRevenueConfig)\n    .Where(v =&gt; v.IsActive &amp;&amp; v.VideoRevenueConfig.PromoterPercentage &gt; 0)\n    .ToListAsync();\n</code></pre></p>"},{"location":"casos-de-uso/admin-gerencia-plataforma/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<ul> <li>Perfil Admin</li> <li>Endpoint: Admin</li> <li>Gest\u00e3o de V\u00eddeos</li> <li>Processo KYC</li> </ul>"},{"location":"casos-de-uso/influencer-recebe-comissao/","title":"Caso de Uso: Influencer Recebe Comiss\u00e3o","text":""},{"location":"casos-de-uso/influencer-recebe-comissao/#historia","title":"Hist\u00f3ria","text":"<p>\"Como influencer, recebo comiss\u00e3o autom\u00e1tica a cada venda do meu v\u00eddeo, com o valor creditado diretamente na minha subconta Iugu.\"</p>"},{"location":"casos-de-uso/influencer-recebe-comissao/#atores","title":"Atores","text":"<ul> <li>Influencer (dono do v\u00eddeo)</li> <li>Promoter (opcional, se venda via link de afiliado)</li> <li>Comprador (usu\u00e1rio que compra o v\u00eddeo)</li> <li>Sistema (Backend API + Iugu + Email API)</li> </ul>"},{"location":"casos-de-uso/influencer-recebe-comissao/#pre-condicoes","title":"Pr\u00e9-condi\u00e7\u00f5es","text":"<ol> <li>Influencer deve ter KYC aprovado (<code>SubAccountStatus = Approved</code>)</li> <li>V\u00eddeo deve estar ativo e dispon\u00edvel para venda</li> <li>V\u00eddeo deve ter comiss\u00f5es configuradas (<code>VideoRevenueConfig</code>)</li> <li>Influencer deve estar vinculado ao v\u00eddeo (<code>owner_videos</code>)</li> </ol>"},{"location":"casos-de-uso/influencer-recebe-comissao/#fluxo-principal","title":"Fluxo Principal","text":"<pre><code>sequenceDiagram\n    participant C as Comprador\n    participant F as Frontend\n    participant B as Backend\n    participant I as Iugu\n    participant DB as PostgreSQL\n    participant E as Email API\n\n    C-&gt;&gt;F: Compra v\u00eddeo\n    F-&gt;&gt;B: POST /api/orders\n    B-&gt;&gt;DB: Cria Order com split calculado\n    B-&gt;&gt;I: Cria Invoice com split\n    I--&gt;&gt;B: Invoice URL\n    B--&gt;&gt;F: Payment URL\n    F-&gt;&gt;C: Redireciona para Iugu\n\n    C-&gt;&gt;I: Paga via PIX/Cart\u00e3o\n    I-&gt;&gt;I: Processa pagamento\n    I-&gt;&gt;B: Webhook: invoice.paid\n\n    B-&gt;&gt;DB: Atualiza Payment (Paid)\n    B-&gt;&gt;DB: Cria 3 Incomes (Platform, Owner, Promoter)\n    DB--&gt;&gt;B: Incomes criados\n\n    B-&gt;&gt;DB: Cria Notification (Influencer)\n    B-&gt;&gt;DB: Cria Notification (Promoter)\n\n    E-&gt;&gt;DB: Processa notifica\u00e7\u00f5es\n    E-&gt;&gt;E: Envia emails/WhatsApp\n\n    Note over I: Iugu faz split autom\u00e1tico\n    Note over I: R$ vai para subcontas</code></pre>"},{"location":"casos-de-uso/influencer-recebe-comissao/#fluxo-passo-a-passo","title":"Fluxo Passo a Passo","text":""},{"location":"casos-de-uso/influencer-recebe-comissao/#1-video-e-vendido","title":"1. V\u00eddeo \u00e9 Vendido","text":"<p>Ver Caso de Uso: Compra de V\u00eddeo para detalhes completos.</p> <p>Resumo: - Comprador cria order - Sistema cria invoice no Iugu com split - Comprador paga - Webhook confirma pagamento</p>"},{"location":"casos-de-uso/influencer-recebe-comissao/#2-webhook-confirma-pagamento","title":"2. Webhook Confirma Pagamento","text":"<p>Backend: <pre><code>// WebHookEndpoint.cs\napp.MapPost(\"/api/webhooks/iugu\", async (\n    HttpRequest request,\n    PaymentService service) =&gt;\n{\n    var body = await new StreamReader(request.Body).ReadToEndAsync();\n    var webhook = JsonSerializer.Deserialize&lt;IuguWebhook&gt;(body);\n\n    if (webhook.Event == \"invoice.status_changed\" &amp;&amp; \n        webhook.Data.Status == \"paid\")\n    {\n        await service.HandleInvoiceStatusChangedAsync(webhook.Data);\n    }\n\n    return Results.Ok();\n});\n</code></pre></p>"},{"location":"casos-de-uso/influencer-recebe-comissao/#3-sistema-cria-incomes","title":"3. Sistema Cria Incomes","text":"<p>PaymentService: <pre><code>// PaymentService.cs\npublic async Task HandleInvoiceStatusChangedAsync(IuguInvoiceData data)\n{\n    var payment = await _context.Payments\n        .Include(p =&gt; p.Order)\n        .ThenInclude(o =&gt; o.Video)\n        .ThenInclude(v =&gt; v.OwnerVideos)\n        .ThenInclude(ov =&gt; ov.Owner)\n        .ThenInclude(o =&gt; o.User)\n        .FirstOrDefaultAsync(p =&gt; p.IuguInvoiceId == data.Id);\n\n    if (payment == null || payment.Status == PaymentStatusEnum.Paid)\n        return; // Idempot\u00eancia\n\n    using var transaction = await _context.Database.BeginTransactionAsync();\n\n    try\n    {\n        // Atualizar payment\n        payment.Status = PaymentStatusEnum.Paid;\n        payment.IuguPaidAt = DateTime.UtcNow;\n        payment.UpdatedAt = DateTime.UtcNow;\n\n        // Criar incomes\n        var incomes = new List&lt;Income&gt;();\n\n        // 1. Platform\n        incomes.Add(new Income\n        {\n            OrderId = payment.Order.Id,\n            OwnerId = null, // Platform n\u00e3o tem owner\n            Amount = payment.Order.PlatformAmount,\n            Type = IncomeTypeEnum.Platform,\n            Description = \"Comiss\u00e3o da plataforma\",\n            CreatedAt = DateTime.UtcNow\n        });\n\n        // 2. Owner (Influencer)\n        var owner = payment.Order.Video.OwnerVideos.First().Owner;\n        incomes.Add(new Income\n        {\n            OrderId = payment.Order.Id,\n            OwnerId = owner.Id,\n            Amount = payment.Order.OwnerAmount,\n            Type = IncomeTypeEnum.Owner,\n            Description = $\"Venda do v\u00eddeo: {payment.Order.Video.Title}\",\n            CreatedAt = DateTime.UtcNow\n        });\n\n        // 3. Promoter (se houver)\n        if (payment.Order.PromoterId.HasValue &amp;&amp; payment.Order.PromoterAmount &gt; 0)\n        {\n            incomes.Add(new Income\n            {\n                OrderId = payment.Order.Id,\n                OwnerId = payment.Order.PromoterId.Value,\n                Amount = payment.Order.PromoterAmount,\n                Type = IncomeTypeEnum.Promoter,\n                Description = $\"Comiss\u00e3o por divulga\u00e7\u00e3o: {payment.Order.Video.Title}\",\n                CreatedAt = DateTime.UtcNow\n            });\n        }\n\n        await _context.Incomes.AddRangeAsync(incomes);\n\n        // Criar notifica\u00e7\u00f5es\n        await CreateNotificationsAsync(payment, owner);\n\n        await _context.SaveChangesAsync();\n        await transaction.CommitAsync();\n\n        _logger.LogInformation(\"Payment {PaymentId} processed successfully. {IncomeCount} incomes created.\", \n            payment.Id, incomes.Count);\n    }\n    catch (Exception ex)\n    {\n        _logger.LogError(ex, \"Error processing payment {PaymentId}\", payment.Id);\n        await transaction.RollbackAsync();\n        throw;\n    }\n}\n\nprivate async Task CreateNotificationsAsync(Payment payment, Owner owner)\n{\n    var buyer = await _context.Users.FindAsync(payment.Order.UserId);\n\n    // Notifica\u00e7\u00e3o para comprador\n    await _context.Notifications.AddAsync(new Notification\n    {\n        Type = NotificationTypeEnum.PaymentConfirmed,\n        Channel = buyer.NotificationPreference ?? NotificationChannelEnum.Email,\n        Email = buyer.Email,\n        Phone = buyer.Telephone,\n        MetadataJson = JsonSerializer.Serialize(new\n        {\n            OrderId = payment.Order.Id,\n            VideoTitle = payment.Order.Video.Title,\n            Amount = payment.Order.Amount / 100m\n        }),\n        CreatedAt = DateTime.UtcNow\n    });\n\n    // Notifica\u00e7\u00e3o para influencer\n    await _context.Notifications.AddAsync(new Notification\n    {\n        Type = NotificationTypeEnum.NewSale,\n        Channel = owner.User.NotificationPreference ?? NotificationChannelEnum.Email,\n        Email = owner.User.Email,\n        Phone = owner.User.Telephone,\n        MetadataJson = JsonSerializer.Serialize(new\n        {\n            OrderId = payment.Order.Id,\n            VideoTitle = payment.Order.Video.Title,\n            BuyerName = $\"{buyer.FirstName} {buyer.LastName}\",\n            Commission = payment.Order.OwnerAmount / 100m\n        }),\n        CreatedAt = DateTime.UtcNow\n    });\n\n    // Notifica\u00e7\u00e3o para promoter (se houver)\n    if (payment.Order.PromoterId.HasValue)\n    {\n        var promoter = await _context.Owners\n            .Include(o =&gt; o.User)\n            .FirstAsync(o =&gt; o.Id == payment.Order.PromoterId.Value);\n\n        await _context.Notifications.AddAsync(new Notification\n        {\n            Type = NotificationTypeEnum.NewSale,\n            Channel = promoter.User.NotificationPreference ?? NotificationChannelEnum.Email,\n            Email = promoter.User.Email,\n            Phone = promoter.User.Telephone,\n            MetadataJson = JsonSerializer.Serialize(new\n            {\n                OrderId = payment.Order.Id,\n                VideoTitle = payment.Order.Video.Title,\n                BuyerName = $\"{buyer.FirstName} {buyer.LastName}\",\n                Commission = payment.Order.PromoterAmount / 100m\n            }),\n            CreatedAt = DateTime.UtcNow\n        });\n    }\n}\n</code></pre></p>"},{"location":"casos-de-uso/influencer-recebe-comissao/#4-influencer-ve-comissao-no-dashboard","title":"4. Influencer V\u00ea Comiss\u00e3o no Dashboard","text":"<p>Frontend: <pre><code>// pages/Influencer/InfluencerDashboard.tsx\nconst InfluencerDashboard = () =&gt; {\n  const { data: dashboard } = useQuery({\n    queryKey: ['influencer-dashboard'],\n    queryFn: async () =&gt; {\n      const response = await httpClient.get('/api/influencer/dashboard')\n      return response.data\n    }\n  })\n\n  const { data: sales } = useQuery({\n    queryKey: ['influencer-sales'],\n    queryFn: async () =&gt; {\n      const response = await httpClient.get('/api/influencer/sales')\n      return response.data\n    }\n  })\n\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Dashboard do Influencer&lt;/h1&gt;\n\n      &lt;div className=\"metrics\"&gt;\n        &lt;Card&gt;\n          &lt;h3&gt;Total de Vendas&lt;/h3&gt;\n          &lt;p className=\"value\"&gt;{dashboard.totalSales}&lt;/p&gt;\n        &lt;/Card&gt;\n\n        &lt;Card&gt;\n          &lt;h3&gt;Total de Comiss\u00f5es&lt;/h3&gt;\n          &lt;p className=\"value\"&gt;R$ {dashboard.totalEarnings.toFixed(2)}&lt;/p&gt;\n        &lt;/Card&gt;\n\n        &lt;Card&gt;\n          &lt;h3&gt;Comiss\u00e3o M\u00e9dia&lt;/h3&gt;\n          &lt;p className=\"value\"&gt;R$ {dashboard.averageCommission.toFixed(2)}&lt;/p&gt;\n        &lt;/Card&gt;\n      &lt;/div&gt;\n\n      &lt;h2&gt;Vendas Recentes&lt;/h2&gt;\n      &lt;table&gt;\n        &lt;thead&gt;\n          &lt;tr&gt;\n            &lt;th&gt;V\u00eddeo&lt;/th&gt;\n            &lt;th&gt;Comprador&lt;/th&gt;\n            &lt;th&gt;Valor Total&lt;/th&gt;\n            &lt;th&gt;Sua Comiss\u00e3o&lt;/th&gt;\n            &lt;th&gt;Data&lt;/th&gt;\n          &lt;/tr&gt;\n        &lt;/thead&gt;\n        &lt;tbody&gt;\n          {sales?.map(sale =&gt; (\n            &lt;tr key={sale.orderId}&gt;\n              &lt;td&gt;{sale.videoTitle}&lt;/td&gt;\n              &lt;td&gt;{sale.buyerName}&lt;/td&gt;\n              &lt;td&gt;R$ {sale.orderAmount.toFixed(2)}&lt;/td&gt;\n              &lt;td className=\"highlight\"&gt;R$ {sale.commission.toFixed(2)}&lt;/td&gt;\n              &lt;td&gt;{new Date(sale.paidAt).toLocaleDateString()}&lt;/td&gt;\n            &lt;/tr&gt;\n          ))}\n        &lt;/tbody&gt;\n      &lt;/table&gt;\n    &lt;/div&gt;\n  )\n}\n</code></pre></p> <p>Backend: <pre><code>// InfluencerEndpoints.cs\napp.MapGet(\"/api/influencer/dashboard\", async (\n    HttpRequest request,\n    ApplicationDbContext context) =&gt;\n{\n    var userId = GetUserIdFromToken(request);\n    var owner = await context.Owners.FirstAsync(o =&gt; o.UserId == userId);\n\n    var incomes = await context.Incomes\n        .Where(i =&gt; i.OwnerId == owner.Id &amp;&amp; i.Type == IncomeTypeEnum.Owner)\n        .ToListAsync();\n\n    return Results.Ok(new\n    {\n        TotalSales = incomes.Count,\n        TotalEarnings = incomes.Sum(i =&gt; i.Amount) / 100m,\n        AverageCommission = incomes.Any() \n            ? incomes.Average(i =&gt; i.Amount) / 100m \n            : 0\n    });\n});\n\napp.MapGet(\"/api/influencer/sales\", async (\n    HttpRequest request,\n    ApplicationDbContext context) =&gt;\n{\n    var userId = GetUserIdFromToken(request);\n    var owner = await context.Owners.FirstAsync(o =&gt; o.UserId == userId);\n\n    var sales = await context.Incomes\n        .Include(i =&gt; i.Order)\n        .ThenInclude(o =&gt; o.Video)\n        .Include(i =&gt; i.Order)\n        .ThenInclude(o =&gt; o.User)\n        .Include(i =&gt; i.Order)\n        .ThenInclude(o =&gt; o.Payment)\n        .Where(i =&gt; i.OwnerId == owner.Id &amp;&amp; i.Type == IncomeTypeEnum.Owner)\n        .OrderByDescending(i =&gt; i.CreatedAt)\n        .Select(i =&gt; new\n        {\n            OrderId = i.OrderId,\n            VideoTitle = i.Order.Video.Title,\n            BuyerName = $\"{i.Order.User.FirstName} {i.Order.User.LastName}\",\n            OrderAmount = i.Order.Amount / 100m,\n            Commission = i.Amount / 100m,\n            PaidAt = i.Order.Payment.IuguPaidAt\n        })\n        .ToListAsync();\n\n    return Results.Ok(sales);\n});\n</code></pre></p>"},{"location":"casos-de-uso/influencer-recebe-comissao/#tabelas-envolvidas","title":"Tabelas Envolvidas","text":""},{"location":"casos-de-uso/influencer-recebe-comissao/#orders","title":"orders","text":"<pre><code>-- Order criado ao comprar\nINSERT INTO orders (\n    id, user_id, video_id, promoter_id,\n    amount, platform_amount, owner_amount, promoter_amount,\n    created_at\n) VALUES (\n    789, 10, 123, 5,\n    10000,  -- R$ 100,00\n    2000,   -- R$ 20,00 (20%)\n    5000,   -- R$ 50,00 (50%)\n    3000,   -- R$ 30,00 (30%)\n    '2025-01-15 10:30:00'\n);\n</code></pre>"},{"location":"casos-de-uso/influencer-recebe-comissao/#payments","title":"payments","text":"<pre><code>-- Payment atualizado pelo webhook\nUPDATE payments\nSET status = 'Paid',\n    iugu_paid_at = '2025-01-15 11:00:00',\n    updated_at = '2025-01-15 11:00:00'\nWHERE id = 456;\n</code></pre>"},{"location":"casos-de-uso/influencer-recebe-comissao/#incomes","title":"incomes","text":"<pre><code>-- 3 incomes criados\n\n-- 1. Platform\nINSERT INTO incomes (order_id, owner_id, amount, type, description, created_at)\nVALUES (789, NULL, 2000, 'Platform', 'Comiss\u00e3o da plataforma', '2025-01-15 11:00:00');\n\n-- 2. Owner (Influencer)\nINSERT INTO incomes (order_id, owner_id, amount, type, description, created_at)\nVALUES (789, 15, 5000, 'Owner', 'Venda do v\u00eddeo: V\u00eddeo Exclusivo', '2025-01-15 11:00:00');\n\n-- 3. Promoter\nINSERT INTO incomes (order_id, owner_id, amount, type, description, created_at)\nVALUES (789, 5, 3000, 'Promoter', 'Comiss\u00e3o por divulga\u00e7\u00e3o: V\u00eddeo Exclusivo', '2025-01-15 11:00:00');\n</code></pre>"},{"location":"casos-de-uso/influencer-recebe-comissao/#split-no-iugu","title":"Split no Iugu","text":"<p>O Iugu faz o split automaticamente ao confirmar o pagamento:</p> <ul> <li>20% (R$ 20,00) \u2192 Conta master (plataforma)</li> <li>50% (R$ 50,00) \u2192 Subconta do influencer</li> <li>30% (R$ 30,00) \u2192 Subconta do promoter</li> </ul> <p>Importante: O dinheiro vai diretamente para as subcontas, n\u00e3o passa pela plataforma.</p>"},{"location":"casos-de-uso/influencer-recebe-comissao/#exemplo-de-notificacao","title":"Exemplo de Notifica\u00e7\u00e3o","text":""},{"location":"casos-de-uso/influencer-recebe-comissao/#email-para-influencer","title":"Email para Influencer","text":"<pre><code>\ud83d\udcb0 Nova Venda!\n\nParab\u00e9ns! Voc\u00ea recebeu uma nova comiss\u00e3o:\n\n\ud83d\udcf9 V\u00eddeo: V\u00eddeo Exclusivo\n\ud83d\udc64 Comprador: Jo\u00e3o Silva\n\ud83d\udcb5 Sua comiss\u00e3o: R$ 50,00\n\nAcesse seu dashboard: https://amasso.com.br/dashboard\n\n_Amasso - Plataforma de V\u00eddeos Exclusivos_\n</code></pre>"},{"location":"casos-de-uso/influencer-recebe-comissao/#regras-de-negocio","title":"Regras de Neg\u00f3cio","text":"<ol> <li>Split autom\u00e1tico: Iugu distribui valores nas subcontas</li> <li>3 incomes sempre: Platform, Owner, Promoter (se houver)</li> <li>Notifica\u00e7\u00e3o imediata: Email/WhatsApp ao confirmar pagamento</li> <li>Sem promoter: Owner recebe owner% + promoter%</li> <li>Idempot\u00eancia: Webhook pode chegar m\u00faltiplas vezes</li> <li>KYC obrigat\u00f3rio: Sem KYC aprovado, n\u00e3o pode receber</li> </ol>"},{"location":"casos-de-uso/influencer-recebe-comissao/#queries-uteis","title":"Queries \u00dateis","text":""},{"location":"casos-de-uso/influencer-recebe-comissao/#total-de-comissoes-do-influencer","title":"Total de comiss\u00f5es do influencer","text":"<pre><code>SELECT \n    SUM(amount) / 100.0 as total_commission\nFROM incomes\nWHERE owner_id = 15\n  AND type = 'Owner';\n</code></pre>"},{"location":"casos-de-uso/influencer-recebe-comissao/#vendas-por-video","title":"Vendas por v\u00eddeo","text":"<pre><code>SELECT \n    v.title,\n    COUNT(*) as sales,\n    SUM(i.amount) / 100.0 as total_commission\nFROM incomes i\nJOIN orders o ON i.order_id = o.id\nJOIN videos v ON o.video_id = v.id\nWHERE i.owner_id = 15\n  AND i.type = 'Owner'\nGROUP BY v.id, v.title\nORDER BY sales DESC;\n</code></pre>"},{"location":"casos-de-uso/influencer-recebe-comissao/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<ul> <li>Perfil Influencer</li> <li>Split de Pagamento</li> <li>Webhooks Iugu</li> <li>Tabela: incomes</li> </ul>"},{"location":"casos-de-uso/promoter-aprovacao-kyc/","title":"Caso de Uso: Promoter - Aprova\u00e7\u00e3o KYC","text":""},{"location":"casos-de-uso/promoter-aprovacao-kyc/#historia","title":"Hist\u00f3ria","text":"<p>\"Como promoter, preciso ter meu KYC aprovado para poder operar na plataforma e receber comiss\u00f5es atrav\u00e9s de minha subconta Iugu.\"</p>"},{"location":"casos-de-uso/promoter-aprovacao-kyc/#atores","title":"Atores","text":"<ul> <li>Promoter (usu\u00e1rio que deseja ser afiliado)</li> <li>Admin (aprova/rejeita documentos)</li> <li>Sistema (Backend API + Iugu)</li> </ul>"},{"location":"casos-de-uso/promoter-aprovacao-kyc/#pre-condicoes","title":"Pr\u00e9-condi\u00e7\u00f5es","text":"<ol> <li>Promoter deve estar logado</li> <li>Promoter deve ter tipo de usu\u00e1rio <code>Promoter</code></li> </ol>"},{"location":"casos-de-uso/promoter-aprovacao-kyc/#fluxo-principal","title":"Fluxo Principal","text":"<pre><code>stateDiagram-v2\n    [*] --&gt; NotStarted: Promoter criado\n    NotStarted --&gt; Pending: Envia documentos\n    Pending --&gt; Approved: Admin aprova\n    Pending --&gt; Rejected: Admin rejeita\n    Rejected --&gt; Pending: Reenvia documentos\n    Approved --&gt; [*]: Pode operar\n\n    note right of Pending\n        Subconta Iugu criada\n        Aguarda revis\u00e3o admin\n    end note\n\n    note right of Approved\n        Pode gerar links\n        Pode receber comiss\u00f5es\n    end note\n\n    note right of Rejected\n        Deve corrigir documentos\n        e reenviar\n    end note</code></pre>"},{"location":"casos-de-uso/promoter-aprovacao-kyc/#enum-ownersubaccountstatusenum","title":"Enum: OwnerSubAccountStatusEnum","text":"<pre><code>public enum OwnerSubAccountStatusEnum\n{\n    NotStarted,  // Ainda n\u00e3o enviou documentos\n    Pending,     // Aguardando aprova\u00e7\u00e3o\n    Approved,    // Aprovado, pode operar\n    Rejected     // Rejeitado, deve reenviar\n}\n</code></pre>"},{"location":"casos-de-uso/promoter-aprovacao-kyc/#fluxo-passo-a-passo","title":"Fluxo Passo a Passo","text":""},{"location":"casos-de-uso/promoter-aprovacao-kyc/#1-promoter-envia-documentos","title":"1. Promoter Envia Documentos","text":"<p>Frontend: <pre><code>// pages/Owner/KycSubmission.tsx\nconst KycSubmission = () =&gt; {\n  const { register, handleSubmit, formState: { errors } } = useForm&lt;KycForm&gt;()\n  const [isSubmitting, setIsSubmitting] = useState(false)\n\n  const onSubmit = async (data: KycForm) =&gt; {\n    setIsSubmitting(true)\n\n    try {\n      const formData = new FormData()\n\n      // Dados pessoais\n      formData.append('cpf', data.cpf)\n      formData.append('rg', data.rg)\n      formData.append('birthDate', data.birthDate)\n\n      // Endere\u00e7o\n      formData.append('addressStreet', data.addressStreet)\n      formData.append('addressNumber', data.addressNumber)\n      formData.append('addressCity', data.addressCity)\n      formData.append('addressState', data.addressState)\n      formData.append('addressZipcode', data.addressZipcode)\n\n      // Dados banc\u00e1rios\n      formData.append('bankCode', data.bankCode)\n      formData.append('bankAgency', data.bankAgency)\n      formData.append('bankAccount', data.bankAccount)\n      formData.append('bankAccountType', data.bankAccountType)\n\n      // Documentos (arquivos)\n      formData.append('cpfFile', data.cpfFile[0])\n      formData.append('rgFile', data.rgFile[0])\n      formData.append('addressProofFile', data.addressProofFile[0])\n      formData.append('selfieFile', data.selfieFile[0])\n\n      await httpClient.post('/api/owners/kyc', formData, {\n        headers: { 'Content-Type': 'multipart/form-data' }\n      })\n\n      toast.success('Documentos enviados! Aguarde aprova\u00e7\u00e3o.')\n      navigate('/dashboard')\n    } catch (error: any) {\n      toast.error(error.response?.data?.error || 'Erro ao enviar documentos')\n    } finally {\n      setIsSubmitting(false)\n    }\n  }\n\n  return (\n    &lt;form onSubmit={handleSubmit(onSubmit)}&gt;\n      &lt;h1&gt;Enviar Documentos KYC&lt;/h1&gt;\n\n      {/* Formul\u00e1rio completo */}\n\n      &lt;button type=\"submit\" disabled={isSubmitting}&gt;\n        {isSubmitting ? 'Enviando...' : 'Enviar Documentos'}\n      &lt;/button&gt;\n    &lt;/form&gt;\n  )\n}\n</code></pre></p> <p>Backend: <pre><code>// OwnerEndpoints.cs\napp.MapPost(\"/api/owners/kyc\", async (\n    HttpRequest request,\n    OwnerService service,\n    ICloudinaryService cloudinary,\n    IIuguService iugu) =&gt;\n{\n    var userId = GetUserIdFromToken(request);\n    var form = await request.ReadFormAsync();\n\n    // 1. Upload documentos para Cloudinary\n    var cpfUrl = await cloudinary.UploadAsync(form.Files[\"cpfFile\"]);\n    var rgUrl = await cloudinary.UploadAsync(form.Files[\"rgFile\"]);\n    var addressProofUrl = await cloudinary.UploadAsync(form.Files[\"addressProofFile\"]);\n    var selfieUrl = await cloudinary.UploadAsync(form.Files[\"selfieFile\"]);\n\n    var dto = new SubmitKycDto\n    {\n        Cpf = form[\"cpf\"],\n        Rg = form[\"rg\"],\n        BirthDate = DateTime.Parse(form[\"birthDate\"]),\n        AddressStreet = form[\"addressStreet\"],\n        AddressNumber = form[\"addressNumber\"],\n        AddressCity = form[\"addressCity\"],\n        AddressState = form[\"addressState\"],\n        AddressZipcode = form[\"addressZipcode\"],\n        BankCode = form[\"bankCode\"],\n        BankAgency = form[\"bankAgency\"],\n        BankAccount = form[\"bankAccount\"],\n        BankAccountType = form[\"bankAccountType\"],\n        DocumentCpfUrl = cpfUrl,\n        DocumentRgUrl = rgUrl,\n        DocumentAddressProofUrl = addressProofUrl,\n        DocumentSelfieUrl = selfieUrl\n    };\n\n    var owner = await service.SubmitKycAsync(userId, dto, iugu);\n\n    return Results.Ok(new\n    {\n        OwnerId = owner.Id,\n        IuguAccountId = owner.IuguAccountId,\n        SubAccountStatus = owner.SubAccountStatus,\n        Message = \"Documentos enviados com sucesso! Aguarde aprova\u00e7\u00e3o.\"\n    });\n})\n.RequireAuthorization()\n.DisableAntiforgery()\n.WithName(\"SubmitKyc\");\n</code></pre></p> <p>Service: <pre><code>// OwnerService.cs\npublic async Task&lt;Owner&gt; SubmitKycAsync(\n    long userId, \n    SubmitKycDto dto, \n    IIuguService iugu)\n{\n    var user = await _context.Users.FindAsync(userId);\n\n    // Verificar tipo\n    if (user.Type != UserTypeEnum.Promoter &amp;&amp; \n        user.Type != UserTypeEnum.Influencer)\n    {\n        throw new InvalidOperationException(\n            \"Apenas Promoters e Influencers podem enviar KYC\");\n    }\n\n    var owner = await _context.Owners\n        .FirstOrDefaultAsync(o =&gt; o.UserId == userId);\n\n    if (owner == null)\n    {\n        owner = new Owner\n        {\n            UserId = userId,\n            Type = user.Type == UserTypeEnum.Promoter \n                ? OwnerTypeEnum.Promoter \n                : OwnerTypeEnum.Influencer,\n            CreatedAt = DateTime.UtcNow\n        };\n\n        await _context.Owners.AddAsync(owner);\n        await _context.SaveChangesAsync();\n    }\n\n    // Atualizar dados\n    owner.CpfCnpj = dto.Cpf;\n    owner.Rg = dto.Rg;\n    owner.BirthDate = dto.BirthDate;\n    owner.AddressStreet = dto.AddressStreet;\n    owner.AddressNumber = dto.AddressNumber;\n    owner.AddressCity = dto.AddressCity;\n    owner.AddressState = dto.AddressState;\n    owner.AddressZipcode = dto.AddressZipcode;\n    owner.BankCode = dto.BankCode;\n    owner.BankAgency = dto.BankAgency;\n    owner.BankAccount = dto.BankAccount;\n    owner.BankAccountType = dto.BankAccountType;\n    owner.DocumentCpfUrl = dto.DocumentCpfUrl;\n    owner.DocumentRgUrl = dto.DocumentRgUrl;\n    owner.DocumentAddressProofUrl = dto.DocumentAddressProofUrl;\n    owner.DocumentSelfieUrl = dto.DocumentSelfieUrl;\n\n    // Criar subconta Iugu (se n\u00e3o existe)\n    if (string.IsNullOrEmpty(owner.IuguAccountId))\n    {\n        var subAccount = await iugu.CreateSubAccountAsync(new\n        {\n            Name = $\"{user.FirstName} {user.LastName}\",\n            Email = user.Email,\n            Cpf = dto.Cpf\n        });\n\n        owner.IuguAccountId = subAccount.AccountId;\n        owner.IuguLiveApiToken = subAccount.LiveApiToken;\n        owner.IuguTestApiToken = subAccount.TestApiToken;\n    }\n    else\n    {\n        // Atualizar subconta existente\n        await iugu.UpdateSubAccountAsync(owner.IuguAccountId, new\n        {\n            Name = $\"{user.FirstName} {user.LastName}\",\n            Cpf = dto.Cpf\n        });\n    }\n\n    owner.SubAccountStatus = OwnerSubAccountStatusEnum.Pending;\n    owner.UpdatedAt = DateTime.UtcNow;\n\n    await _context.SaveChangesAsync();\n\n    _logger.LogInformation(\"KYC submitted for owner {OwnerId}\", owner.Id);\n\n    return owner;\n}\n</code></pre></p>"},{"location":"casos-de-uso/promoter-aprovacao-kyc/#2-admin-revisa-documentos","title":"2. Admin Revisa Documentos","text":"<p>Frontend: <pre><code>// pages/Admin/KycApprovals.tsx\nconst KycApprovals = () =&gt; {\n  const { data: pendingKyc, refetch } = useQuery({\n    queryKey: ['pending-kyc'],\n    queryFn: async () =&gt; {\n      const response = await httpClient.get('/api/admin/kyc/pending')\n      return response.data\n    }\n  })\n\n  const handleApprove = async (ownerId: number) =&gt; {\n    if (!confirm('Aprovar este KYC?')) return\n\n    try {\n      await httpClient.post(`/api/admin/kyc/${ownerId}/approve`)\n      toast.success('KYC aprovado!')\n      refetch()\n    } catch (error) {\n      toast.error('Erro ao aprovar KYC')\n    }\n  }\n\n  const handleReject = async (ownerId: number) =&gt; {\n    const reason = prompt('Motivo da rejei\u00e7\u00e3o:')\n    if (!reason) return\n\n    try {\n      await httpClient.post(`/api/admin/kyc/${ownerId}/reject`, { reason })\n      toast.success('KYC rejeitado')\n      refetch()\n    } catch (error) {\n      toast.error('Erro ao rejeitar KYC')\n    }\n  }\n\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;KYC Pendentes de Aprova\u00e7\u00e3o&lt;/h1&gt;\n\n      &lt;table&gt;\n        &lt;thead&gt;\n          &lt;tr&gt;\n            &lt;th&gt;Nome&lt;/th&gt;\n            &lt;th&gt;Tipo&lt;/th&gt;\n            &lt;th&gt;CPF&lt;/th&gt;\n            &lt;th&gt;Documentos&lt;/th&gt;\n            &lt;th&gt;A\u00e7\u00f5es&lt;/th&gt;\n          &lt;/tr&gt;\n        &lt;/thead&gt;\n        &lt;tbody&gt;\n          {pendingKyc?.map(kyc =&gt; (\n            &lt;tr key={kyc.ownerId}&gt;\n              &lt;td&gt;{kyc.userName}&lt;/td&gt;\n              &lt;td&gt;{kyc.type}&lt;/td&gt;\n              &lt;td&gt;{kyc.cpf}&lt;/td&gt;\n              &lt;td&gt;\n                &lt;button onClick={() =&gt; window.open(kyc.documents.cpfUrl)}&gt;\n                  Ver CPF\n                &lt;/button&gt;\n                &lt;button onClick={() =&gt; window.open(kyc.documents.rgUrl)}&gt;\n                  Ver RG\n                &lt;/button&gt;\n                &lt;button onClick={() =&gt; window.open(kyc.documents.addressProofUrl)}&gt;\n                  Ver Comprovante\n                &lt;/button&gt;\n                &lt;button onClick={() =&gt; window.open(kyc.documents.selfieUrl)}&gt;\n                  Ver Selfie\n                &lt;/button&gt;\n              &lt;/td&gt;\n              &lt;td&gt;\n                &lt;button \n                  onClick={() =&gt; handleApprove(kyc.ownerId)}\n                  className=\"btn-success\"\n                &gt;\n                  Aprovar\n                &lt;/button&gt;\n                &lt;button \n                  onClick={() =&gt; handleReject(kyc.ownerId)}\n                  className=\"btn-danger\"\n                &gt;\n                  Rejeitar\n                &lt;/button&gt;\n              &lt;/td&gt;\n            &lt;/tr&gt;\n          ))}\n        &lt;/tbody&gt;\n      &lt;/table&gt;\n    &lt;/div&gt;\n  )\n}\n</code></pre></p>"},{"location":"casos-de-uso/promoter-aprovacao-kyc/#3-admin-aprova-kyc","title":"3. Admin Aprova KYC","text":"<p>Backend: <pre><code>// AdminEndpoints.cs\napp.MapPost(\"/api/admin/kyc/{id:long}/approve\", async (\n    long id,\n    AdminService service,\n    HttpRequest request) =&gt;\n{\n    var adminUserId = GetUserIdFromToken(request);\n\n    await service.ApproveKycAsync(id, adminUserId);\n\n    return Results.Ok(new\n    {\n        OwnerId = id,\n        Status = \"Approved\",\n        ApprovedAt = DateTime.UtcNow\n    });\n})\n.RequireAuthorization(\"Admin\")\n.WithName(\"ApproveKyc\");\n</code></pre></p> <p>Service: <pre><code>// AdminService.cs\npublic async Task ApproveKycAsync(long ownerId, long adminUserId)\n{\n    var owner = await _context.Owners\n        .Include(o =&gt; o.User)\n        .FirstAsync(o =&gt; o.Id == ownerId);\n\n    owner.SubAccountStatus = OwnerSubAccountStatusEnum.Approved;\n    owner.UpdatedAt = DateTime.UtcNow;\n\n    await _context.SaveChangesAsync();\n\n    // Criar notifica\u00e7\u00e3o\n    var notification = new Notification\n    {\n        Type = NotificationTypeEnum.KycApproved,\n        Channel = owner.User.NotificationPreference ?? NotificationChannelEnum.Email,\n        Email = owner.User.Email,\n        Phone = owner.User.Telephone,\n        MetadataJson = JsonSerializer.Serialize(new\n        {\n            OwnerType = owner.Type.ToString()\n        }),\n        CreatedAt = DateTime.UtcNow\n    };\n\n    await _context.Notifications.AddAsync(notification);\n    await _context.SaveChangesAsync();\n\n    _logger.LogInformation(\"KYC approved for owner {OwnerId} by admin {AdminUserId}\", \n        ownerId, adminUserId);\n}\n</code></pre></p>"},{"location":"casos-de-uso/promoter-aprovacao-kyc/#4-admin-rejeita-kyc-alternativo","title":"4. Admin Rejeita KYC (Alternativo)","text":"<p>Backend: <pre><code>app.MapPost(\"/api/admin/kyc/{id:long}/reject\", async (\n    long id,\n    RejectKycDto dto,\n    AdminService service,\n    HttpRequest request) =&gt;\n{\n    var adminUserId = GetUserIdFromToken(request);\n\n    await service.RejectKycAsync(id, dto.Reason, adminUserId);\n\n    return Results.Ok(new\n    {\n        OwnerId = id,\n        Status = \"Rejected\",\n        Reason = dto.Reason,\n        RejectedAt = DateTime.UtcNow\n    });\n})\n.RequireAuthorization(\"Admin\")\n.WithName(\"RejectKyc\");\n</code></pre></p> <p>Service: <pre><code>public async Task RejectKycAsync(long ownerId, string reason, long adminUserId)\n{\n    var owner = await _context.Owners\n        .Include(o =&gt; o.User)\n        .FirstAsync(o =&gt; o.Id == ownerId);\n\n    owner.SubAccountStatus = OwnerSubAccountStatusEnum.Rejected;\n    owner.UpdatedAt = DateTime.UtcNow;\n\n    await _context.SaveChangesAsync();\n\n    // Criar notifica\u00e7\u00e3o com motivo\n    var notification = new Notification\n    {\n        Type = NotificationTypeEnum.KycRejected,\n        Channel = owner.User.NotificationPreference ?? NotificationChannelEnum.Email,\n        Email = owner.User.Email,\n        Phone = owner.User.Telephone,\n        MetadataJson = JsonSerializer.Serialize(new\n        {\n            OwnerType = owner.Type.ToString(),\n            Reason = reason\n        }),\n        CreatedAt = DateTime.UtcNow\n    };\n\n    await _context.Notifications.AddAsync(notification);\n    await _context.SaveChangesAsync();\n\n    _logger.LogInformation(\"KYC rejected for owner {OwnerId} by admin {AdminUserId}. Reason: {Reason}\", \n        ownerId, adminUserId, reason);\n}\n</code></pre></p>"},{"location":"casos-de-uso/promoter-aprovacao-kyc/#documentos-necessarios","title":"Documentos Necess\u00e1rios","text":"<ol> <li>CPF: Frente e verso (imagem ou PDF)</li> <li>RG: Frente e verso (imagem ou PDF)</li> <li>Comprovante de Endere\u00e7o: M\u00e1ximo 3 meses (conta de luz, \u00e1gua, telefone)</li> <li>Selfie com Documento: Foto segurando RG ou CNH</li> </ol>"},{"location":"casos-de-uso/promoter-aprovacao-kyc/#restricoes-por-status","title":"Restri\u00e7\u00f5es por Status","text":""},{"location":"casos-de-uso/promoter-aprovacao-kyc/#notstarted","title":"NotStarted","text":"<ul> <li>\u274c N\u00e3o pode gerar links de afiliado</li> <li>\u274c N\u00e3o pode receber comiss\u00f5es</li> </ul>"},{"location":"casos-de-uso/promoter-aprovacao-kyc/#pending","title":"Pending","text":"<ul> <li>\u274c N\u00e3o pode gerar links de afiliado</li> <li>\u274c N\u00e3o pode receber comiss\u00f5es</li> <li>\u2705 Pode visualizar status</li> </ul>"},{"location":"casos-de-uso/promoter-aprovacao-kyc/#approved","title":"Approved","text":"<ul> <li>\u2705 Pode gerar links de afiliado</li> <li>\u2705 Pode receber comiss\u00f5es</li> <li>\u2705 Subconta Iugu ativa</li> </ul>"},{"location":"casos-de-uso/promoter-aprovacao-kyc/#rejected","title":"Rejected","text":"<ul> <li>\u274c N\u00e3o pode gerar links de afiliado</li> <li>\u274c N\u00e3o pode receber comiss\u00f5es</li> <li>\u2705 Pode reenviar documentos</li> </ul>"},{"location":"casos-de-uso/promoter-aprovacao-kyc/#regras-de-negocio","title":"Regras de Neg\u00f3cio","text":"<ol> <li>Apenas Promoter/Influencer: Outros tipos n\u00e3o podem enviar KYC</li> <li>Subconta autom\u00e1tica: Criada ao enviar documentos</li> <li>Reenvio: Pode reenviar quantas vezes necess\u00e1rio</li> <li>Notifica\u00e7\u00e3o: Email/WhatsApp ao aprovar/rejeitar</li> <li>Motivo obrigat\u00f3rio: Ao rejeitar, deve informar motivo</li> </ol>"},{"location":"casos-de-uso/promoter-aprovacao-kyc/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<ul> <li>Processo KYC</li> <li>Perfil Promoter</li> <li>Endpoint: Owner</li> <li>Endpoint: Admin</li> </ul>"},{"location":"casos-de-uso/promoter-gera-link/","title":"Caso de Uso: Promoter Gera Link de Afiliado","text":""},{"location":"casos-de-uso/promoter-gera-link/#historia","title":"Hist\u00f3ria","text":"<p>\"Como promoter, quero gerar links de afiliado para divulgar v\u00eddeos e receber comiss\u00f5es pelas vendas realizadas atrav\u00e9s dos meus links.\"</p>"},{"location":"casos-de-uso/promoter-gera-link/#atores","title":"Atores","text":"<ul> <li>Promoter (usu\u00e1rio com KYC aprovado)</li> <li>Sistema (Backend API)</li> </ul>"},{"location":"casos-de-uso/promoter-gera-link/#pre-condicoes","title":"Pr\u00e9-condi\u00e7\u00f5es","text":"<ol> <li>Promoter deve estar logado</li> <li>Promoter deve ter KYC aprovado (<code>SubAccountStatus = Approved</code>)</li> <li>V\u00eddeo deve ter comiss\u00e3o configurada (<code>promoter_percentage &gt; 0%</code>)</li> </ol>"},{"location":"casos-de-uso/promoter-gera-link/#fluxo-principal","title":"Fluxo Principal","text":"<pre><code>sequenceDiagram\n    participant P as Promoter\n    participant F as Frontend\n    participant B as Backend\n    participant DB as PostgreSQL\n\n    P-&gt;&gt;F: Acessa dashboard\n    F-&gt;&gt;B: GET /api/promoter/dashboard\n    B-&gt;&gt;DB: SELECT videos WHERE promoter_percentage &gt; 0\n    DB--&gt;&gt;B: Lista de v\u00eddeos\n    B--&gt;&gt;F: V\u00eddeos dispon\u00edveis\n    F--&gt;&gt;P: Exibe lista\n\n    P-&gt;&gt;F: Clica \"Gerar Link\" no v\u00eddeo\n    F-&gt;&gt;B: POST /api/promoter/affiliate-links {videoId}\n\n    B-&gt;&gt;DB: Verifica KYC status\n    DB--&gt;&gt;B: Approved\n\n    B-&gt;&gt;DB: Verifica comiss\u00e3o do v\u00eddeo\n    DB--&gt;&gt;B: promoter_percentage = 30%\n\n    B-&gt;&gt;DB: Verifica se link j\u00e1 existe\n    DB--&gt;&gt;B: N\u00e3o existe\n\n    B-&gt;&gt;DB: INSERT INTO video_affiliate_links\n    DB--&gt;&gt;B: Link criado\n\n    B--&gt;&gt;F: {uniqueCode, fullLink}\n    F-&gt;&gt;F: Copia link para clipboard\n    F--&gt;&gt;P: \"Link copiado!\"</code></pre>"},{"location":"casos-de-uso/promoter-gera-link/#fluxo-passo-a-passo","title":"Fluxo Passo a Passo","text":""},{"location":"casos-de-uso/promoter-gera-link/#1-promoter-acessa-dashboard","title":"1. Promoter Acessa Dashboard","text":"<p>Frontend: <pre><code>// pages/Promoter/PromoterDashboard.tsx\nconst PromoterDashboard = () =&gt; {\n  const { data: availableVideos } = useQuery({\n    queryKey: ['promoter-available-videos'],\n    queryFn: async () =&gt; {\n      const response = await httpClient.get('/api/videos', {\n        params: { promoterOnly: true }\n      })\n      return response.data\n    }\n  })\n\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;V\u00eddeos Dispon\u00edveis para Divulga\u00e7\u00e3o&lt;/h1&gt;\n      &lt;VideoGrid videos={availableVideos} /&gt;\n    &lt;/div&gt;\n  )\n}\n</code></pre></p> <p>Backend: <pre><code>// VideoEndpoints.cs\napp.MapGet(\"/api/videos\", async (\n    ApplicationDbContext context,\n    bool promoterOnly = false) =&gt;\n{\n    var query = context.Videos\n        .Include(v =&gt; v.VideoRevenueConfig)\n        .Where(v =&gt; v.IsActive);\n\n    // Filtrar apenas v\u00eddeos com comiss\u00e3o\n    if (promoterOnly)\n    {\n        query = query.Where(v =&gt; v.VideoRevenueConfig.PromoterPercentage &gt; 0);\n    }\n\n    var videos = await query.ToListAsync();\n\n    return Results.Ok(videos);\n});\n</code></pre></p>"},{"location":"casos-de-uso/promoter-gera-link/#2-promoter-clica-em-gerar-link","title":"2. Promoter Clica em \"Gerar Link\"","text":"<p>Frontend: <pre><code>// pages/Promoter/PromoterDashboard.tsx\nconst handleCreateLink = async (videoId: number) =&gt; {\n  try {\n    const response = await httpClient.post('/api/promoter/affiliate-links', {\n      videoId\n    })\n\n    const { fullLink } = response.data\n\n    // Copiar para clipboard\n    await navigator.clipboard.writeText(fullLink)\n\n    toast.success('Link copiado para \u00e1rea de transfer\u00eancia!')\n\n    // Atualizar lista\n    queryClient.invalidateQueries(['affiliate-links'])\n  } catch (error: any) {\n    const message = error.response?.data?.error || 'Erro ao gerar link'\n    toast.error(message)\n  }\n}\n\nreturn (\n  &lt;div className=\"video-card\"&gt;\n    &lt;img src={video.thumbImgUrl} alt={video.title} /&gt;\n    &lt;h3&gt;{video.title}&lt;/h3&gt;\n    &lt;p&gt;Comiss\u00e3o: {video.videoRevenueConfig.promoterPercentage}%&lt;/p&gt;\n    &lt;button onClick={() =&gt; handleCreateLink(video.id)}&gt;\n      Gerar Link de Afiliado\n    &lt;/button&gt;\n  &lt;/div&gt;\n)\n</code></pre></p>"},{"location":"casos-de-uso/promoter-gera-link/#3-sistema-verifica-permissoes","title":"3. Sistema Verifica Permiss\u00f5es","text":"<p>Backend: <pre><code>// PromoterEndpoint.cs\napp.MapPost(\"/api/promoter/affiliate-links\", async (\n    CreateAffiliateLinkDto dto,\n    HttpRequest request,\n    ApplicationDbContext context,\n    IConfiguration config) =&gt;\n{\n    var userId = GetUserIdFromToken(request);\n\n    // 1. Buscar owner do promoter\n    var owner = await context.Owners\n        .FirstOrDefaultAsync(o =&gt; o.UserId == userId);\n\n    if (owner == null)\n        return Results.BadRequest(new { error = \"Owner n\u00e3o encontrado\" });\n\n    // 2. Verificar KYC aprovado\n    if (owner.SubAccountStatus != OwnerSubAccountStatusEnum.Approved)\n    {\n        return Results.BadRequest(new \n        { \n            error = \"Seu KYC ainda n\u00e3o foi aprovado. Aguarde a an\u00e1lise.\" \n        });\n    }\n\n    // 3. Verificar comiss\u00e3o do v\u00eddeo\n    var video = await context.Videos\n        .Include(v =&gt; v.VideoRevenueConfig)\n        .FirstOrDefaultAsync(v =&gt; v.Id == dto.VideoId);\n\n    if (video == null)\n        return Results.NotFound(new { error = \"V\u00eddeo n\u00e3o encontrado\" });\n\n    if (video.VideoRevenueConfig.PromoterPercentage &lt;= 0)\n    {\n        return Results.BadRequest(new \n        { \n            error = \"Este v\u00eddeo n\u00e3o oferece comiss\u00e3o para promoters\" \n        });\n    }\n\n    // 4. Verificar se link j\u00e1 existe\n    var existingLink = await context.VideoAffiliateLinks\n        .FirstOrDefaultAsync(l =&gt; l.OwnerId == owner.Id &amp;&amp; \n                                  l.VideoId == dto.VideoId);\n\n    if (existingLink != null)\n    {\n        var baseUrl = config[\"App:BaseUrl\"];\n        return Results.Ok(new\n        {\n            Id = existingLink.Id,\n            VideoId = existingLink.VideoId,\n            UniqueCode = existingLink.UniqueCode,\n            FullLink = $\"{baseUrl}/videos/{existingLink.VideoId}?ref={existingLink.UniqueCode}\",\n            Message = \"Link j\u00e1 existe\"\n        });\n    }\n\n    // 5. Criar novo link\n    var link = new VideoAffiliateLink\n    {\n        OwnerId = owner.Id,\n        VideoId = dto.VideoId,\n        UniqueCode = GenerateUniqueCode(),\n        Clicks = 0,\n        CreatedAt = DateTime.UtcNow\n    };\n\n    await context.VideoAffiliateLinks.AddAsync(link);\n    await context.SaveChangesAsync();\n\n    var fullLink = $\"{config[\"App:BaseUrl\"]}/videos/{link.VideoId}?ref={link.UniqueCode}\";\n\n    return Results.Created($\"/api/promoter/affiliate-links/{link.Id}\", new\n    {\n        Id = link.Id,\n        VideoId = link.VideoId,\n        UniqueCode = link.UniqueCode,\n        FullLink = fullLink\n    });\n})\n.RequireAuthorization()\n.WithName(\"CreateAffiliateLink\");\n\nprivate static string GenerateUniqueCode()\n{\n    return Convert.ToBase64String(Guid.NewGuid().ToByteArray())\n        .Replace(\"+\", \"\").Replace(\"/\", \"\").Replace(\"=\", \"\")\n        .Substring(0, 8)\n        .ToUpper();\n}\n</code></pre></p>"},{"location":"casos-de-uso/promoter-gera-link/#4-promoter-divulga-o-link","title":"4. Promoter Divulga o Link","text":"<p>O promoter pode compartilhar o link em redes sociais, WhatsApp, email, etc:</p> <pre><code>https://amasso.com.br/videos/123?ref=ABC12345\n</code></pre>"},{"location":"casos-de-uso/promoter-gera-link/#5-usuario-clica-no-link","title":"5. Usu\u00e1rio Clica no Link","text":"<p>Quando um usu\u00e1rio clica no link, o frontend salva o <code>ref</code> no localStorage:</p> <pre><code>// pages/Videos/VideoDetail.tsx\nuseEffect(() =&gt; {\n  const params = new URLSearchParams(window.location.search)\n  const affiliateCode = params.get('ref')\n\n  if (affiliateCode) {\n    // Salvar por 30 dias\n    localStorage.setItem('affiliateRef', affiliateCode)\n    localStorage.setItem('affiliateRefExpiry', \n      String(Date.now() + 30 * 24 * 60 * 60 * 1000))\n\n    // Incrementar contador de cliques\n    httpClient.post(`/api/affiliate-links/${affiliateCode}/click`)\n  }\n}, [])\n</code></pre> <p>Backend (Incrementar Clicks): <pre><code>app.MapPost(\"/api/affiliate-links/{code}/click\", async (\n    string code,\n    ApplicationDbContext context) =&gt;\n{\n    var link = await context.VideoAffiliateLinks\n        .FirstOrDefaultAsync(l =&gt; l.UniqueCode == code);\n\n    if (link != null)\n    {\n        link.Clicks++;\n        await context.SaveChangesAsync();\n    }\n\n    return Results.Ok();\n})\n.AllowAnonymous();\n</code></pre></p>"},{"location":"casos-de-uso/promoter-gera-link/#6-usuario-compra-o-video","title":"6. Usu\u00e1rio Compra o V\u00eddeo","text":"<p>Ao comprar, o c\u00f3digo \u00e9 enviado:</p> <pre><code>const affiliateCode = localStorage.getItem('affiliateRef')\nconst expiry = localStorage.getItem('affiliateRefExpiry')\n\n// Verificar se ainda \u00e9 v\u00e1lido\nif (expiry &amp;&amp; Date.now() &lt; parseInt(expiry)) {\n  await orderApi.create({\n    videoId,\n    affiliateCode\n  })\n\n  // Limpar ap\u00f3s uso\n  localStorage.removeItem('affiliateRef')\n  localStorage.removeItem('affiliateRefExpiry')\n}\n</code></pre>"},{"location":"casos-de-uso/promoter-gera-link/#7-sistema-registra-comissao","title":"7. Sistema Registra Comiss\u00e3o","text":"<p>O <code>OrderService</code> registra a comiss\u00e3o automaticamente (ver Compra de V\u00eddeo).</p>"},{"location":"casos-de-uso/promoter-gera-link/#fluxos-alternativos","title":"Fluxos Alternativos","text":""},{"location":"casos-de-uso/promoter-gera-link/#71-kyc-nao-aprovado","title":"7.1. KYC N\u00e3o Aprovado","text":"<pre><code>graph LR\n    A[Promoter tenta gerar link] --&gt; B{KYC aprovado?}\n    B --&gt;|N\u00e3o| C[Erro: KYC pendente]\n    C --&gt; D[Redirecionar para /owner/kyc]</code></pre> <p>Response: <pre><code>{\n  \"error\": \"Seu KYC ainda n\u00e3o foi aprovado. Aguarde a an\u00e1lise.\"\n}\n</code></pre></p>"},{"location":"casos-de-uso/promoter-gera-link/#72-video-sem-comissao","title":"7.2. V\u00eddeo Sem Comiss\u00e3o","text":"<pre><code>{\n  \"error\": \"Este v\u00eddeo n\u00e3o oferece comiss\u00e3o para promoters\"\n}\n</code></pre>"},{"location":"casos-de-uso/promoter-gera-link/#73-link-ja-existe","title":"7.3. Link J\u00e1 Existe","text":"<p>Sistema retorna o link existente ao inv\u00e9s de criar novo:</p> <pre><code>{\n  \"id\": 456,\n  \"videoId\": 123,\n  \"uniqueCode\": \"ABC12345\",\n  \"fullLink\": \"https://amasso.com.br/videos/123?ref=ABC12345\",\n  \"message\": \"Link j\u00e1 existe\"\n}\n</code></pre>"},{"location":"casos-de-uso/promoter-gera-link/#regras-de-negocio","title":"Regras de Neg\u00f3cio","text":"<ol> <li>1 link por v\u00eddeo por promoter: N\u00e3o duplica links</li> <li>C\u00f3digo \u00fanico: 8 caracteres alfanum\u00e9ricos</li> <li>Validade: Link n\u00e3o expira</li> <li>Tracking de cliques: Incrementado automaticamente</li> <li>Expira\u00e7\u00e3o do ref: 30 dias no localStorage</li> <li>Comiss\u00e3o &gt; 0%: Apenas v\u00eddeos configurados</li> </ol>"},{"location":"casos-de-uso/promoter-gera-link/#dados-criados","title":"Dados Criados","text":""},{"location":"casos-de-uso/promoter-gera-link/#tabela-video_affiliate_links","title":"Tabela: video_affiliate_links","text":"<pre><code>INSERT INTO video_affiliate_links (\n    id,\n    owner_id,\n    video_id,\n    unique_code,\n    clicks,\n    created_at\n) VALUES (\n    456,\n    5,      -- Promoter owner\n    123,    -- Video ID\n    'ABC12345',\n    0,\n    '2025-01-15 10:00:00'\n);\n</code></pre>"},{"location":"casos-de-uso/promoter-gera-link/#metricas","title":"M\u00e9tricas","text":"<p>O promoter pode ver suas m\u00e9tricas no dashboard:</p> <pre><code>const { data: metrics } = useQuery({\n  queryKey: ['promoter-metrics'],\n  queryFn: async () =&gt; {\n    const response = await httpClient.get('/api/promoter/dashboard')\n    return response.data\n  }\n})\n\n// Exibir:\n// - Total de links gerados\n// - Total de cliques\n// - Total de convers\u00f5es (vendas)\n// - Taxa de convers\u00e3o\n// - Total de comiss\u00f5es\n</code></pre>"},{"location":"casos-de-uso/promoter-gera-link/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<ul> <li>Fluxo de Link de Afiliado</li> <li>Perfil Promoter</li> <li>Endpoint: Promoter</li> </ul>"},{"location":"casos-de-uso/usuario-compra-video/","title":"Caso de Uso: Compra de V\u00eddeo","text":""},{"location":"casos-de-uso/usuario-compra-video/#historia-do-usuario","title":"Hist\u00f3ria do Usu\u00e1rio","text":"<p>Como usu\u00e1rio da plataforma, Quero comprar um v\u00eddeo para poder assisti-lo, Para ter acesso ao conte\u00fado exclusivo do criador.</p>"},{"location":"casos-de-uso/usuario-compra-video/#atores","title":"Atores","text":"<ul> <li>Usu\u00e1rio (Default): Comprador do v\u00eddeo</li> <li>Promoter (opcional): Divulgador que criou link de afiliado</li> <li>Influencer/Owner: Criador do v\u00eddeo</li> <li>Plataforma: Amasso (conta master)</li> <li>Iugu: Gateway de pagamento</li> </ul>"},{"location":"casos-de-uso/usuario-compra-video/#pre-condicoes","title":"Pr\u00e9-condi\u00e7\u00f5es","text":"<ol> <li>\u2705 Usu\u00e1rio cadastrado e logado</li> <li>\u2705 V\u00eddeo dispon\u00edvel para venda (<code>is_active = true</code>, <code>release_date &lt;= today</code>)</li> <li>\u2705 V\u00eddeo tem configura\u00e7\u00e3o de comiss\u00f5es (<code>video_revenue_configs</code>)</li> <li>\u2705 Influencer tem KYC aprovado (se houver comiss\u00e3o para owner)</li> <li>\u2705 Promoter tem KYC aprovado (se compra via link de afiliado)</li> </ol>"},{"location":"casos-de-uso/usuario-compra-video/#fluxo-principal-com-link-de-afiliado","title":"Fluxo Principal (Com Link de Afiliado)","text":""},{"location":"casos-de-uso/usuario-compra-video/#diagrama-de-sequencia","title":"Diagrama de Sequ\u00eancia","text":"<pre><code>sequenceDiagram\n    participant U as Usu\u00e1rio\n    participant F as Frontend\n    participant B as Backend API\n    participant D as PostgreSQL\n    participant I as Iugu\n    participant E as Email API\n\n    Note over U: Via link de afiliado\n    U-&gt;&gt;F: Clica em link&lt;br/&gt;amasso.com?ref=ABC123\n    F-&gt;&gt;F: Salva c\u00f3digo do link no localStorage\n    F-&gt;&gt;F: Exibe v\u00eddeo\n\n    U-&gt;&gt;F: Clica \"Comprar\"\n    F-&gt;&gt;B: POST /api/orders&lt;br/&gt;{videoId: 1, affiliateLinkId: 5}\n\n    B-&gt;&gt;D: SELECT video WHERE id=1\n    B-&gt;&gt;D: SELECT video_revenue_config\n    B-&gt;&gt;D: SELECT owner (influencer)\n    B-&gt;&gt;D: SELECT promoter WHERE link_id=5\n\n    Note over B: Valida KYCs aprovados\n    B-&gt;&gt;B: Calcula split:&lt;br/&gt;Plataforma: 20% (R$20)&lt;br/&gt;Influencer: 50% (R$50)&lt;br/&gt;Promoter: 30% (R$30)\n\n    B-&gt;&gt;D: BEGIN TRANSACTION\n    B-&gt;&gt;D: INSERT INTO orders&lt;br/&gt;(user_id, video_id, promoter_id,&lt;br/&gt;amount, platform_amount,&lt;br/&gt;owner_amount, promoter_amount)\n\n    B-&gt;&gt;I: POST /v1/invoices&lt;br/&gt;{items, splits: [master, owner_sub, promoter_sub]}\n    I--&gt;&gt;B: {invoice_id, secure_url, status: pending}\n\n    B-&gt;&gt;D: INSERT INTO payments&lt;br/&gt;(order_id, iugu_invoice_id, status: Pending)\n    B-&gt;&gt;D: INSERT INTO notifications&lt;br/&gt;(type: OrderCreated)\n    B-&gt;&gt;D: COMMIT\n\n    B--&gt;&gt;F: {secureUrl: \"https://iugu.com/pay/...\"}\n    F--&gt;&gt;U: Redireciona para Iugu\n\n    U-&gt;&gt;I: Preenche dados do cart\u00e3o\n    U-&gt;&gt;I: Confirma pagamento\n    I-&gt;&gt;I: Valida cart\u00e3o\n    I-&gt;&gt;I: Cobra R$ 100\n    I-&gt;&gt;I: Executa split autom\u00e1tico\n\n    Note over I: Split executado:&lt;br/&gt;Master: R$20&lt;br/&gt;Sub Owner: R$50&lt;br/&gt;Sub Promoter: R$30\n\n    I-&gt;&gt;B: POST /api/webhook/iugu&lt;br/&gt;{event: invoice.paid, data: {...}}\n\n    B-&gt;&gt;B: Valida assinatura\n    B-&gt;&gt;D: BEGIN TRANSACTION\n    B-&gt;&gt;D: UPDATE payments&lt;br/&gt;SET status=Paid, paid_at=now\n    B-&gt;&gt;D: INSERT INTO incomes (3x)&lt;br/&gt;- Platform: R$20&lt;br/&gt;- Owner: R$50&lt;br/&gt;- Promoter: R$30\n    B-&gt;&gt;D: INSERT INTO notifications&lt;br/&gt;(type: PaymentConfirmed)\n    B-&gt;&gt;D: COMMIT\n\n    B--&gt;&gt;I: 200 OK\n    I--&gt;&gt;U: P\u00e1gina de confirma\u00e7\u00e3o\n\n    Note over E: Job agendado executa\n    E-&gt;&gt;D: SELECT notifications pendentes\n    E-&gt;&gt;U: Email: \"Compra confirmada!\"\n    E-&gt;&gt;U: WhatsApp: \"Seu v\u00eddeo est\u00e1 dispon\u00edvel\"\n\n    U-&gt;&gt;F: Acessa \"Meus V\u00eddeos\"\n    F-&gt;&gt;B: GET /api/orders/me\n    B-&gt;&gt;D: SELECT orders WHERE user_id=X&lt;br/&gt;AND payment.status=Paid\n    B--&gt;&gt;F: [{orderId, video, paidAt}]\n\n    U-&gt;&gt;F: Clica em \"Assistir\"\n    F-&gt;&gt;F: Abre player Cloudinary\n    U-&gt;&gt;U: Assiste ao v\u00eddeo</code></pre>"},{"location":"casos-de-uso/usuario-compra-video/#passo-a-passo-detalhado","title":"Passo a Passo Detalhado","text":""},{"location":"casos-de-uso/usuario-compra-video/#1-usuario-acessa-via-link-de-afiliado","title":"1. Usu\u00e1rio Acessa via Link de Afiliado","text":"<p>URL: <code>https://amasso.com.br/videos/1?ref=ABC123</code></p> <pre><code>// Frontend - Router intercepta query param\nconst VideoPage: React.FC = () =&gt; {\n  const { videoId } = useParams();\n  const [searchParams] = useSearchParams();\n  const affiliateCode = searchParams.get('ref');\n\n  useEffect(() =&gt; {\n    if (affiliateCode) {\n      // Salvar c\u00f3digo para usar na compra\n      localStorage.setItem('affiliateCode', affiliateCode);\n\n      // Registrar clique no link\n      affiliateApi.registerClick(affiliateCode);\n    }\n  }, [affiliateCode]);\n\n  // ... resto do componente\n};\n</code></pre> <pre><code>// Backend - Registrar clique\n// PromoterEndpoints.cs\ngroup.MapPost(\"/affiliate-links/{code}/click\", async (string code, Pay4TruDb db) =&gt;\n{\n    var link = await db.VideoAffiliateLinks\n        .FirstOrDefaultAsync(l =&gt; l.UniqueCode == code);\n\n    if (link != null)\n    {\n        link.Clicks++;\n        await db.SaveChangesAsync();\n    }\n\n    return Results.Ok();\n});\n</code></pre>"},{"location":"casos-de-uso/usuario-compra-video/#2-criar-pedido","title":"2. Criar Pedido","text":"<pre><code>// Frontend\nconst handleBuyVideo = async (videoId: number) =&gt; {\n  const affiliateCode = localStorage.getItem('affiliateCode');\n\n  try {\n    const order = await orderApi.create({\n      videoId,\n      affiliateCode // Se houver\n    });\n\n    // Redirecionar para URL de pagamento do Iugu\n    window.location.href = order.iuguSecureUrl;\n  } catch (error) {\n    if (error.response?.data?.message.includes('KYC')) {\n      toast.error('N\u00e3o foi poss\u00edvel processar. Entre em contato.');\n    } else {\n      toast.error('Erro ao criar pedido');\n    }\n  }\n};\n</code></pre> <pre><code>// Backend - OrderService.cs\npublic async Task&lt;CreateOrderResponseDto&gt; CreateOrderAsync(CreateOrderDto dto, long userId)\n{\n    // 1. Buscar dados do v\u00eddeo\n    var video = await _context.Videos\n        .Include(v =&gt; v.VideoRevenueConfig)\n        .Include(v =&gt; v.OwnerVideos)\n        .ThenInclude(ov =&gt; ov.Owner)\n        .FirstOrDefaultAsync(v =&gt; v.Id == dto.VideoId &amp;&amp; v.IsActive);\n\n    if (video == null)\n        throw new NotFoundException(\"V\u00eddeo n\u00e3o encontrado\");\n\n    // Verificar se v\u00eddeo est\u00e1 dispon\u00edvel para venda\n    if (video.ReleaseDate &gt; DateTime.Today)\n        throw new InvalidOperationException(\"V\u00eddeo ainda n\u00e3o foi lan\u00e7ado\");\n\n    if (video.ExpirationSaleDate.HasValue &amp;&amp; video.ExpirationSaleDate &lt; DateTime.Today)\n        throw new InvalidOperationException(\"Venda deste v\u00eddeo expirou\");\n\n    // 2. Verificar se usu\u00e1rio j\u00e1 comprou\n    var alreadyPurchased = await _context.Orders\n        .Include(o =&gt; o.Payment)\n        .AnyAsync(o =&gt; o.UserId == userId &amp;&amp; \n                      o.VideoId == dto.VideoId &amp;&amp;\n                      o.Payment.Status == PaymentStatusEnum.Paid);\n\n    if (alreadyPurchased)\n        throw new InvalidOperationException(\"Voc\u00ea j\u00e1 possui este v\u00eddeo\");\n\n    // 3. Buscar link de afiliado (se fornecido)\n    VideoAffiliateLink? affiliateLink = null;\n    Owner? promoter = null;\n\n    if (!string.IsNullOrEmpty(dto.AffiliateCode))\n    {\n        affiliateLink = await _context.VideoAffiliateLinks\n            .Include(l =&gt; l.Owner)\n            .FirstOrDefaultAsync(l =&gt; l.UniqueCode == dto.AffiliateCode &amp;&amp; \n                                     l.IsActive);\n\n        if (affiliateLink != null)\n        {\n            promoter = affiliateLink.Owner;\n\n            // Validar KYC do promoter\n            if (promoter.SubAccountStatus != OwnerSubAccountStatusEnum.Approved)\n            {\n                throw new InvalidOperationException(\n                    \"Promoter n\u00e3o tem KYC aprovado. N\u00e3o \u00e9 poss\u00edvel processar comiss\u00e3o.\");\n            }\n        }\n    }\n\n    // 4. Buscar owner (influencer)\n    var owner = video.OwnerVideos.First().Owner;\n\n    // Validar KYC do owner\n    if (owner.SubAccountStatus != OwnerSubAccountStatusEnum.Approved)\n    {\n        throw new InvalidOperationException(\n            \"Owner n\u00e3o tem KYC aprovado. N\u00e3o \u00e9 poss\u00edvel processar comiss\u00e3o.\");\n    }\n\n    // 5. Calcular valores\n    var config = video.VideoRevenueConfig;\n    var totalCents = (int)(video.Price * 100);\n\n    var platformCents = (int)(totalCents * config.PlatformPercentage / 100);\n    var ownerCents = (int)(totalCents * config.OwnerPercentage / 100);\n    var promoterCents = promoter != null \n        ? (int)(totalCents * config.PromoterPercentage / 100) \n        : 0;\n\n    // Ajustar arredondamento\n    var totalCalculated = platformCents + ownerCents + promoterCents;\n    if (totalCalculated != totalCents)\n    {\n        ownerCents += (totalCents - totalCalculated);\n    }\n\n    // 6. Criar Order (transa\u00e7\u00e3o)\n    using var transaction = await _context.Database.BeginTransactionAsync();\n\n    try\n    {\n        var order = new Order\n        {\n            UserId = userId,\n            VideoId = dto.VideoId,\n            PromoterId = promoter?.Id,\n            VideoAffiliateLinkId = affiliateLink?.Id,\n            Amount = totalCents,\n            PlatformAmount = platformCents,\n            OwnerAmount = ownerCents,\n            PromoterAmount = promoterCents,\n            CreatedAt = DateTime.UtcNow\n        };\n\n        await _context.Orders.AddAsync(order);\n        await _context.SaveChangesAsync();\n\n        // 7. Criar invoice no Iugu com split\n        var invoice = await _iuguService.CreateInvoiceWithSplitAsync(order, owner, promoter);\n\n        // 8. Criar Payment\n        var payment = new Payment\n        {\n            OrderId = order.Id,\n            IuguInvoiceId = invoice.Id,\n            IuguSecureUrl = invoice.SecureUrl,\n            Status = PaymentStatusEnum.Pending,\n            Amount = totalCents,\n            CreatedAt = DateTime.UtcNow\n        };\n\n        await _context.Payments.AddAsync(payment);\n\n        // 9. Criar Notification\n        var user = await _context.Users.FindAsync(userId);\n        var notification = new Notification\n        {\n            Type = NotificationTypeEnum.OrderCreated,\n            Channel = user.NotificationPreference,\n            MetadataJson = JsonSerializer.Serialize(new\n            {\n                Email = user.Email,\n                PhoneNumber = user.Telephone,\n                Name = user.FirstName,\n                VideoTitle = video.Title,\n                Amount = totalCents / 100m,\n                OrderId = order.Id,\n                Subject = \"Pedido criado - Aguardando pagamento\"\n            }),\n            IsActive = true,\n            CreatedAt = DateTime.UtcNow\n        };\n\n        await _context.Notifications.AddAsync(notification);\n\n        await _context.SaveChangesAsync();\n        await transaction.CommitAsync();\n\n        _logger.LogInformation(\n            \"Order criado: {OrderId}, User: {UserId}, Video: {VideoId}, Promoter: {PromoterId}\",\n            order.Id, userId, dto.VideoId, promoter?.Id);\n\n        return new CreateOrderResponseDto\n        {\n            OrderId = order.Id,\n            IuguSecureUrl = invoice.SecureUrl,\n            Amount = totalCents / 100m\n        };\n    }\n    catch (Exception ex)\n    {\n        await transaction.RollbackAsync();\n        _logger.LogError(ex, \"Erro ao criar order\");\n        throw;\n    }\n}\n</code></pre>"},{"location":"casos-de-uso/usuario-compra-video/#3-usuario-paga-no-iugu","title":"3. Usu\u00e1rio Paga no Iugu","text":"<p>O usu\u00e1rio \u00e9 redirecionado para <code>iugu_secure_url</code> e preenche dados de pagamento (cart\u00e3o, boleto ou Pix).</p>"},{"location":"casos-de-uso/usuario-compra-video/#4-webhook-confirma-pagamento","title":"4. Webhook Confirma Pagamento","text":"<pre><code>// WebHookEndpoint.cs\nprivate static async Task HandleInvoiceStatusChanged(\n    IuguWebhookDataDto data,\n    IPaymentService paymentService)\n{\n    if (data.Status == \"paid\")\n    {\n        await paymentService.ConfirmPaymentAsync(data.Id);\n    }\n}\n\n// PaymentService.cs - j\u00e1 documentado anteriormente\npublic async Task ConfirmPaymentAsync(string iuguInvoiceId)\n{\n    // ... c\u00f3digo completo na se\u00e7\u00e3o de webhooks\n    // Atualiza payment, cria incomes, cria notification\n}\n</code></pre>"},{"location":"casos-de-uso/usuario-compra-video/#5-usuario-acessa-video-comprado","title":"5. Usu\u00e1rio Acessa V\u00eddeo Comprado","text":"<pre><code>// Frontend - MyVideos.tsx\nexport const MyVideos: React.FC = () =&gt; {\n  const [orders, setOrders] = useState&lt;Order[]&gt;([]);\n\n  useEffect(() =&gt; {\n    const fetchOrders = async () =&gt; {\n      const data = await orderApi.getMyOrders();\n      setOrders(data.filter(o =&gt; o.payment.status === 'Paid'));\n    };\n    fetchOrders();\n  }, []);\n\n  const handleWatchVideo = (order: Order) =&gt; {\n    navigate(`/watch/${order.video.id}`);\n  };\n\n  return (\n    &lt;Grid container spacing={2}&gt;\n      {orders.map(order =&gt; (\n        &lt;Grid item xs={12} md={4} key={order.id}&gt;\n          &lt;VideoCard \n            video={order.video}\n            showBuyButton={false}\n            actionButton={(\n              &lt;Button onClick={() =&gt; handleWatchVideo(order)}&gt;\n                Assistir\n              &lt;/Button&gt;\n            )}\n          /&gt;\n        &lt;/Grid&gt;\n      ))}\n    &lt;/Grid&gt;\n  );\n};\n</code></pre> <pre><code>// Backend - OrderEndpoints.cs\ngroup.MapGet(\"/me\", GetMyOrders).RequireAuthorization();\n\nprivate static async Task&lt;IResult&gt; GetMyOrders(\n    HttpContext context,\n    Pay4TruDb db)\n{\n    var userId = GetUserIdFromToken(context);\n\n    var orders = await db.Orders\n        .Include(o =&gt; o.Video)\n        .Include(o =&gt; o.Payment)\n        .Where(o =&gt; o.UserId == userId)\n        .OrderByDescending(o =&gt; o.CreatedAt)\n        .Select(o =&gt; new OrderDto\n        {\n            Id = o.Id,\n            VideoId = o.Video.Id,\n            VideoTitle = o.Video.Title,\n            VideoThumbUrl = o.Video.ThumbImgUrl,\n            Amount = o.Amount / 100m,\n            PaymentStatus = o.Payment.Status.ToString(),\n            PurchasedAt = o.CreatedAt,\n            CanWatch = o.Payment.Status == PaymentStatusEnum.Paid\n        })\n        .ToListAsync();\n\n    return Results.Ok(orders);\n}\n</code></pre>"},{"location":"casos-de-uso/usuario-compra-video/#fluxo-alternativo-sem-link-de-afiliado","title":"Fluxo Alternativo: Sem Link de Afiliado","text":"<p>Se usu\u00e1rio acessar diretamente sem link:</p> <p>Diferen\u00e7as: - <code>Order.PromoterId = NULL</code> - <code>Order.VideoAffiliateLinkId = NULL</code> - <code>Order.PromoterAmount = 0</code> - Split no Iugu: apenas Master + Owner - Income: apenas 2 registros (Platform e Owner)</p> <pre><code>V\u00eddeo: R$ 100,00\nConfig: Plataforma 20%, Owner 80%, Promoter 0%\n\nC\u00e1lculo:\n- Plataforma: R$ 20,00\n- Owner: R$ 80,00\n\nSplit no Iugu:\n{\n  splits: [\n    { recipient_account_id: \"master\", cents: 2000 },\n    { recipient_account_id: \"owner_sub\", cents: 8000 }\n  ]\n}\n</code></pre>"},{"location":"casos-de-uso/usuario-compra-video/#fluxos-de-excecao","title":"Fluxos de Exce\u00e7\u00e3o","text":""},{"location":"casos-de-uso/usuario-compra-video/#1-video-indisponivel","title":"1. V\u00eddeo Indispon\u00edvel","text":"<pre><code>\u274c V\u00eddeo com is_active = false\n\u274c V\u00eddeo com release_date futura\n\u274c V\u00eddeo com expiration_sale_date passada\n\u2192 Retorna 400 Bad Request: \"V\u00eddeo n\u00e3o dispon\u00edvel\"\n</code></pre>"},{"location":"casos-de-uso/usuario-compra-video/#2-usuario-ja-comprou","title":"2. Usu\u00e1rio J\u00e1 Comprou","text":"<pre><code>\u274c J\u00e1 existe Order pago para user + video\n\u2192 Retorna 400 Bad Request: \"Voc\u00ea j\u00e1 possui este v\u00eddeo\"\n</code></pre>"},{"location":"casos-de-uso/usuario-compra-video/#3-kyc-nao-aprovado","title":"3. KYC N\u00e3o Aprovado","text":"<pre><code>\u274c Owner sem KYC aprovado\n\u274c Promoter sem KYC aprovado\n\u2192 Retorna 400 Bad Request: \"N\u00e3o \u00e9 poss\u00edvel processar comiss\u00e3o\"\n</code></pre>"},{"location":"casos-de-uso/usuario-compra-video/#4-pagamento-falhou-no-iugu","title":"4. Pagamento Falhou no Iugu","text":"<pre><code>\u274c Cart\u00e3o recusado\n\u274c Boleto n\u00e3o pago\n\u2192 Webhook: invoice.payment_failed\n\u2192 Payment.Status = Failed\n\u2192 Order permanece sem acesso\n</code></pre>"},{"location":"casos-de-uso/usuario-compra-video/#5-erro-na-criacao-da-invoice","title":"5. Erro na Cria\u00e7\u00e3o da Invoice","text":"<pre><code>\u274c Erro ao chamar API do Iugu\n\u2192 Rollback da transa\u00e7\u00e3o\n\u2192 Order n\u00e3o \u00e9 criado\n\u2192 Retorna 500 Internal Server Error\n</code></pre>"},{"location":"casos-de-uso/usuario-compra-video/#pos-condicoes","title":"P\u00f3s-condi\u00e7\u00f5es","text":""},{"location":"casos-de-uso/usuario-compra-video/#sucesso","title":"Sucesso","text":"<ul> <li>\u2705 Order criado com status Paid</li> <li>\u2705 Payment criado e confirmado</li> <li>\u2705 2-3 Incomes criados (Platform, Owner, Promoter?)</li> <li>\u2705 Notification de confirma\u00e7\u00e3o criada e enviada</li> <li>\u2705 Usu\u00e1rio pode assistir ao v\u00eddeo</li> <li>\u2705 Split executado no Iugu</li> <li>\u2705 Todos receberam em suas contas/subcontas</li> </ul>"},{"location":"casos-de-uso/usuario-compra-video/#falha","title":"Falha","text":"<ul> <li>\u274c Transa\u00e7\u00e3o revertida</li> <li>\u274c Nenhum dado inconsistente</li> <li>\u274c Usu\u00e1rio informado do erro</li> <li>\u274c Log detalhado para debug</li> </ul>"},{"location":"casos-de-uso/usuario-compra-video/#codigo-completo-da-jornada","title":"C\u00f3digo Completo da Jornada","text":"<p>Veja os c\u00f3digos completos em: - Frontend: <code>frontend-react/src/pages/videosHome/</code> - Backend Order: <code>backend-api/Services/OrderService.cs</code> - Backend Payment: <code>backend-api/Services/PaymentService.cs</code> - Webhook: <code>backend-api/Endpoints/WebHookEndpoint.cs</code></p>"},{"location":"casos-de-uso/usuario-compra-video/#metricas-e-monitoramento","title":"M\u00e9tricas e Monitoramento","text":""},{"location":"casos-de-uso/usuario-compra-video/#eventos-logados","title":"Eventos Logados","text":"<ul> <li>Order criado</li> <li>Payment pendente</li> <li>Invoice criada no Iugu</li> <li>Webhook recebido</li> <li>Payment confirmado</li> <li>Incomes criados</li> <li>Notification enviada</li> </ul>"},{"location":"casos-de-uso/usuario-compra-video/#alertas","title":"Alertas","text":"<ul> <li>\u26a0\ufe0f Order sem Payment ap\u00f3s 1 hora</li> <li>\u26a0\ufe0f Payment pendente por mais de 24h</li> <li>\u274c Webhook falhou 3x</li> <li>\u274c Erro ao criar invoice no Iugu</li> </ul>"},{"location":"casos-de-uso/usuario-compra-video/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<ul> <li>Veja outros casos de uso:</li> <li>Link de Afiliado - Como promoter gera links</li> <li>Aprova\u00e7\u00e3o KYC - Processo de KYC</li> <li>Comiss\u00e3o Influencer - Como influencer recebe</li> <li>Consulte Fluxos de Neg\u00f3cio &gt; Compra</li> <li>Entenda o Split de Pagamento</li> </ul>"},{"location":"fluxos-de-negocio/autenticacao/","title":"Fluxo: Autentica\u00e7\u00e3o","text":""},{"location":"fluxos-de-negocio/autenticacao/#descricao","title":"Descri\u00e7\u00e3o","text":"<p>O fluxo de autentica\u00e7\u00e3o na plataforma Amasso utiliza JWT (JSON Web Tokens) para manter sess\u00f5es seguras. Opcionalmente, o usu\u00e1rio pode habilitar MFA (Multi-Factor Authentication) para maior seguran\u00e7a.</p>"},{"location":"fluxos-de-negocio/autenticacao/#diagrama-de-sequencia","title":"Diagrama de Sequ\u00eancia","text":"<pre><code>sequenceDiagram\n    participant U as Usu\u00e1rio\n    participant F as Frontend\n    participant B as Backend API\n    participant DB as PostgreSQL\n    participant E as Email API\n\n    U-&gt;&gt;F: Acessa /login\n    F-&gt;&gt;F: Exibe formul\u00e1rio\n    U-&gt;&gt;F: Insere email/senha\n    F-&gt;&gt;B: POST /api/login\n    B-&gt;&gt;DB: SELECT * FROM users WHERE email=?\n    DB--&gt;&gt;B: user\n    B-&gt;&gt;B: Verificar bcrypt hash\n\n    alt Senha incorreta\n        B--&gt;&gt;F: 401 Unauthorized\n        F--&gt;&gt;U: Erro: Credenciais inv\u00e1lidas\n    end\n\n    alt MFA Habilitado\n        B-&gt;&gt;B: Gerar c\u00f3digo 6 d\u00edgitos\n        B-&gt;&gt;DB: INSERT INTO mfa_codes\n        DB--&gt;&gt;B: OK\n        B-&gt;&gt;DB: INSERT INTO notifications (MFA Code)\n        DB--&gt;&gt;B: OK\n        B--&gt;&gt;F: 200 OK {requireMfa: true}\n        F--&gt;&gt;U: Redirecionar para /mfa\n        U-&gt;&gt;F: Insere c\u00f3digo MFA\n        F-&gt;&gt;B: POST /api/login/verify-mfa\n        B-&gt;&gt;DB: SELECT * FROM mfa_codes WHERE code=?\n        DB--&gt;&gt;B: mfa_code\n\n        alt C\u00f3digo inv\u00e1lido ou expirado\n            B--&gt;&gt;F: 400 Bad Request\n            F--&gt;&gt;U: Erro: C\u00f3digo inv\u00e1lido\n        end\n\n        B-&gt;&gt;B: Gerar JWT Token\n        B-&gt;&gt;DB: DELETE FROM mfa_codes WHERE user_id=?\n        B--&gt;&gt;F: 200 OK {token, user}\n    else MFA Desabilitado\n        B-&gt;&gt;B: Gerar JWT Token\n        B--&gt;&gt;F: 200 OK {token, user}\n    end\n\n    F-&gt;&gt;F: Salvar token em localStorage\n    F-&gt;&gt;F: Salvar user em Redux\n    F--&gt;&gt;U: Redirecionar para /dashboard</code></pre>"},{"location":"fluxos-de-negocio/autenticacao/#componentes-envolvidos","title":"Componentes Envolvidos","text":""},{"location":"fluxos-de-negocio/autenticacao/#1-frontend-formulario-de-login","title":"1. Frontend - Formul\u00e1rio de Login","text":"<pre><code>// frontend-react/src/pages/Auth/Login.tsx\nimport { useForm } from \"react-hook-form\";\nimport { useNavigate } from \"react-router-dom\";\nimport { authApi } from \"@/services/api/authApi\";\nimport { useAppDispatch } from \"@/store/hooks\";\nimport { setUser } from \"@/store/slices/userSlice\";\n\ninterface LoginForm {\n  email: string;\n  password: string;\n}\n\nexport const Login = () =&gt; {\n  const { register, handleSubmit } = useForm&lt;LoginForm&gt;();\n  const navigate = useNavigate();\n  const dispatch = useAppDispatch();\n\n  const onSubmit = async (data: LoginForm) =&gt; {\n    try {\n      const response = await authApi.login(data);\n\n      if (response.requireMfa) {\n        // Redirecionar para MFA\n        navigate(\"/auth/mfa\", { \n          state: { email: data.email } \n        });\n      } else {\n        // Salvar token e usu\u00e1rio\n        localStorage.setItem(\"token\", response.token);\n        dispatch(setUser(response.user));\n        navigate(\"/dashboard\");\n      }\n    } catch (error) {\n      toast.error(\"Credenciais inv\u00e1lidas\");\n    }\n  };\n\n  return (\n    &lt;form onSubmit={handleSubmit(onSubmit)}&gt;\n      &lt;input \n        type=\"email\" \n        {...register(\"email\", { required: true })} \n        placeholder=\"Email\"\n      /&gt;\n      &lt;input \n        type=\"password\" \n        {...register(\"password\", { required: true })} \n        placeholder=\"Senha\"\n      /&gt;\n      &lt;button type=\"submit\"&gt;Entrar&lt;/button&gt;\n\n      &lt;Link to=\"/auth/forgot-password\"&gt;Esqueci minha senha&lt;/Link&gt;\n    &lt;/form&gt;\n  );\n};\n</code></pre>"},{"location":"fluxos-de-negocio/autenticacao/#2-backend-endpoint-de-login","title":"2. Backend - Endpoint de Login","text":"<pre><code>// backend-api/Endpoints/LoginEndpoints.cs\napp.MapPost(\"/api/login\", async (\n    LoginDto dto,\n    LoginService service,\n    IHttpContextAccessor contextAccessor) =&gt;\n{\n    var user = await service.ValidateCredentialsAsync(dto.Email, dto.Password);\n\n    if (user == null)\n        return Results.Unauthorized();\n\n    // Verificar se MFA est\u00e1 habilitado\n    var mfaEnabled = await service.IsMfaEnabledAsync(user.Id);\n\n    if (mfaEnabled)\n    {\n        // Gerar c\u00f3digo MFA\n        var code = service.GenerateMfaCode();\n        await service.SaveMfaCodeAsync(user.Id, code);\n\n        // Enviar notifica\u00e7\u00e3o\n        await service.SendMfaNotificationAsync(user.Email, code);\n\n        return Results.Ok(new\n        {\n            requireMfa = true,\n            message = \"C\u00f3digo MFA enviado para seu email\"\n        });\n    }\n\n    // Gerar token JWT\n    var token = _tokenService.GenerateToken(user);\n\n    return Results.Ok(new\n    {\n        token,\n        user = new UserDto\n        {\n            Id = user.Id,\n            Email = user.Email,\n            FirstName = user.FirstName,\n            LastName = user.LastName,\n            Type = user.Type\n        }\n    });\n})\n.AllowAnonymous();\n</code></pre>"},{"location":"fluxos-de-negocio/autenticacao/#3-loginservice-validacao-de-credenciais","title":"3. LoginService - Valida\u00e7\u00e3o de Credenciais","text":"<pre><code>// backend-api/Services/LoginService.cs\npublic class LoginService\n{\n    private readonly ApplicationDbContext _context;\n    private readonly IPasswordHasher&lt;User&gt; _passwordHasher;\n\n    public async Task&lt;User?&gt; ValidateCredentialsAsync(string email, string password)\n    {\n        var user = await _context.Users\n            .FirstOrDefaultAsync(u =&gt; u.Email.ToLower() == email.ToLower());\n\n        if (user == null)\n            return null;\n\n        if (!user.IsActive)\n            throw new InvalidOperationException(\"Conta inativa\");\n\n        // Verificar senha\n        var result = _passwordHasher.VerifyHashedPassword(\n            user, \n            user.PasswordHash, \n            password\n        );\n\n        if (result == PasswordVerificationResult.Failed)\n            return null;\n\n        return user;\n    }\n\n    public string GenerateMfaCode()\n    {\n        var random = new Random();\n        return random.Next(100000, 999999).ToString();\n    }\n\n    public async Task SaveMfaCodeAsync(long userId, string code)\n    {\n        // Invalidar c\u00f3digos anteriores\n        var oldCodes = await _context.MfaCodes\n            .Where(m =&gt; m.UserId == userId)\n            .ToListAsync();\n\n        _context.MfaCodes.RemoveRange(oldCodes);\n\n        // Criar novo c\u00f3digo\n        var mfaCode = new MfaCode\n        {\n            UserId = userId,\n            Code = code,\n            ExpiresAt = DateTime.UtcNow.AddMinutes(5),\n            CreatedAt = DateTime.UtcNow\n        };\n\n        await _context.MfaCodes.AddAsync(mfaCode);\n        await _context.SaveChangesAsync();\n    }\n\n    public async Task SendMfaNotificationAsync(string email, string code)\n    {\n        var notification = new Notification\n        {\n            Type = NotificationTypeEnum.MfaCode,\n            Channel = NotificationChannelEnum.Email,\n            Email = email,\n            MetadataJson = JsonSerializer.Serialize(new { Code = code }),\n            CreatedAt = DateTime.UtcNow\n        };\n\n        await _context.Notifications.AddAsync(notification);\n        await _context.SaveChangesAsync();\n    }\n}\n</code></pre>"},{"location":"fluxos-de-negocio/autenticacao/#4-tokenservice-geracao-de-jwt","title":"4. TokenService - Gera\u00e7\u00e3o de JWT","text":"<pre><code>// backend-api/Services/TokenService.cs\npublic class TokenService\n{\n    private readonly IConfiguration _configuration;\n\n    public string GenerateToken(User user)\n    {\n        var claims = new List&lt;Claim&gt;\n        {\n            new Claim(ClaimTypes.NameIdentifier, user.Id.ToString()),\n            new Claim(ClaimTypes.Email, user.Email),\n            new Claim(ClaimTypes.Role, user.Type.ToString()),\n            new Claim(\"FirstName\", user.FirstName),\n            new Claim(\"LastName\", user.LastName)\n        };\n\n        var key = new SymmetricSecurityKey(\n            Encoding.UTF8.GetBytes(_configuration[\"Jwt:SecretKey\"])\n        );\n\n        var credentials = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);\n\n        var token = new JwtSecurityToken(\n            issuer: _configuration[\"Jwt:Issuer\"],\n            audience: _configuration[\"Jwt:Audience\"],\n            claims: claims,\n            expires: DateTime.UtcNow.AddHours(24),\n            signingCredentials: credentials\n        );\n\n        return new JwtSecurityTokenHandler().WriteToken(token);\n    }\n}\n</code></pre>"},{"location":"fluxos-de-negocio/autenticacao/#5-frontend-verificacao-mfa","title":"5. Frontend - Verifica\u00e7\u00e3o MFA","text":"<pre><code>// frontend-react/src/pages/Auth/MfaVerify.tsx\nimport { useLocation, useNavigate } from \"react-router-dom\";\n\nexport const MfaVerify = () =&gt; {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const dispatch = useAppDispatch();\n  const [code, setCode] = useState(\"\");\n\n  const email = location.state?.email;\n\n  const handleVerifyMfa = async () =&gt; {\n    try {\n      const response = await authApi.verifyMfa({ email, code });\n\n      localStorage.setItem(\"token\", response.token);\n      dispatch(setUser(response.user));\n      navigate(\"/dashboard\");\n    } catch (error) {\n      toast.error(\"C\u00f3digo inv\u00e1lido ou expirado\");\n    }\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Verifica\u00e7\u00e3o MFA&lt;/h1&gt;\n      &lt;p&gt;Digite o c\u00f3digo de 6 d\u00edgitos enviado para {email}&lt;/p&gt;\n\n      &lt;input \n        type=\"text\" \n        maxLength={6}\n        value={code}\n        onChange={(e) =&gt; setCode(e.target.value)}\n        placeholder=\"000000\"\n      /&gt;\n\n      &lt;button onClick={handleVerifyMfa}&gt;\n        Verificar\n      &lt;/button&gt;\n\n      &lt;button onClick={handleResendCode}&gt;\n        Reenviar c\u00f3digo\n      &lt;/button&gt;\n    &lt;/div&gt;\n  );\n};\n</code></pre>"},{"location":"fluxos-de-negocio/autenticacao/#6-backend-verificacao-mfa","title":"6. Backend - Verifica\u00e7\u00e3o MFA","text":"<pre><code>// backend-api/Endpoints/MfaEndpoints.cs\napp.MapPost(\"/api/login/verify-mfa\", async (\n    VerifyMfaDto dto,\n    LoginService service,\n    TokenService tokenService) =&gt;\n{\n    var user = await _context.Users\n        .FirstOrDefaultAsync(u =&gt; u.Email == dto.Email);\n\n    if (user == null)\n        return Results.Unauthorized();\n\n    // Buscar c\u00f3digo MFA\n    var mfaCode = await _context.MfaCodes\n        .FirstOrDefaultAsync(m =&gt; m.UserId == user.Id &amp;&amp; \n                                  m.Code == dto.Code);\n\n    if (mfaCode == null)\n        return Results.BadRequest(\"C\u00f3digo inv\u00e1lido\");\n\n    if (mfaCode.ExpiresAt &lt; DateTime.UtcNow)\n        return Results.BadRequest(\"C\u00f3digo expirado\");\n\n    // Deletar c\u00f3digo\n    _context.MfaCodes.Remove(mfaCode);\n    await _context.SaveChangesAsync();\n\n    // Gerar token\n    var token = tokenService.GenerateToken(user);\n\n    return Results.Ok(new\n    {\n        token,\n        user = new UserDto\n        {\n            Id = user.Id,\n            Email = user.Email,\n            FirstName = user.FirstName,\n            LastName = user.LastName,\n            Type = user.Type\n        }\n    });\n})\n.AllowAnonymous();\n</code></pre>"},{"location":"fluxos-de-negocio/autenticacao/#7-http-client-interceptor-de-token","title":"7. HTTP Client - Interceptor de Token","text":"<pre><code>// frontend-react/src/services/httpClient.ts\nimport axios from \"axios\";\n\nexport const httpClient = axios.create({\n  baseURL: import.meta.env.VITE_API_URL,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\n\n// Request interceptor - adicionar token\nhttpClient.interceptors.request.use(\n  (config) =&gt; {\n    const token = localStorage.getItem(\"token\");\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) =&gt; Promise.reject(error)\n);\n\n// Response interceptor - tratar erros de autentica\u00e7\u00e3o\nhttpClient.interceptors.response.use(\n  (response) =&gt; response,\n  (error) =&gt; {\n    if (error.response?.status === 401) {\n      // Token inv\u00e1lido ou expirado\n      localStorage.removeItem(\"token\");\n      window.location.href = \"/auth/login\";\n    }\n    return Promise.reject(error);\n  }\n);\n</code></pre>"},{"location":"fluxos-de-negocio/autenticacao/#configuracao-jwt-no-backend","title":"Configura\u00e7\u00e3o JWT no Backend","text":""},{"location":"fluxos-de-negocio/autenticacao/#appsettingsjson","title":"appsettings.json","text":"<pre><code>{\n  \"Jwt\": {\n    \"SecretKey\": \"sua-chave-secreta-muito-forte-aqui-com-pelo-menos-32-caracteres\",\n    \"Issuer\": \"Amasso.API\",\n    \"Audience\": \"Amasso.Frontend\",\n    \"ExpirationHours\": 24\n  }\n}\n</code></pre>"},{"location":"fluxos-de-negocio/autenticacao/#programcs","title":"Program.cs","text":"<pre><code>// Configurar autentica\u00e7\u00e3o JWT\nbuilder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)\n    .AddJwtBearer(options =&gt;\n    {\n        options.TokenValidationParameters = new TokenValidationParameters\n        {\n            ValidateIssuer = true,\n            ValidateAudience = true,\n            ValidateLifetime = true,\n            ValidateIssuerSigningKey = true,\n            ValidIssuer = builder.Configuration[\"Jwt:Issuer\"],\n            ValidAudience = builder.Configuration[\"Jwt:Audience\"],\n            IssuerSigningKey = new SymmetricSecurityKey(\n                Encoding.UTF8.GetBytes(builder.Configuration[\"Jwt:SecretKey\"])\n            ),\n            ClockSkew = TimeSpan.Zero\n        };\n    });\n\nbuilder.Services.AddAuthorization();\n\n// ... no pipeline\napp.UseAuthentication();\napp.UseAuthorization();\n</code></pre>"},{"location":"fluxos-de-negocio/autenticacao/#seguranca","title":"Seguran\u00e7a","text":""},{"location":"fluxos-de-negocio/autenticacao/#1-hash-de-senha","title":"1. Hash de Senha","text":"<pre><code>// Usar PasswordHasher do ASP.NET Core Identity\nbuilder.Services.AddScoped&lt;IPasswordHasher&lt;User&gt;, PasswordHasher&lt;User&gt;&gt;();\n\n// Ao criar usu\u00e1rio\nvar passwordHasher = serviceProvider.GetRequiredService&lt;IPasswordHasher&lt;User&gt;&gt;();\nuser.PasswordHash = passwordHasher.HashPassword(user, plainPassword);\n</code></pre>"},{"location":"fluxos-de-negocio/autenticacao/#2-politica-de-senha","title":"2. Pol\u00edtica de Senha","text":"<ul> <li>M\u00ednimo 8 caracteres</li> <li>Pelo menos 1 mai\u00fascula</li> <li>Pelo menos 1 min\u00fascula</li> <li>Pelo menos 1 n\u00famero</li> <li>Pelo menos 1 caractere especial</li> </ul>"},{"location":"fluxos-de-negocio/autenticacao/#3-protecao-contra-brute-force","title":"3. Prote\u00e7\u00e3o contra Brute Force","text":"<pre><code>// Rate limiting com In-Memory Cache\nprivate static readonly Dictionary&lt;string, (int attempts, DateTime lockUntil)&gt; _loginAttempts = new();\n\npublic async Task&lt;User?&gt; ValidateCredentialsAsync(string email, string password)\n{\n    var key = email.ToLower();\n\n    // Verificar se est\u00e1 bloqueado\n    if (_loginAttempts.TryGetValue(key, out var attempt) &amp;&amp; \n        attempt.lockUntil &gt; DateTime.UtcNow)\n    {\n        throw new InvalidOperationException(\n            $\"Conta bloqueada. Tente novamente em {(attempt.lockUntil - DateTime.UtcNow).TotalMinutes:F0} minutos\"\n        );\n    }\n\n    var user = await ValidateUser(email, password);\n\n    if (user == null)\n    {\n        // Incrementar tentativas\n        if (!_loginAttempts.ContainsKey(key))\n            _loginAttempts[key] = (1, DateTime.MinValue);\n        else\n            _loginAttempts[key] = (_loginAttempts[key].attempts + 1, DateTime.MinValue);\n\n        // Bloquear ap\u00f3s 5 tentativas\n        if (_loginAttempts[key].attempts &gt;= 5)\n        {\n            _loginAttempts[key] = (0, DateTime.UtcNow.AddMinutes(15));\n            throw new InvalidOperationException(\"Muitas tentativas. Conta bloqueada por 15 minutos\");\n        }\n\n        return null;\n    }\n\n    // Limpar tentativas\n    _loginAttempts.Remove(key);\n\n    return user;\n}\n</code></pre>"},{"location":"fluxos-de-negocio/autenticacao/#fluxos-relacionados","title":"Fluxos Relacionados","text":"<ul> <li>Cadastro de Usu\u00e1rio</li> <li>Recupera\u00e7\u00e3o de Senha</li> </ul>"},{"location":"fluxos-de-negocio/autenticacao/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<ul> <li>Implementar refresh tokens para maior seguran\u00e7a</li> <li>Adicionar logs de login/logout</li> <li>Implementar 2FA com autenticador (Google Authenticator)</li> </ul>"},{"location":"fluxos-de-negocio/cadastro-usuario/","title":"Fluxo: Cadastro de Usu\u00e1rio","text":""},{"location":"fluxos-de-negocio/cadastro-usuario/#descricao","title":"Descri\u00e7\u00e3o","text":"<p>O fluxo de cadastro permite que novos usu\u00e1rios criem uma conta na plataforma Amasso. Ap\u00f3s o cadastro, o usu\u00e1rio recebe um c\u00f3digo de ativa\u00e7\u00e3o por email para confirmar sua conta.</p>"},{"location":"fluxos-de-negocio/cadastro-usuario/#diagrama-de-atividades","title":"Diagrama de Atividades","text":"<pre><code>flowchart TD\n    A[In\u00edcio] --&gt; B[Acessar /register]\n    B --&gt; C[Preencher formul\u00e1rio]\n    C --&gt; D{Dados v\u00e1lidos?}\n    D --&gt;|N\u00e3o| E[Mostrar erros]\n    E --&gt; C\n    D --&gt;|Sim| F[Submeter formul\u00e1rio]\n    F --&gt; G{Email j\u00e1 existe?}\n    G --&gt;|Sim| H[Erro: Email j\u00e1 cadastrado]\n    H --&gt; C\n    G --&gt;|N\u00e3o| I{CPF v\u00e1lido?}\n    I --&gt;|N\u00e3o| J[Erro: CPF inv\u00e1lido]\n    J --&gt; C\n    I --&gt;|Sim| K{Idade &gt;= 18?}\n    K --&gt;|N\u00e3o| L[Erro: Menor de idade]\n    L --&gt; C\n    K --&gt;|Sim| M[Criar usu\u00e1rio no banco]\n    M --&gt; N[Gerar c\u00f3digo ativa\u00e7\u00e3o]\n    N --&gt; O[Salvar c\u00f3digo]\n    O --&gt; P[Enviar email]\n    P --&gt; Q[Redirecionar para /activate]\n    Q --&gt; R[Usu\u00e1rio insere c\u00f3digo]\n    R --&gt; S{C\u00f3digo v\u00e1lido?}\n    S --&gt;|N\u00e3o| T[Erro: C\u00f3digo inv\u00e1lido]\n    T --&gt; R\n    S --&gt;|Sim| U[Ativar conta]\n    U --&gt; V[Redirecionar para /login]\n    V --&gt; W[Fim]</code></pre>"},{"location":"fluxos-de-negocio/cadastro-usuario/#componentes-envolvidos","title":"Componentes Envolvidos","text":""},{"location":"fluxos-de-negocio/cadastro-usuario/#1-frontend-formulario-de-cadastro","title":"1. Frontend - Formul\u00e1rio de Cadastro","text":"<pre><code>// frontend-react/src/pages/Auth/Register.tsx\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { authApi } from \"@/services/api/authApi\";\n\nconst registerSchema = z.object({\n  email: z.string().email(\"Email inv\u00e1lido\"),\n  password: z.string()\n    .min(8, \"M\u00ednimo 8 caracteres\")\n    .regex(/[A-Z]/, \"Precisa ter letra mai\u00fascula\")\n    .regex(/[a-z]/, \"Precisa ter letra min\u00fascula\")\n    .regex(/[0-9]/, \"Precisa ter n\u00famero\"),\n  confirmPassword: z.string(),\n  firstName: z.string().min(2, \"M\u00ednimo 2 caracteres\"),\n  lastName: z.string().min(2, \"M\u00ednimo 2 caracteres\"),\n  cpf: z.string().regex(/^\\d{11}$/, \"CPF inv\u00e1lido\"),\n  birthDate: z.string(),\n  telephone: z.string().regex(/^\\d{10,11}$/, \"Telefone inv\u00e1lido\"),\n  acceptTerms: z.boolean().refine(val =&gt; val === true, \"Aceite os termos\")\n}).refine(data =&gt; data.password === data.confirmPassword, {\n  message: \"Senhas n\u00e3o conferem\",\n  path: [\"confirmPassword\"]\n}).refine(data =&gt; {\n  const birthDate = new Date(data.birthDate);\n  const age = new Date().getFullYear() - birthDate.getFullYear();\n  return age &gt;= 18;\n}, {\n  message: \"Voc\u00ea precisa ter pelo menos 18 anos\",\n  path: [\"birthDate\"]\n});\n\ntype RegisterForm = z.infer&lt;typeof registerSchema&gt;;\n\nexport const Register = () =&gt; {\n  const { register, handleSubmit, formState: { errors } } = useForm&lt;RegisterForm&gt;({\n    resolver: zodResolver(registerSchema)\n  });\n  const navigate = useNavigate();\n\n  const onSubmit = async (data: RegisterForm) =&gt; {\n    try {\n      await authApi.register({\n        email: data.email,\n        password: data.password,\n        firstName: data.firstName,\n        lastName: data.lastName,\n        cpf: data.cpf,\n        birthDate: data.birthDate,\n        telephone: data.telephone,\n        type: UserTypeEnum.Default // ou Promoter/Influencer\n      });\n\n      toast.success(\"Cadastro realizado! Verifique seu email.\");\n      navigate(\"/auth/activate\", { state: { email: data.email } });\n    } catch (error: any) {\n      if (error.response?.data?.message) {\n        toast.error(error.response.data.message);\n      } else {\n        toast.error(\"Erro ao cadastrar\");\n      }\n    }\n  };\n\n  return (\n    &lt;form onSubmit={handleSubmit(onSubmit)}&gt;\n      &lt;input {...register(\"email\")} placeholder=\"Email\" /&gt;\n      {errors.email &amp;&amp; &lt;span&gt;{errors.email.message}&lt;/span&gt;}\n\n      &lt;input type=\"password\" {...register(\"password\")} placeholder=\"Senha\" /&gt;\n      {errors.password &amp;&amp; &lt;span&gt;{errors.password.message}&lt;/span&gt;}\n\n      &lt;input type=\"password\" {...register(\"confirmPassword\")} placeholder=\"Confirmar Senha\" /&gt;\n      {errors.confirmPassword &amp;&amp; &lt;span&gt;{errors.confirmPassword.message}&lt;/span&gt;}\n\n      &lt;input {...register(\"firstName\")} placeholder=\"Nome\" /&gt;\n      {errors.firstName &amp;&amp; &lt;span&gt;{errors.firstName.message}&lt;/span&gt;}\n\n      &lt;input {...register(\"lastName\")} placeholder=\"Sobrenome\" /&gt;\n      {errors.lastName &amp;&amp; &lt;span&gt;{errors.lastName.message}&lt;/span&gt;}\n\n      &lt;input {...register(\"cpf\")} placeholder=\"CPF (apenas n\u00fameros)\" maxLength={11} /&gt;\n      {errors.cpf &amp;&amp; &lt;span&gt;{errors.cpf.message}&lt;/span&gt;}\n\n      &lt;input type=\"date\" {...register(\"birthDate\")} /&gt;\n      {errors.birthDate &amp;&amp; &lt;span&gt;{errors.birthDate.message}&lt;/span&gt;}\n\n      &lt;input {...register(\"telephone\")} placeholder=\"Telefone (DDD + n\u00famero)\" /&gt;\n      {errors.telephone &amp;&amp; &lt;span&gt;{errors.telephone.message}&lt;/span&gt;}\n\n      &lt;label&gt;\n        &lt;input type=\"checkbox\" {...register(\"acceptTerms\")} /&gt;\n        Aceito os termos de uso\n      &lt;/label&gt;\n      {errors.acceptTerms &amp;&amp; &lt;span&gt;{errors.acceptTerms.message}&lt;/span&gt;}\n\n      &lt;button type=\"submit\"&gt;Cadastrar&lt;/button&gt;\n\n      &lt;Link to=\"/auth/login\"&gt;J\u00e1 tenho conta&lt;/Link&gt;\n    &lt;/form&gt;\n  );\n};\n</code></pre>"},{"location":"fluxos-de-negocio/cadastro-usuario/#2-backend-endpoint-de-cadastro","title":"2. Backend - Endpoint de Cadastro","text":"<pre><code>// backend-api/Endpoints/LoginEndpoints.cs\napp.MapPost(\"/api/signup\", async (\n    SignUpDto dto,\n    LoginService service,\n    IPasswordHasher&lt;User&gt; passwordHasher,\n    ApplicationDbContext context) =&gt;\n{\n    // Validar se email j\u00e1 existe\n    var emailExists = await context.Users\n        .AnyAsync(u =&gt; u.Email.ToLower() == dto.Email.ToLower());\n\n    if (emailExists)\n        return Results.BadRequest(\"Email j\u00e1 cadastrado\");\n\n    // Validar CPF\n    if (!CpfValidator.IsValid(dto.Cpf))\n        return Results.BadRequest(\"CPF inv\u00e1lido\");\n\n    // Validar idade\n    var age = DateTime.Today.Year - dto.BirthDate.Year;\n    if (dto.BirthDate.Date &gt; DateTime.Today.AddYears(-age)) age--;\n    if (age &lt; 18)\n        return Results.BadRequest(\"Voc\u00ea precisa ter pelo menos 18 anos\");\n\n    // Criar usu\u00e1rio\n    var user = new User\n    {\n        Email = dto.Email.ToLower(),\n        FirstName = dto.FirstName,\n        LastName = dto.LastName,\n        Cpf = dto.Cpf,\n        BirthDate = dto.BirthDate,\n        Telephone = dto.Telephone,\n        Type = dto.Type,\n        IsActive = false, // Aguardando ativa\u00e7\u00e3o\n        CreatedAt = DateTime.UtcNow\n    };\n\n    // Hash da senha\n    user.PasswordHash = passwordHasher.HashPassword(user, dto.Password);\n\n    await context.Users.AddAsync(user);\n    await context.SaveChangesAsync();\n\n    // Gerar c\u00f3digo de ativa\u00e7\u00e3o\n    var code = service.GenerateActivationCode();\n    await service.SaveActivationCodeAsync(user.Id, code);\n\n    // Enviar email\n    await service.SendActivationEmailAsync(user.Email, code);\n\n    return Results.Ok(new { message = \"Cadastro realizado! Verifique seu email.\" });\n})\n.AllowAnonymous();\n</code></pre>"},{"location":"fluxos-de-negocio/cadastro-usuario/#3-loginservice-ativacao","title":"3. LoginService - Ativa\u00e7\u00e3o","text":"<pre><code>// backend-api/Services/LoginService.cs\npublic string GenerateActivationCode()\n{\n    var random = new Random();\n    return random.Next(100000, 999999).ToString();\n}\n\npublic async Task SaveActivationCodeAsync(long userId, string code)\n{\n    var mfaCode = new MfaCode\n    {\n        UserId = userId,\n        Code = code,\n        ExpiresAt = DateTime.UtcNow.AddHours(24),\n        CreatedAt = DateTime.UtcNow\n    };\n\n    await _context.MfaCodes.AddAsync(mfaCode);\n    await _context.SaveChangesAsync();\n}\n\npublic async Task SendActivationEmailAsync(string email, string code)\n{\n    var notification = new Notification\n    {\n        Type = NotificationTypeEnum.UserActivation,\n        Channel = NotificationChannelEnum.Email,\n        Email = email,\n        MetadataJson = JsonSerializer.Serialize(new { Code = code }),\n        CreatedAt = DateTime.UtcNow\n    };\n\n    await _context.Notifications.AddAsync(notification);\n    await _context.SaveChangesAsync();\n}\n\npublic async Task ActivateAccountAsync(string email, string code)\n{\n    var user = await _context.Users\n        .FirstOrDefaultAsync(u =&gt; u.Email.ToLower() == email.ToLower());\n\n    if (user == null)\n        throw new InvalidOperationException(\"Usu\u00e1rio n\u00e3o encontrado\");\n\n    if (user.IsActive)\n        throw new InvalidOperationException(\"Conta j\u00e1 ativada\");\n\n    var mfaCode = await _context.MfaCodes\n        .FirstOrDefaultAsync(m =&gt; m.UserId == user.Id &amp;&amp; m.Code == code);\n\n    if (mfaCode == null)\n        throw new InvalidOperationException(\"C\u00f3digo inv\u00e1lido\");\n\n    if (mfaCode.ExpiresAt &lt; DateTime.UtcNow)\n        throw new InvalidOperationException(\"C\u00f3digo expirado\");\n\n    // Ativar conta\n    user.IsActive = true;\n    user.UpdatedAt = DateTime.UtcNow;\n\n    // Remover c\u00f3digo\n    _context.MfaCodes.Remove(mfaCode);\n\n    await _context.SaveChangesAsync();\n}\n</code></pre>"},{"location":"fluxos-de-negocio/cadastro-usuario/#4-frontend-ativacao-de-conta","title":"4. Frontend - Ativa\u00e7\u00e3o de Conta","text":"<pre><code>// frontend-react/src/pages/Auth/Activate.tsx\nexport const Activate = () =&gt; {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const [code, setCode] = useState(\"\");\n\n  const email = location.state?.email || \"\";\n\n  const handleActivate = async () =&gt; {\n    try {\n      await authApi.activate({ email, code });\n      toast.success(\"Conta ativada com sucesso!\");\n      navigate(\"/auth/login\");\n    } catch (error: any) {\n      toast.error(error.response?.data?.message || \"C\u00f3digo inv\u00e1lido\");\n    }\n  };\n\n  const handleResendCode = async () =&gt; {\n    try {\n      await authApi.resendActivationCode({ email });\n      toast.success(\"C\u00f3digo reenviado!\");\n    } catch (error) {\n      toast.error(\"Erro ao reenviar c\u00f3digo\");\n    }\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Ativar Conta&lt;/h1&gt;\n      &lt;p&gt;Digite o c\u00f3digo de 6 d\u00edgitos enviado para {email}&lt;/p&gt;\n\n      &lt;input \n        type=\"text\" \n        maxLength={6}\n        value={code}\n        onChange={(e) =&gt; setCode(e.target.value)}\n        placeholder=\"000000\"\n      /&gt;\n\n      &lt;button onClick={handleActivate}&gt;\n        Ativar Conta\n      &lt;/button&gt;\n\n      &lt;button onClick={handleResendCode}&gt;\n        Reenviar C\u00f3digo\n      &lt;/button&gt;\n    &lt;/div&gt;\n  );\n};\n</code></pre>"},{"location":"fluxos-de-negocio/cadastro-usuario/#5-validador-de-cpf","title":"5. Validador de CPF","text":"<pre><code>// backend-api/Helpers/CpfValidator.cs\npublic static class CpfValidator\n{\n    public static bool IsValid(string cpf)\n    {\n        if (string.IsNullOrWhiteSpace(cpf))\n            return false;\n\n        cpf = cpf.Replace(\".\", \"\").Replace(\"-\", \"\").Trim();\n\n        if (cpf.Length != 11)\n            return false;\n\n        // Verificar se todos os d\u00edgitos s\u00e3o iguais\n        if (cpf.Distinct().Count() == 1)\n            return false;\n\n        // Validar primeiro d\u00edgito\n        var sum = 0;\n        for (int i = 0; i &lt; 9; i++)\n            sum += int.Parse(cpf[i].ToString()) * (10 - i);\n\n        var remainder = sum % 11;\n        var digit1 = remainder &lt; 2 ? 0 : 11 - remainder;\n\n        if (int.Parse(cpf[9].ToString()) != digit1)\n            return false;\n\n        // Validar segundo d\u00edgito\n        sum = 0;\n        for (int i = 0; i &lt; 10; i++)\n            sum += int.Parse(cpf[i].ToString()) * (11 - i);\n\n        remainder = sum % 11;\n        var digit2 = remainder &lt; 2 ? 0 : 11 - remainder;\n\n        return int.Parse(cpf[10].ToString()) == digit2;\n    }\n}\n</code></pre>"},{"location":"fluxos-de-negocio/cadastro-usuario/#validacoes","title":"Valida\u00e7\u00f5es","text":""},{"location":"fluxos-de-negocio/cadastro-usuario/#frontend","title":"Frontend","text":"<ul> <li>Email formato v\u00e1lido</li> <li>Senha com requisitos m\u00ednimos</li> <li>Senhas coincidem</li> <li>CPF com 11 d\u00edgitos</li> <li>Telefone com 10-11 d\u00edgitos</li> <li>Data de nascimento (idade &gt;= 18)</li> <li>Aceite de termos</li> </ul>"},{"location":"fluxos-de-negocio/cadastro-usuario/#backend","title":"Backend","text":"<ul> <li>Email \u00fanico</li> <li>CPF v\u00e1lido (algoritmo)</li> <li>Idade m\u00ednima 18 anos</li> <li>Senha forte</li> </ul>"},{"location":"fluxos-de-negocio/cadastro-usuario/#template-de-email","title":"Template de Email","text":"<pre><code>&lt;!-- email-api/wwwroot/Templates/UserActivation.html --&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Ative sua conta - Amasso&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div style=\"max-width: 600px; margin: 0 auto; padding: 20px;\"&gt;\n        &lt;h1&gt;Bem-vindo \u00e0 Amasso!&lt;/h1&gt;\n        &lt;p&gt;Ol\u00e1, seja bem-vindo \u00e0 nossa plataforma!&lt;/p&gt;\n        &lt;p&gt;Para ativar sua conta, use o c\u00f3digo abaixo:&lt;/p&gt;\n\n        &lt;div style=\"background: #f0f0f0; padding: 20px; text-align: center; font-size: 32px; letter-spacing: 8px;\"&gt;\n            {{Code}}\n        &lt;/div&gt;\n\n        &lt;p&gt;Este c\u00f3digo expira em 24 horas.&lt;/p&gt;\n        &lt;p&gt;Se voc\u00ea n\u00e3o criou uma conta, ignore este email.&lt;/p&gt;\n\n        &lt;hr&gt;\n        &lt;p style=\"color: #999; font-size: 12px;\"&gt;Amasso - Plataforma de V\u00eddeos Exclusivos&lt;/p&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"fluxos-de-negocio/cadastro-usuario/#regras-de-negocio","title":"Regras de Neg\u00f3cio","text":"<ol> <li>Email \u00fanico: N\u00e3o pode haver dois usu\u00e1rios com mesmo email</li> <li>CPF v\u00e1lido: Deve passar pela valida\u00e7\u00e3o de d\u00edgitos verificadores</li> <li>Idade m\u00ednima: 18 anos completos</li> <li>C\u00f3digo de ativa\u00e7\u00e3o: V\u00e1lido por 24 horas</li> <li>Conta inativa: At\u00e9 ativar, n\u00e3o pode fazer login</li> <li>Reenvio de c\u00f3digo: Pode solicitar novo c\u00f3digo</li> <li>Senha forte: M\u00ednimo 8 caracteres com letras e n\u00fameros</li> </ol>"},{"location":"fluxos-de-negocio/cadastro-usuario/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<ul> <li>Veja Fluxo de Autentica\u00e7\u00e3o para login</li> <li>Consulte Perfis de Usu\u00e1rio</li> </ul>"},{"location":"fluxos-de-negocio/comissoes/","title":"Fluxo: Comiss\u00f5es","text":""},{"location":"fluxos-de-negocio/comissoes/#descricao","title":"Descri\u00e7\u00e3o","text":"<p>Sistema de c\u00e1lculo e distribui\u00e7\u00e3o de comiss\u00f5es entre Plataforma, Influencers e Promoters, configurado por v\u00eddeo atrav\u00e9s da tabela <code>video_revenue_configs</code>.</p>"},{"location":"fluxos-de-negocio/comissoes/#modelo-de-comissoes","title":"Modelo de Comiss\u00f5es","text":""},{"location":"fluxos-de-negocio/comissoes/#configuracao-por-video","title":"Configura\u00e7\u00e3o por V\u00eddeo","text":"<p>Cada v\u00eddeo tem uma configura\u00e7\u00e3o espec\u00edfica de distribui\u00e7\u00e3o de receita:</p> <pre><code>video_revenue_configs\n- video_id\n- platform_percentage (ex: 20%)\n- owner_percentage (ex: 50%)\n- promoter_percentage (ex: 30%)\n</code></pre> <p>Regra: <code>platform_percentage + owner_percentage + promoter_percentage = 100%</code></p>"},{"location":"fluxos-de-negocio/comissoes/#cenarios","title":"Cen\u00e1rios","text":""},{"location":"fluxos-de-negocio/comissoes/#cenario-1-venda-com-promoter","title":"Cen\u00e1rio 1: Venda com Promoter","text":"<p>V\u00eddeo: R$ 100,00 Config: Plataforma 20% | Influencer 50% | Promoter 30%</p> <pre><code>Plataforma: R$ 20,00 (income com owner_id = NULL)\nInfluencer: R$ 50,00 (income com owner_id = influencer_id, type = Owner)\nPromoter:   R$ 30,00 (income com owner_id = promoter_id, type = Promoter)\n</code></pre>"},{"location":"fluxos-de-negocio/comissoes/#cenario-2-venda-sem-promoter","title":"Cen\u00e1rio 2: Venda sem Promoter","text":"<p>V\u00eddeo: R$ 100,00 Config: Plataforma 20% | Influencer 50% | Promoter 30%</p> <pre><code>Plataforma: R$ 20,00 (income com owner_id = NULL)\nInfluencer: R$ 80,00 (income com owner_id = influencer_id, type = Owner)\n           [recebe sua parte + a parte do promoter]\n</code></pre>"},{"location":"fluxos-de-negocio/comissoes/#cenario-3-promoter-0","title":"Cen\u00e1rio 3: Promoter % = 0%","text":"<p>V\u00eddeo: R$ 100,00 Config: Plataforma 30% | Influencer 70% | Promoter 0%</p> <ul> <li>V\u00eddeo N\u00c3O aparece para promoters gerarem links</li> <li>Apenas vendas diretas</li> <li>Influencer recebe 70% sempre</li> </ul> <pre><code>Plataforma: R$ 30,00\nInfluencer: R$ 70,00\n</code></pre>"},{"location":"fluxos-de-negocio/comissoes/#calculo-no-backend","title":"C\u00e1lculo no Backend","text":"<pre><code>public async Task&lt;Order&gt; CreateOrderAsync(CreateOrderDto dto, long userId)\n{\n    var video = await _context.Videos\n        .Include(v =&gt; v.VideoRevenueConfig)\n        .Include(v =&gt; v.OwnerVideos)\n        .ThenInclude(ov =&gt; ov.Owner)\n        .FirstAsync(v =&gt; v.Id == dto.VideoId);\n\n    var config = video.VideoRevenueConfig;\n    var totalCents = (int)(video.Price * 100);\n\n    // Calcular valores base\n    var platformCents = (int)(totalCents * config.PlatformPercentage / 100);\n    var ownerCents = (int)(totalCents * config.OwnerPercentage / 100);\n    var promoterCents = (int)(totalCents * config.PromoterPercentage / 100);\n\n    // Se tem promoter (via link afiliado)\n    Owner? promoter = null;\n    if (!string.IsNullOrEmpty(dto.AffiliateCode))\n    {\n        var link = await _context.VideoAffiliateLinks\n            .Include(l =&gt; l.Owner)\n            .FirstOrDefaultAsync(l =&gt; l.UniqueCode == dto.AffiliateCode &amp;&amp;\n                                      l.VideoId == dto.VideoId);\n\n        if (link != null &amp;&amp; \n            link.Owner.SubAccountStatus == OwnerSubAccountStatusEnum.Approved &amp;&amp;\n            config.PromoterPercentage &gt; 0)\n        {\n            promoter = link.Owner;\n        }\n    }\n\n    // Se N\u00c3O tem promoter, owner recebe a parte do promoter\n    if (promoter == null)\n    {\n        ownerCents += promoterCents;\n        promoterCents = 0;\n    }\n\n    // Ajustar arredondamento (diferen\u00e7a vai pro owner)\n    var totalCalculated = platformCents + ownerCents + promoterCents;\n    if (totalCalculated != totalCents)\n    {\n        ownerCents += (totalCents - totalCalculated);\n    }\n\n    // Criar order\n    var order = new Order\n    {\n        UserId = userId,\n        VideoId = dto.VideoId,\n        PromoterId = promoter?.Id,\n        Amount = totalCents,\n        PlatformAmount = platformCents,\n        OwnerAmount = ownerCents,\n        PromoterAmount = promoterCents,\n        CreatedAt = DateTime.UtcNow\n    };\n\n    return order;\n}\n</code></pre>"},{"location":"fluxos-de-negocio/comissoes/#criacao-de-incomes","title":"Cria\u00e7\u00e3o de Incomes","text":"<p>Ap\u00f3s webhook confirmar pagamento:</p> <pre><code>public async Task CreateIncomesForOrderAsync(long orderId)\n{\n    var order = await _context.Orders\n        .Include(o =&gt; o.Video)\n        .ThenInclude(v =&gt; v.OwnerVideos)\n        .ThenInclude(ov =&gt; ov.Owner)\n        .FirstAsync(o =&gt; o.Id == orderId);\n\n    var incomes = new List&lt;Income&gt;();\n\n    // 1. Plataforma\n    incomes.Add(new Income\n    {\n        OrderId = order.Id,\n        OwnerId = null, // NULL = plataforma\n        Amount = order.PlatformAmount,\n        Type = IncomeTypeEnum.Platform,\n        Description = \"Comiss\u00e3o da plataforma\",\n        CreatedAt = DateTime.UtcNow\n    });\n\n    // 2. Owner/Influencer\n    var owner = order.Video.OwnerVideos.First().Owner;\n    incomes.Add(new Income\n    {\n        OrderId = order.Id,\n        OwnerId = owner.Id,\n        Amount = order.OwnerAmount,\n        Type = IncomeTypeEnum.Owner,\n        Description = $\"Venda do v\u00eddeo: {order.Video.Title}\",\n        CreatedAt = DateTime.UtcNow\n    });\n\n    // 3. Promoter (se houver)\n    if (order.PromoterId.HasValue &amp;&amp; order.PromoterAmount &gt; 0)\n    {\n        incomes.Add(new Income\n        {\n            OrderId = order.Id,\n            OwnerId = order.PromoterId.Value,\n            Amount = order.PromoterAmount,\n            Type = IncomeTypeEnum.Promoter,\n            Description = $\"Comiss\u00e3o por divulga\u00e7\u00e3o: {order.Video.Title}\",\n            CreatedAt = DateTime.UtcNow\n        });\n    }\n\n    await _context.Incomes.AddRangeAsync(incomes);\n    await _context.SaveChangesAsync();\n}\n</code></pre>"},{"location":"fluxos-de-negocio/comissoes/#split-no-iugu","title":"Split no Iugu","text":"<p>O valor j\u00e1 \u00e9 dividido no momento da cria\u00e7\u00e3o da invoice:</p> <pre><code>var splits = new List&lt;IuguSplitRule&gt;();\n\n// Owner\nsplits.Add(new IuguSplitRule\n{\n    ReceiverAccountId = owner.IuguAccountId,\n    AmountCents = order.OwnerAmount\n});\n\n// Promoter (se houver)\nif (order.PromoterId.HasValue)\n{\n    splits.Add(new IuguSplitRule\n    {\n        ReceiverAccountId = promoter.IuguAccountId,\n        AmountCents = order.PromoterAmount\n    });\n}\n\n// Plataforma recebe o resto automaticamente\nvar invoice = await _iuguService.CreateInvoiceAsync(new\n{\n    Email = user.Email,\n    Items = new[] { new { Description = video.Title, PriceCents = order.Amount } },\n    Splits = splits\n});\n</code></pre>"},{"location":"fluxos-de-negocio/comissoes/#relatorios","title":"Relat\u00f3rios","text":""},{"location":"fluxos-de-negocio/comissoes/#comissoes-da-plataforma","title":"Comiss\u00f5es da Plataforma","text":"<pre><code>SELECT \n    SUM(amount) / 100.0 as total_comissao,\n    COUNT(*) as total_vendas\nFROM incomes\nWHERE owner_id IS NULL;\n</code></pre>"},{"location":"fluxos-de-negocio/comissoes/#comissoes-de-um-influencer","title":"Comiss\u00f5es de um Influencer","text":"<pre><code>SELECT \n    v.title,\n    COUNT(i.id) as vendas,\n    SUM(i.amount) / 100.0 as total_comissao\nFROM incomes i\nINNER JOIN orders o ON o.id = i.order_id\nINNER JOIN videos v ON v.id = o.video_id\nWHERE i.owner_id = 123\n  AND i.type = 'Owner'\nGROUP BY v.id, v.title\nORDER BY total_comissao DESC;\n</code></pre>"},{"location":"fluxos-de-negocio/comissoes/#comissoes-de-um-promoter","title":"Comiss\u00f5es de um Promoter","text":"<pre><code>SELECT \n    v.title,\n    COUNT(i.id) as conversoes,\n    SUM(i.amount) / 100.0 as total_comissao\nFROM incomes i\nINNER JOIN orders o ON o.id = i.order_id\nINNER JOIN videos v ON v.id = o.video_id\nWHERE i.owner_id = 456\n  AND i.type = 'Promoter'\nGROUP BY v.id, v.title\nORDER BY total_comissao DESC;\n</code></pre>"},{"location":"fluxos-de-negocio/comissoes/#validacoes","title":"Valida\u00e7\u00f5es","text":"<ul> <li>Soma = 100%: Platform + Owner + Promoter = 100</li> <li>Values &gt; 0: Todos os percentuais &gt;= 0</li> <li>Arredondamento: Diferen\u00e7a de centavos vai para owner</li> <li>KYC aprovado: Promoter/Influencer devem ter KYC aprovado para receber</li> </ul>"},{"location":"fluxos-de-negocio/comissoes/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<ul> <li>Veja Split de Pagamento</li> <li>Consulte Tabela Income</li> <li>Entenda Gest\u00e3o de V\u00eddeos</li> </ul>"},{"location":"fluxos-de-negocio/compra-video/","title":"Fluxo: Compra de V\u00eddeo","text":""},{"location":"fluxos-de-negocio/compra-video/#descricao","title":"Descri\u00e7\u00e3o","text":"<p>O fluxo completo de compra de v\u00eddeo, desde a sele\u00e7\u00e3o at\u00e9 o acesso ao conte\u00fado ap\u00f3s pagamento confirmado. Veja Caso de Uso Completo para detalhes aprofundados.</p>"},{"location":"fluxos-de-negocio/compra-video/#diagrama-simplificado","title":"Diagrama Simplificado","text":"<pre><code>sequenceDiagram\n    participant U as Usu\u00e1rio\n    participant F as Frontend\n    participant B as Backend API\n    participant I as Iugu\n    participant DB as PostgreSQL\n\n    U-&gt;&gt;F: Seleciona v\u00eddeo\n    F-&gt;&gt;F: Verifica se j\u00e1 possui\n    U-&gt;&gt;F: Clica \"Comprar\"\n    F-&gt;&gt;B: POST /api/orders\n    B-&gt;&gt;DB: Verificar se j\u00e1 comprou\n    B-&gt;&gt;DB: Buscar config de comiss\u00f5es\n    B-&gt;&gt;B: Calcular split\n    B-&gt;&gt;DB: INSERT INTO orders\n    B-&gt;&gt;I: Criar invoice com split\n    I--&gt;&gt;B: invoice {id, secure_url}\n    B-&gt;&gt;DB: INSERT INTO payments\n    B--&gt;&gt;F: {iuguSecureUrl}\n    F-&gt;&gt;I: Redirecionar usu\u00e1rio\n    U-&gt;&gt;I: Paga com cart\u00e3o\n    I-&gt;&gt;B: Webhook: invoice.paid\n    B-&gt;&gt;DB: UPDATE payments\n    B-&gt;&gt;DB: INSERT INTO incomes (3x)\n    B-&gt;&gt;DB: INSERT INTO notifications\n    B--&gt;&gt;I: 200 OK\n    F-&gt;&gt;U: Notifica\u00e7\u00e3o de sucesso\n    U-&gt;&gt;F: Acessa \"Meus V\u00eddeos\"\n    F-&gt;&gt;B: GET /api/orders/my-orders\n    B--&gt;&gt;F: Lista de v\u00eddeos comprados\n    U-&gt;&gt;F: Clica \"Assistir\"\n    F-&gt;&gt;F: Cloudinary Player</code></pre>"},{"location":"fluxos-de-negocio/compra-video/#pontos-chave","title":"Pontos-Chave","text":""},{"location":"fluxos-de-negocio/compra-video/#1-validacao-de-compra-duplicada","title":"1. Valida\u00e7\u00e3o de Compra Duplicada","text":"<pre><code>var alreadyPurchased = await _context.Orders\n    .Include(o =&gt; o.Payment)\n    .AnyAsync(o =&gt; o.UserId == userId &amp;&amp; \n                  o.VideoId == videoId &amp;&amp;\n                  o.Payment.Status == PaymentStatusEnum.Paid);\n\nif (alreadyPurchased)\n    throw new InvalidOperationException(\"Voc\u00ea j\u00e1 possui este v\u00eddeo\");\n</code></pre>"},{"location":"fluxos-de-negocio/compra-video/#2-calculo-de-split","title":"2. C\u00e1lculo de Split","text":"<pre><code>var config = video.VideoRevenueConfig;\nvar totalCents = (int)(video.Price * 100);\n\nvar platformCents = (int)(totalCents * config.PlatformPercentage / 100);\nvar ownerCents = (int)(totalCents * config.OwnerPercentage / 100);\nvar promoterCents = (int)(totalCents * config.PromoterPercentage / 100);\n\n// Ajustar arredondamento\nvar diff = totalCents - (platformCents + ownerCents + promoterCents);\nif (diff != 0) ownerCents += diff;\n</code></pre>"},{"location":"fluxos-de-negocio/compra-video/#3-invoice-iugu-com-split","title":"3. Invoice Iugu com Split","text":"<pre><code>var splits = new List&lt;IuguSplitRule&gt;();\n\n// Owner/Influencer\nvar owner = video.OwnerVideos.First().Owner;\nsplits.Add(new IuguSplitRule\n{\n    ReceiverAccountId = owner.IuguAccountId,\n    AmountCents = ownerCents\n});\n\n// Promoter (se houver)\nif (order.PromoterId.HasValue)\n{\n    var promoter = await _context.Owners.FindAsync(order.PromoterId);\n    splits.Add(new IuguSplitRule\n    {\n        ReceiverAccountId = promoter.IuguAccountId,\n        AmountCents = promoterCents\n    });\n}\n\nvar invoice = await _iuguService.CreateInvoiceAsync(new\n{\n    Email = user.Email,\n    DueDateDays = 3,\n    Items = new[] { new { Description = video.Title, PriceCents = totalCents } },\n    PayerCpfCnpj = user.Cpf,\n    PayerName = $\"{user.FirstName} {user.LastName}\",\n    Splits = splits\n});\n</code></pre>"},{"location":"fluxos-de-negocio/compra-video/#4-webhook-de-confirmacao","title":"4. Webhook de Confirma\u00e7\u00e3o","text":"<pre><code>if (webhook.Event == \"invoice.status_changed\" &amp;&amp; webhook.Data.Status == \"paid\")\n{\n    await _paymentService.ConfirmPaymentAsync(webhook.Data.Id);\n}\n</code></pre>"},{"location":"fluxos-de-negocio/compra-video/#5-criacao-de-incomes","title":"5. Cria\u00e7\u00e3o de Incomes","text":"<pre><code>// 1. Plataforma\nawait _context.Incomes.AddAsync(new Income\n{\n    OrderId = order.Id,\n    OwnerId = null, // NULL = plataforma\n    Amount = order.PlatformAmount,\n    Type = IncomeTypeEnum.Platform\n});\n\n// 2. Owner\nawait _context.Incomes.AddAsync(new Income\n{\n    OrderId = order.Id,\n    OwnerId = owner.Id,\n    Amount = order.OwnerAmount,\n    Type = IncomeTypeEnum.Owner\n});\n\n// 3. Promoter (se houver)\nif (order.PromoterId.HasValue)\n{\n    await _context.Incomes.AddAsync(new Income\n    {\n        OrderId = order.Id,\n        OwnerId = order.PromoterId.Value,\n        Amount = order.PromoterAmount,\n        Type = IncomeTypeEnum.Promoter\n    });\n}\n</code></pre>"},{"location":"fluxos-de-negocio/compra-video/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<ul> <li>Veja Caso de Uso Completo</li> <li>Consulte Split de Pagamento</li> <li>Entenda Webhooks Iugu</li> </ul>"},{"location":"fluxos-de-negocio/gestao-videos/","title":"Fluxo: Gest\u00e3o de V\u00eddeos","text":""},{"location":"fluxos-de-negocio/gestao-videos/#descricao","title":"Descri\u00e7\u00e3o","text":"<p>Administradores gerenciam o cat\u00e1logo de v\u00eddeos: upload, configura\u00e7\u00e3o de pre\u00e7os e comiss\u00f5es, vincula\u00e7\u00e3o com influencers e publica\u00e7\u00e3o.</p>"},{"location":"fluxos-de-negocio/gestao-videos/#diagrama-de-processo","title":"Diagrama de Processo","text":"<pre><code>flowchart TD\n    A[Admin acessa dashboard] --&gt; B[Clica \"Novo V\u00eddeo\"]\n    B --&gt; C[Preenche formul\u00e1rio]\n    C --&gt; D[Upload de v\u00eddeo para Cloudinary]\n    D --&gt; E[Salvar v\u00eddeo no banco]\n    E --&gt; F[Configurar VideoRevenueConfig]\n    F --&gt; G{Promoter % &gt; 0?}\n    G --&gt;|Sim| H[V\u00eddeo aparece para promoters]\n    G --&gt;|N\u00e3o| I[V\u00eddeo N\u00c3O aparece para promoters]\n    H --&gt; J[Vincular influencers]\n    I --&gt; J\n    J --&gt; K[Definir datas]\n    K --&gt; L[Publicar v\u00eddeo]\n    L --&gt; M[V\u00eddeo dispon\u00edvel para venda]</code></pre>"},{"location":"fluxos-de-negocio/gestao-videos/#upload-para-cloudinary","title":"Upload para Cloudinary","text":""},{"location":"fluxos-de-negocio/gestao-videos/#frontend","title":"Frontend","text":"<pre><code>const handleVideoUpload = async (file: File) =&gt; {\n  const formData = new FormData();\n  formData.append(\"video\", file);\n  formData.append(\"title\", videoTitle);\n  formData.append(\"description\", description);\n  formData.append(\"price\", price.toString());\n\n  const response = await adminApi.uploadVideo(formData);\n  return response.data;\n};\n</code></pre>"},{"location":"fluxos-de-negocio/gestao-videos/#backend","title":"Backend","text":"<pre><code>app.MapPost(\"/api/admin/videos/upload\", async (\n    HttpRequest request,\n    ICloudinaryService cloudinary,\n    ApplicationDbContext context) =&gt;\n{\n    var form = await request.ReadFormAsync();\n    var videoFile = form.Files[\"video\"];\n\n    // Upload para Cloudinary\n    var uploadParams = new VideoUploadParams\n    {\n        File = new FileDescription(videoFile.FileName, videoFile.OpenReadStream()),\n        PublicId = $\"videos/{Guid.NewGuid()}\",\n        ResourceType = ResourceType.Video,\n        Folder = \"amasso-videos\",\n        Overwrite = false\n    };\n\n    var result = await cloudinary.UploadVideoAsync(uploadParams);\n\n    // Criar v\u00eddeo no banco\n    var video = new Video\n    {\n        Title = form[\"title\"],\n        Description = form[\"description\"],\n        CloudinaryPublicId = result.PublicId,\n        DurationSeconds = result.Duration,\n        ThumbImgUrl = result.SecureUrl.Replace(\"/upload/\", \"/upload/c_thumb,w_300/\"),\n        Price = decimal.Parse(form[\"price\"]),\n        IsActive = false, // Inativo at\u00e9 configurar comiss\u00f5es\n        CreatedAt = DateTime.UtcNow\n    };\n\n    await context.Videos.AddAsync(video);\n    await context.SaveChangesAsync();\n\n    return Results.Ok(video);\n})\n.RequireAuthorization(\"Admin\")\n.DisableAntiforgery();\n</code></pre>"},{"location":"fluxos-de-negocio/gestao-videos/#configuracao-de-comissoes","title":"Configura\u00e7\u00e3o de Comiss\u00f5es","text":"<pre><code>const handleConfigureRevenue = async (videoId: number, config: RevenueConfig) =&gt; {\n  await adminApi.configureVideoRevenue(videoId, {\n    platformPercentage: config.platformPercentage,\n    ownerPercentage: config.ownerPercentage,\n    promoterPercentage: config.promoterPercentage\n  });\n};\n\n// Valida\u00e7\u00e3o: soma deve ser 100%\nconst total = platformPercentage + ownerPercentage + promoterPercentage;\nif (total !== 100) {\n  toast.error(\"A soma das porcentagens deve ser 100%\");\n  return;\n}\n</code></pre> <pre><code>app.MapPost(\"/api/admin/videos/{videoId:long}/revenue-config\", async (\n    long videoId,\n    VideoRevenueConfigDto dto,\n    ApplicationDbContext context) =&gt;\n{\n    // Validar soma = 100%\n    if (dto.PlatformPercentage + dto.OwnerPercentage + dto.PromoterPercentage != 100)\n        return Results.BadRequest(\"Soma deve ser 100%\");\n\n    // Criar ou atualizar config\n    var config = await context.VideoRevenueConfigs\n        .FirstOrDefaultAsync(c =&gt; c.VideoId == videoId);\n\n    if (config == null)\n    {\n        config = new VideoRevenueConfig\n        {\n            VideoId = videoId,\n            PlatformPercentage = dto.PlatformPercentage,\n            OwnerPercentage = dto.OwnerPercentage,\n            PromoterPercentage = dto.PromoterPercentage,\n            CreatedAt = DateTime.UtcNow\n        };\n        await context.VideoRevenueConfigs.AddAsync(config);\n    }\n    else\n    {\n        config.PlatformPercentage = dto.PlatformPercentage;\n        config.OwnerPercentage = dto.OwnerPercentage;\n        config.PromoterPercentage = dto.PromoterPercentage;\n        config.UpdatedAt = DateTime.UtcNow;\n    }\n\n    await context.SaveChangesAsync();\n\n    return Results.Ok(config);\n})\n.RequireAuthorization(\"Admin\");\n</code></pre>"},{"location":"fluxos-de-negocio/gestao-videos/#vinculacao-com-influencers","title":"Vincula\u00e7\u00e3o com Influencers","text":"<pre><code>const handleAddInfluencer = async (videoId: number, influencerId: number) =&gt; {\n  await adminApi.addInfluencerToVideo(videoId, { influencerId });\n  toast.success(\"Influencer adicionado!\");\n};\n</code></pre> <pre><code>app.MapPost(\"/api/admin/videos/{videoId:long}/add-influencer\", async (\n    long videoId,\n    AddInfluencerDto dto,\n    ApplicationDbContext context) =&gt;\n{\n    var owner = await context.Owners\n        .FirstOrDefaultAsync(o =&gt; o.Id == dto.InfluencerId &amp;&amp;\n                                  o.Type == OwnerTypeEnum.Influencer);\n\n    if (owner == null)\n        return Results.BadRequest(\"Influencer n\u00e3o encontrado\");\n\n    if (owner.SubAccountStatus != OwnerSubAccountStatusEnum.Approved)\n        return Results.BadRequest(\"KYC do influencer n\u00e3o aprovado\");\n\n    var ownerVideo = new OwnerVideo\n    {\n        VideoId = videoId,\n        OwnerId = dto.InfluencerId,\n        CreatedAt = DateTime.UtcNow\n    };\n\n    await context.OwnerVideos.AddAsync(ownerVideo);\n    await context.SaveChangesAsync();\n\n    return Results.Ok();\n})\n.RequireAuthorization(\"Admin\");\n</code></pre>"},{"location":"fluxos-de-negocio/gestao-videos/#datas-de-publicacao","title":"Datas de Publica\u00e7\u00e3o","text":"<pre><code>const dateConfig = {\n  releaseDate: \"2025-12-01\", // Lan\u00e7amento\n  expirationSaleDate: \"2025-12-31\", // Fim das vendas\n  expirationViewDate: \"2026-01-31\" // Fim da visualiza\u00e7\u00e3o\n};\n\nawait adminApi.updateVideo(videoId, dateConfig);\n</code></pre> <ul> <li>ReleaseDate: V\u00eddeo s\u00f3 aparece no cat\u00e1logo ap\u00f3s esta data</li> <li>ExpirationSaleDate: At\u00e9 esta data pode ser comprado</li> <li>ExpirationViewDate: At\u00e9 esta data pode ser assistido (por quem comprou)</li> </ul>"},{"location":"fluxos-de-negocio/gestao-videos/#regra-promoter-0","title":"Regra: Promoter % = 0%","text":"<pre><code>// Endpoint para listar v\u00eddeos dispon\u00edveis para promoters\napp.MapGet(\"/api/videos/for-promoters\", async (ApplicationDbContext context) =&gt;\n{\n    var videos = await context.Videos\n        .Include(v =&gt; v.VideoRevenueConfig)\n        .Where(v =&gt; v.IsActive &amp;&amp;\n                    v.VideoRevenueConfig.PromoterPercentage &gt; 0 &amp;&amp; // &lt;--- Filtro\n                    (v.ReleaseDate == null || v.ReleaseDate &lt;= DateTime.Today) &amp;&amp;\n                    (v.ExpirationSaleDate == null || v.ExpirationSaleDate &gt;= DateTime.Today))\n        .ToListAsync();\n\n    return Results.Ok(videos);\n});\n</code></pre> <p>Se <code>promoter_percentage = 0%</code>, o v\u00eddeo n\u00e3o aparece na lista de v\u00eddeos dispon\u00edveis para promoters gerarem links de afiliado.</p>"},{"location":"fluxos-de-negocio/gestao-videos/#fluxo-completo-no-admin","title":"Fluxo Completo no Admin","text":"<pre><code>const handleCreateVideo = async (data: VideoForm) =&gt; {\n  // 1. Upload do v\u00eddeo\n  const video = await adminApi.uploadVideo(data.videoFile, data);\n\n  // 2. Configurar comiss\u00f5es\n  await adminApi.configureVideoRevenue(video.id, {\n    platformPercentage: 20,\n    ownerPercentage: 50,\n    promoterPercentage: 30\n  });\n\n  // 3. Adicionar influencers\n  for (const influencerId of data.influencerIds) {\n    await adminApi.addInfluencerToVideo(video.id, { influencerId });\n  }\n\n  // 4. Definir datas\n  await adminApi.updateVideo(video.id, {\n    releaseDate: data.releaseDate,\n    expirationSaleDate: data.expirationSaleDate,\n    expirationViewDate: data.expirationViewDate\n  });\n\n  // 5. Ativar v\u00eddeo\n  await adminApi.updateVideo(video.id, { isActive: true });\n\n  toast.success(\"V\u00eddeo publicado com sucesso!\");\n};\n</code></pre>"},{"location":"fluxos-de-negocio/gestao-videos/#validacoes","title":"Valida\u00e7\u00f5es","text":"<ul> <li>T\u00edtulo: M\u00ednimo 3 caracteres</li> <li>Pre\u00e7o: Maior que 0</li> <li>VideoRevenueConfig: Soma = 100%</li> <li>Influencer: Deve ter KYC aprovado</li> <li>CloudinaryPublicId: Obrigat\u00f3rio</li> <li>Datas: ExpirationSaleDate &gt;= ReleaseDate</li> </ul>"},{"location":"fluxos-de-negocio/gestao-videos/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<ul> <li>Veja Perfil Admin</li> <li>Consulte Comiss\u00f5es</li> <li>Entenda Banco: Videos</li> </ul>"},{"location":"fluxos-de-negocio/kyc-promoter-influencer/","title":"Fluxo: KYC Promoter/Influencer","text":""},{"location":"fluxos-de-negocio/kyc-promoter-influencer/#descricao","title":"Descri\u00e7\u00e3o","text":"<p>O fluxo de KYC (Know Your Customer) \u00e9 obrigat\u00f3rio para Promoters e Influencers que desejam receber comiss\u00f5es. O processo envolve envio de documentos, cria\u00e7\u00e3o de subconta Iugu e aprova\u00e7\u00e3o por um Admin.</p>"},{"location":"fluxos-de-negocio/kyc-promoter-influencer/#diagrama-de-estados","title":"Diagrama de Estados","text":"<pre><code>stateDiagram-v2\n    [*] --&gt; SemOwner: User se cadastra como&lt;br/&gt;Promoter/Influencer\n    SemOwner --&gt; OwnerCriado: Owner criado automaticamente&lt;br/&gt;status=NULL\n    OwnerCriado --&gt; DocumentosEnviados: Usu\u00e1rio envia&lt;br/&gt;documentos + dados banc\u00e1rios\n    DocumentosEnviados --&gt; SubcontaCriada: Backend cria&lt;br/&gt;subconta no Iugu\n    SubcontaCriada --&gt; Pendente: status=Pending&lt;br/&gt;Notifica Admin\n    Pendente --&gt; Aprovado: Admin aprova&lt;br/&gt;Iugu ativa subconta\n    Pendente --&gt; Rejeitado: Admin rejeita&lt;br/&gt;com motivo\n    Rejeitado --&gt; DocumentosEnviados: Usu\u00e1rio reenvia&lt;br/&gt;documentos\n    Aprovado --&gt; [*]: Pode receber comiss\u00f5es</code></pre>"},{"location":"fluxos-de-negocio/kyc-promoter-influencer/#componentes-envolvidos","title":"Componentes Envolvidos","text":""},{"location":"fluxos-de-negocio/kyc-promoter-influencer/#1-frontend-envio-de-documentos","title":"1. Frontend - Envio de Documentos","text":"<pre><code>// frontend-react/src/pages/Owner/KycSubmission.tsx\nimport { useForm } from \"react-hook-form\";\nimport { ownerApi } from \"@/services/api/ownerApi\";\n\ninterface KycForm {\n  // Dados pessoais\n  cpf: string;\n  rg: string;\n  birthDate: string;\n\n  // Endere\u00e7o\n  addressStreet: string;\n  addressNumber: string;\n  addressComplement?: string;\n  addressNeighborhood: string;\n  addressCity: string;\n  addressState: string;\n  addressZipcode: string;\n\n  // Dados banc\u00e1rios\n  bankCode: string;\n  bankAgency: string;\n  bankAccount: string;\n  bankAccountType: \"corrente\" | \"poupanca\";\n\n  // Documentos\n  cpfFile: FileList;\n  rgFile: FileList;\n  addressProofFile: FileList;\n  selfieFile: FileList;\n}\n\nexport const KycSubmission = () =&gt; {\n  const { register, handleSubmit, formState: { errors } } = useForm&lt;KycForm&gt;();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const onSubmit = async (data: KycForm) =&gt; {\n    setIsSubmitting(true);\n\n    try {\n      const formData = new FormData();\n\n      // Dados pessoais\n      formData.append(\"cpf\", data.cpf);\n      formData.append(\"rg\", data.rg);\n      formData.append(\"birthDate\", data.birthDate);\n\n      // Endere\u00e7o\n      formData.append(\"addressStreet\", data.addressStreet);\n      formData.append(\"addressNumber\", data.addressNumber);\n      formData.append(\"addressComplement\", data.addressComplement || \"\");\n      formData.append(\"addressNeighborhood\", data.addressNeighborhood);\n      formData.append(\"addressCity\", data.addressCity);\n      formData.append(\"addressState\", data.addressState);\n      formData.append(\"addressZipcode\", data.addressZipcode);\n\n      // Dados banc\u00e1rios\n      formData.append(\"bankCode\", data.bankCode);\n      formData.append(\"bankAgency\", data.bankAgency);\n      formData.append(\"bankAccount\", data.bankAccount);\n      formData.append(\"bankAccountType\", data.bankAccountType);\n\n      // Documentos\n      formData.append(\"cpfFile\", data.cpfFile[0]);\n      formData.append(\"rgFile\", data.rgFile[0]);\n      formData.append(\"addressProofFile\", data.addressProofFile[0]);\n      formData.append(\"selfieFile\", data.selfieFile[0]);\n\n      await ownerApi.submitKyc(formData);\n\n      toast.success(\"Documentos enviados com sucesso! Aguarde aprova\u00e7\u00e3o.\");\n      navigate(\"/dashboard\");\n    } catch (error) {\n      toast.error(\"Erro ao enviar documentos\");\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    &lt;form onSubmit={handleSubmit(onSubmit)}&gt;\n      &lt;h1&gt;Envio de Documentos KYC&lt;/h1&gt;\n\n      &lt;section&gt;\n        &lt;h2&gt;Dados Pessoais&lt;/h2&gt;\n        &lt;input {...register(\"cpf\", { required: true })} placeholder=\"CPF\" /&gt;\n        &lt;input {...register(\"rg\", { required: true })} placeholder=\"RG\" /&gt;\n        &lt;input type=\"date\" {...register(\"birthDate\", { required: true })} /&gt;\n      &lt;/section&gt;\n\n      &lt;section&gt;\n        &lt;h2&gt;Endere\u00e7o&lt;/h2&gt;\n        &lt;input {...register(\"addressZipcode\")} placeholder=\"CEP\" /&gt;\n        &lt;input {...register(\"addressStreet\")} placeholder=\"Rua\" /&gt;\n        &lt;input {...register(\"addressNumber\")} placeholder=\"N\u00famero\" /&gt;\n        &lt;input {...register(\"addressComplement\")} placeholder=\"Complemento\" /&gt;\n        &lt;input {...register(\"addressNeighborhood\")} placeholder=\"Bairro\" /&gt;\n        &lt;input {...register(\"addressCity\")} placeholder=\"Cidade\" /&gt;\n        &lt;select {...register(\"addressState\")}&gt;\n          &lt;option value=\"SP\"&gt;SP&lt;/option&gt;\n          &lt;option value=\"RJ\"&gt;RJ&lt;/option&gt;\n          {/* ... outros estados */}\n        &lt;/select&gt;\n      &lt;/section&gt;\n\n      &lt;section&gt;\n        &lt;h2&gt;Dados Banc\u00e1rios&lt;/h2&gt;\n        &lt;input {...register(\"bankCode\")} placeholder=\"C\u00f3digo do Banco\" /&gt;\n        &lt;input {...register(\"bankAgency\")} placeholder=\"Ag\u00eancia\" /&gt;\n        &lt;input {...register(\"bankAccount\")} placeholder=\"Conta\" /&gt;\n        &lt;select {...register(\"bankAccountType\")}&gt;\n          &lt;option value=\"corrente\"&gt;Corrente&lt;/option&gt;\n          &lt;option value=\"poupanca\"&gt;Poupan\u00e7a&lt;/option&gt;\n        &lt;/select&gt;\n      &lt;/section&gt;\n\n      &lt;section&gt;\n        &lt;h2&gt;Documentos&lt;/h2&gt;\n        &lt;label&gt;\n          CPF (frente e verso):\n          &lt;input type=\"file\" accept=\"image/*,application/pdf\" {...register(\"cpfFile\", { required: true })} /&gt;\n        &lt;/label&gt;\n\n        &lt;label&gt;\n          RG (frente e verso):\n          &lt;input type=\"file\" accept=\"image/*,application/pdf\" {...register(\"rgFile\", { required: true })} /&gt;\n        &lt;/label&gt;\n\n        &lt;label&gt;\n          Comprovante de Endere\u00e7o:\n          &lt;input type=\"file\" accept=\"image/*,application/pdf\" {...register(\"addressProofFile\", { required: true })} /&gt;\n        &lt;/label&gt;\n\n        &lt;label&gt;\n          Selfie com Documento:\n          &lt;input type=\"file\" accept=\"image/*\" {...register(\"selfieFile\", { required: true })} /&gt;\n        &lt;/label&gt;\n      &lt;/section&gt;\n\n      &lt;button type=\"submit\" disabled={isSubmitting}&gt;\n        {isSubmitting ? \"Enviando...\" : \"Enviar Documentos\"}\n      &lt;/button&gt;\n    &lt;/form&gt;\n  );\n};\n</code></pre>"},{"location":"fluxos-de-negocio/kyc-promoter-influencer/#2-backend-recebimento-de-documentos","title":"2. Backend - Recebimento de Documentos","text":"<p>J\u00e1 documentado em Processo KYC, mas segue resumo:</p> <pre><code>// backend-api/Endpoints/OwnerEndpoints.cs\napp.MapPost(\"/api/owners/kyc\", async (\n    HttpRequest request,\n    OwnerService service,\n    ICloudinaryService cloudinary,\n    IIuguService iugu) =&gt;\n{\n    var userId = GetUserIdFromToken(request);\n    var form = await request.ReadFormAsync();\n\n    // Upload documentos para Cloudinary\n    var cpfUrl = await cloudinary.UploadAsync(form.Files[\"cpfFile\"]);\n    var rgUrl = await cloudinary.UploadAsync(form.Files[\"rgFile\"]);\n    var addressProofUrl = await cloudinary.UploadAsync(form.Files[\"addressProofFile\"]);\n    var selfieUrl = await cloudinary.UploadAsync(form.Files[\"selfieFile\"]);\n\n    var dto = new SubmitKycDto\n    {\n        Cpf = form[\"cpf\"],\n        Rg = form[\"rg\"],\n        BirthDate = DateTime.Parse(form[\"birthDate\"]),\n        AddressStreet = form[\"addressStreet\"],\n        AddressNumber = form[\"addressNumber\"],\n        AddressComplement = form[\"addressComplement\"],\n        AddressNeighborhood = form[\"addressNeighborhood\"],\n        AddressCity = form[\"addressCity\"],\n        AddressState = form[\"addressState\"],\n        AddressZipcode = form[\"addressZipcode\"],\n        BankCode = form[\"bankCode\"],\n        BankAgency = form[\"bankAgency\"],\n        BankAccount = form[\"bankAccount\"],\n        BankAccountType = form[\"bankAccountType\"],\n        DocumentCpfUrl = cpfUrl,\n        DocumentRgUrl = rgUrl,\n        DocumentAddressProofUrl = addressProofUrl,\n        DocumentSelfieUrl = selfieUrl\n    };\n\n    await service.SubmitKycAsync(userId, dto, iugu);\n\n    return Results.Ok(new { message = \"KYC enviado com sucesso!\" });\n})\n.RequireAuthorization()\n.DisableAntiforgery();\n</code></pre>"},{"location":"fluxos-de-negocio/kyc-promoter-influencer/#3-ownerservice-processamento-kyc","title":"3. OwnerService - Processamento KYC","text":"<pre><code>// backend-api/Services/OwnerService.cs\npublic async Task SubmitKycAsync(long userId, SubmitKycDto dto, IIuguService iugu)\n{\n    var owner = await _context.Owners\n        .Include(o =&gt; o.User)\n        .FirstOrDefaultAsync(o =&gt; o.UserId == userId);\n\n    if (owner == null)\n    {\n        // Criar owner se n\u00e3o existe\n        owner = new Owner\n        {\n            UserId = userId,\n            Type = OwnerTypeEnum.Promoter, // ou Influencer\n            CreatedAt = DateTime.UtcNow\n        };\n\n        await _context.Owners.AddAsync(owner);\n        await _context.SaveChangesAsync();\n    }\n\n    // Atualizar dados\n    owner.CpfCnpj = dto.Cpf;\n    owner.Rg = dto.Rg;\n    owner.BirthDate = dto.BirthDate;\n    owner.AddressStreet = dto.AddressStreet;\n    owner.AddressNumber = dto.AddressNumber;\n    owner.AddressComplement = dto.AddressComplement;\n    owner.AddressNeighborhood = dto.AddressNeighborhood;\n    owner.AddressCity = dto.AddressCity;\n    owner.AddressState = dto.AddressState;\n    owner.AddressZipcode = dto.AddressZipcode;\n    owner.BankCode = dto.BankCode;\n    owner.BankAgency = dto.BankAgency;\n    owner.BankAccount = dto.BankAccount;\n    owner.BankAccountType = dto.BankAccountType;\n    owner.DocumentCpfUrl = dto.DocumentCpfUrl;\n    owner.DocumentRgUrl = dto.DocumentRgUrl;\n    owner.DocumentAddressProofUrl = dto.DocumentAddressProofUrl;\n    owner.DocumentSelfieUrl = dto.DocumentSelfieUrl;\n\n    // Criar ou atualizar subconta Iugu\n    if (string.IsNullOrEmpty(owner.IuguAccountId))\n    {\n        var subAccount = await iugu.CreateSubAccountAsync(owner);\n        owner.IuguAccountId = subAccount.AccountId;\n    }\n    else\n    {\n        await iugu.UpdateSubAccountAsync(owner);\n    }\n\n    owner.SubAccountStatus = OwnerSubAccountStatusEnum.Pending;\n    owner.UpdatedAt = DateTime.UtcNow;\n\n    await _context.SaveChangesAsync();\n\n    // Notificar admin\n    await _notificationService.NotifyAdminKycPendingAsync(owner.Id);\n}\n</code></pre>"},{"location":"fluxos-de-negocio/kyc-promoter-influencer/#4-admin-lista-de-kyc-pendentes","title":"4. Admin - Lista de KYC Pendentes","text":"<pre><code>// frontend-react/src/pages/Admin/KycApprovals.tsx\nexport const KycApprovals = () =&gt; {\n  const { data: pendingKyc } = useQuery({\n    queryKey: [\"pending-kyc\"],\n    queryFn: async () =&gt; {\n      const response = await adminApi.getPendingKyc();\n      return response.data;\n    }\n  });\n\n  const handleApprove = async (ownerId: number) =&gt; {\n    if (!confirm(\"Aprovar este KYC?\")) return;\n\n    try {\n      await adminApi.approveKyc(ownerId);\n      toast.success(\"KYC aprovado!\");\n      queryClient.invalidateQueries([\"pending-kyc\"]);\n    } catch (error) {\n      toast.error(\"Erro ao aprovar KYC\");\n    }\n  };\n\n  const handleReject = async (ownerId: number) =&gt; {\n    const reason = prompt(\"Motivo da rejei\u00e7\u00e3o:\");\n    if (!reason) return;\n\n    try {\n      await adminApi.rejectKyc(ownerId, { reason });\n      toast.success(\"KYC rejeitado\");\n      queryClient.invalidateQueries([\"pending-kyc\"]);\n    } catch (error) {\n      toast.error(\"Erro ao rejeitar KYC\");\n    }\n  };\n\n  return (\n    &lt;Table&gt;\n      &lt;thead&gt;\n        &lt;tr&gt;\n          &lt;th&gt;Usu\u00e1rio&lt;/th&gt;\n          &lt;th&gt;Tipo&lt;/th&gt;\n          &lt;th&gt;CPF&lt;/th&gt;\n          &lt;th&gt;Enviado em&lt;/th&gt;\n          &lt;th&gt;A\u00e7\u00f5es&lt;/th&gt;\n        &lt;/tr&gt;\n      &lt;/thead&gt;\n      &lt;tbody&gt;\n        {pendingKyc?.map(kyc =&gt; (\n          &lt;tr key={kyc.id}&gt;\n            &lt;td&gt;{kyc.userName}&lt;/td&gt;\n            &lt;td&gt;{kyc.type}&lt;/td&gt;\n            &lt;td&gt;{kyc.cpf}&lt;/td&gt;\n            &lt;td&gt;{format(kyc.updatedAt, \"dd/MM/yyyy HH:mm\")}&lt;/td&gt;\n            &lt;td&gt;\n              &lt;Button onClick={() =&gt; handleViewDocuments(kyc.id)}&gt;\n                Ver Documentos\n              &lt;/Button&gt;\n              &lt;Button color=\"green\" onClick={() =&gt; handleApprove(kyc.id)}&gt;\n                Aprovar\n              &lt;/Button&gt;\n              &lt;Button color=\"red\" onClick={() =&gt; handleReject(kyc.id)}&gt;\n                Rejeitar\n              &lt;/Button&gt;\n            &lt;/td&gt;\n          &lt;/tr&gt;\n        ))}\n      &lt;/tbody&gt;\n    &lt;/Table&gt;\n  );\n};\n</code></pre>"},{"location":"fluxos-de-negocio/kyc-promoter-influencer/#5-admin-aprovacao-de-kyc","title":"5. Admin - Aprova\u00e7\u00e3o de KYC","text":"<pre><code>// backend-api/Services/Admin/AdminService.cs\npublic async Task ApproveKycAsync(long ownerId, long adminUserId)\n{\n    var owner = await _context.Owners\n        .Include(o =&gt; o.User)\n        .FirstAsync(o =&gt; o.Id == ownerId);\n\n    if (owner.SubAccountStatus != OwnerSubAccountStatusEnum.Pending)\n        throw new InvalidOperationException(\"KYC n\u00e3o est\u00e1 pendente\");\n\n    // Ativar subconta no Iugu\n    await _iuguService.VerifySubAccountAsync(owner.IuguAccountId);\n\n    owner.SubAccountStatus = OwnerSubAccountStatusEnum.Approved;\n    owner.UpdatedAt = DateTime.UtcNow;\n\n    await _context.SaveChangesAsync();\n\n    // Notificar usu\u00e1rio\n    var notification = new Notification\n    {\n        Type = NotificationTypeEnum.KycApproved,\n        Channel = owner.User.NotificationPreference ?? NotificationChannelEnum.Email,\n        Email = owner.User.Email,\n        Phone = owner.User.Telephone,\n        MetadataJson = JsonSerializer.Serialize(new\n        {\n            OwnerType = owner.Type.ToString()\n        }),\n        CreatedAt = DateTime.UtcNow\n    };\n\n    await _context.Notifications.AddAsync(notification);\n    await _context.SaveChangesAsync();\n}\n</code></pre>"},{"location":"fluxos-de-negocio/kyc-promoter-influencer/#documentos-necessarios","title":"Documentos Necess\u00e1rios","text":"<ol> <li>CPF: Frente e verso (imagem ou PDF)</li> <li>RG: Frente e verso (imagem ou PDF)</li> <li>Comprovante de Endere\u00e7o: M\u00e1ximo 3 meses (imagem ou PDF)</li> <li>Selfie com Documento: Foto segurando o documento (imagem)</li> </ol>"},{"location":"fluxos-de-negocio/kyc-promoter-influencer/#validacoes","title":"Valida\u00e7\u00f5es","text":"<ul> <li>Todos os 4 documentos s\u00e3o obrigat\u00f3rios</li> <li>Imagens devem estar leg\u00edveis</li> <li>Endere\u00e7o deve estar completo</li> <li>Dados banc\u00e1rios devem ser v\u00e1lidos</li> <li>CPF deve ser v\u00e1lido</li> </ul>"},{"location":"fluxos-de-negocio/kyc-promoter-influencer/#regras-de-negocio","title":"Regras de Neg\u00f3cio","text":"<ol> <li>Obrigat\u00f3rio para comiss\u00f5es: Sem KYC aprovado, n\u00e3o recebe</li> <li>Subconta Iugu: Criada ao enviar documentos</li> <li>Aprova\u00e7\u00e3o manual: Admin analisa e aprova/rejeita</li> <li>Reenvio permitido: Pode reenviar ap\u00f3s rejei\u00e7\u00e3o</li> <li>Notifica\u00e7\u00f5es: Usu\u00e1rio notificado em cada mudan\u00e7a de status</li> </ol>"},{"location":"fluxos-de-negocio/kyc-promoter-influencer/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<ul> <li>Veja Conta Master e Subcontas</li> <li>Consulte Perfil Promoter</li> <li>Entenda Perfil Influencer</li> </ul>"},{"location":"fluxos-de-negocio/link-afiliado/","title":"Fluxo: Link de Afiliado","text":""},{"location":"fluxos-de-negocio/link-afiliado/#descricao","title":"Descri\u00e7\u00e3o","text":"<p>Promoters podem gerar links exclusivos para divulgar v\u00eddeos e receber comiss\u00f5es. O link rastreia cliques e convers\u00f5es.</p>"},{"location":"fluxos-de-negocio/link-afiliado/#diagrama-de-fluxo","title":"Diagrama de Fluxo","text":"<pre><code>sequenceDiagram\n    participant P as Promoter\n    participant F as Frontend\n    participant B as Backend\n    participant DB as PostgreSQL\n    participant U as Usu\u00e1rio Final\n\n    P-&gt;&gt;F: Acessa dashboard\n    F-&gt;&gt;B: GET /api/videos/for-promoters\n    B-&gt;&gt;DB: SELECT videos WHERE promoter% &gt; 0\n    DB--&gt;&gt;B: videos\n    B--&gt;&gt;F: Lista de v\u00eddeos\n    P-&gt;&gt;F: Escolhe v\u00eddeo\n    F-&gt;&gt;B: POST /api/promoter/affiliate-links\n    B-&gt;&gt;DB: Verificar se link j\u00e1 existe\n    alt Link n\u00e3o existe\n        B-&gt;&gt;B: Gerar c\u00f3digo \u00fanico (8 chars)\n        B-&gt;&gt;DB: INSERT INTO video_affiliate_links\n        DB--&gt;&gt;B: link {id, unique_code}\n    else Link existe\n        DB--&gt;&gt;B: link existente\n    end\n    B--&gt;&gt;F: {uniqueCode: \"ABC12345\"}\n    F-&gt;&gt;F: Copiar link completo\n    P-&gt;&gt;P: Divulga link nas redes\n\n    U-&gt;&gt;F: Clica no link (/?ref=ABC12345)\n    F-&gt;&gt;B: POST /api/videos/affiliate-click/ABC12345\n    B-&gt;&gt;DB: UPDATE video_affiliate_links SET clicks++\n    F-&gt;&gt;F: Salvar ref em localStorage\n    U-&gt;&gt;F: Compra v\u00eddeo\n    F-&gt;&gt;B: POST /api/orders {affiliateCode}\n    B-&gt;&gt;DB: Buscar link e vincular promoter\n    B-&gt;&gt;DB: INSERT order com promoter_id</code></pre>"},{"location":"fluxos-de-negocio/link-afiliado/#componentes-principais","title":"Componentes Principais","text":""},{"location":"fluxos-de-negocio/link-afiliado/#1-gerar-link","title":"1. Gerar Link","text":"<pre><code>const handleCreateLink = async (videoId: number) =&gt; {\n  const response = await promoterApi.createAffiliateLink({ videoId });\n  const fullLink = `${window.location.origin}/videos/${videoId}?ref=${response.data.uniqueCode}`;\n\n  navigator.clipboard.writeText(fullLink);\n  toast.success(\"Link copiado!\");\n};\n</code></pre> <pre><code>app.MapPost(\"/api/promoter/affiliate-links\", async (CreateAffiliateLinkDto dto, ...) =&gt;\n{\n    // Verificar KYC aprovado\n    if (owner.SubAccountStatus != OwnerSubAccountStatusEnum.Approved)\n        return Results.BadRequest(\"KYC n\u00e3o aprovado\");\n\n    // Verificar se v\u00eddeo tem comiss\u00e3o\n    if (video.VideoRevenueConfig.PromoterPercentage &lt;= 0)\n        return Results.BadRequest(\"V\u00eddeo sem comiss\u00e3o para promoters\");\n\n    // Criar link\n    var link = new VideoAffiliateLink\n    {\n        OwnerId = owner.Id,\n        VideoId = dto.VideoId,\n        UniqueCode = GenerateUniqueCode(),\n        Clicks = 0,\n        CreatedAt = DateTime.UtcNow\n    };\n\n    await _context.AddAsync(link);\n    await _context.SaveChangesAsync();\n\n    return Results.Ok(link);\n});\n</code></pre>"},{"location":"fluxos-de-negocio/link-afiliado/#2-rastrear-clique","title":"2. Rastrear Clique","text":"<pre><code>useEffect(() =&gt; {\n  const ref = new URLSearchParams(window.location.search).get(\"ref\");\n  if (ref) {\n    localStorage.setItem(\"affiliateRef\", ref);\n    videoApi.trackAffiliateClick(ref);\n  }\n}, []);\n</code></pre> <pre><code>app.MapPost(\"/api/videos/affiliate-click/{code}\", async (string code, ...) =&gt;\n{\n    var link = await _context.VideoAffiliateLinks\n        .FirstOrDefaultAsync(l =&gt; l.UniqueCode == code);\n\n    if (link != null)\n    {\n        link.Clicks++;\n        await _context.SaveChangesAsync();\n    }\n\n    return Results.Ok();\n}).AllowAnonymous();\n</code></pre>"},{"location":"fluxos-de-negocio/link-afiliado/#3-vincular-na-compra","title":"3. Vincular na Compra","text":"<pre><code>const handleCheckout = async () =&gt; {\n  const affiliateCode = localStorage.getItem(\"affiliateRef\");\n\n  const order = await orderApi.create({\n    videoId,\n    affiliateCode // Envia o c\u00f3digo\n  });\n\n  window.location.href = order.payment.iuguSecureUrl;\n};\n</code></pre> <pre><code>public async Task&lt;Order&gt; CreateOrderAsync(CreateOrderDto dto, long userId)\n{\n    // ... criar order\n\n    if (!string.IsNullOrEmpty(dto.AffiliateCode))\n    {\n        var link = await _context.VideoAffiliateLinks\n            .Include(l =&gt; l.Owner)\n            .FirstOrDefaultAsync(l =&gt; l.UniqueCode == dto.AffiliateCode);\n\n        if (link != null &amp;&amp; link.Owner.SubAccountStatus == OwnerSubAccountStatusEnum.Approved)\n        {\n            order.PromoterId = link.OwnerId;\n            order.VideoAffiliateLinkId = link.Id;\n            order.PromoterAmount = (int)(order.Amount * video.VideoRevenueConfig.PromoterPercentage / 100);\n        }\n    }\n\n    return order;\n}\n</code></pre>"},{"location":"fluxos-de-negocio/link-afiliado/#formato-do-link","title":"Formato do Link","text":"<pre><code>https://amasso.com/videos/123?ref=ABC12345\n</code></pre> <ul> <li><code>123</code> = ID do v\u00eddeo</li> <li><code>ABC12345</code> = C\u00f3digo \u00fanico do link (8 caracteres alfanum\u00e9ricos)</li> </ul>"},{"location":"fluxos-de-negocio/link-afiliado/#dashboard-de-links","title":"Dashboard de Links","text":"<pre><code>const { data: links } = useQuery({\n  queryKey: [\"my-affiliate-links\"],\n  queryFn: async () =&gt; {\n    const response = await promoterApi.getAffiliateLinks();\n    return response.data;\n  }\n});\n\nreturn (\n  &lt;Table&gt;\n    &lt;thead&gt;\n      &lt;tr&gt;\n        &lt;th&gt;V\u00eddeo&lt;/th&gt;\n        &lt;th&gt;C\u00f3digo&lt;/th&gt;\n        &lt;th&gt;Cliques&lt;/th&gt;\n        &lt;th&gt;Convers\u00f5es&lt;/th&gt;\n        &lt;th&gt;Taxa&lt;/th&gt;\n        &lt;th&gt;Comiss\u00e3o Total&lt;/th&gt;\n      &lt;/tr&gt;\n    &lt;/thead&gt;\n    &lt;tbody&gt;\n      {links.map(link =&gt; (\n        &lt;tr key={link.id}&gt;\n          &lt;td&gt;{link.videoTitle}&lt;/td&gt;\n          &lt;td&gt;{link.uniqueCode}&lt;/td&gt;\n          &lt;td&gt;{link.clicks}&lt;/td&gt;\n          &lt;td&gt;{link.conversions}&lt;/td&gt;\n          &lt;td&gt;{link.conversionRate.toFixed(2)}%&lt;/td&gt;\n          &lt;td&gt;R$ {link.totalCommission.toFixed(2)}&lt;/td&gt;\n        &lt;/tr&gt;\n      ))}\n    &lt;/tbody&gt;\n  &lt;/Table&gt;\n);\n</code></pre>"},{"location":"fluxos-de-negocio/link-afiliado/#regras-de-negocio","title":"Regras de Neg\u00f3cio","text":"<ol> <li>KYC aprovado: Apenas promoters com KYC aprovado podem gerar links</li> <li>Comiss\u00e3o &gt; 0%: Apenas v\u00eddeos com <code>promoter_percentage &gt; 0</code></li> <li>Link \u00fanico por v\u00eddeo: Cada promoter tem 1 link por v\u00eddeo</li> <li>C\u00f3digo de 8 caracteres: Alfanum\u00e9rico, mai\u00fasculas</li> <li>Rastreamento de cliques: Incrementado a cada acesso</li> <li>localStorage: C\u00f3digo salvo no navegador do usu\u00e1rio</li> <li>Validade: Link v\u00e1lido enquanto v\u00eddeo estiver dispon\u00edvel para venda</li> </ol>"},{"location":"fluxos-de-negocio/link-afiliado/#metricas","title":"M\u00e9tricas","text":"<ul> <li>Cliques: Total de acessos ao link</li> <li>Convers\u00f5es: Total de compras via link</li> <li>Taxa de convers\u00e3o: (Convers\u00f5es / Cliques) * 100</li> <li>Comiss\u00e3o total: Soma de todas as comiss\u00f5es geradas</li> </ul>"},{"location":"fluxos-de-negocio/link-afiliado/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<ul> <li>Veja Perfil Promoter</li> <li>Consulte Caso de Uso: Promoter Gera Link</li> <li>Entenda Comiss\u00f5es</li> </ul>"},{"location":"guias/configuracao-ambiente/backend/","title":"Configura\u00e7\u00e3o: Backend API","text":""},{"location":"guias/configuracao-ambiente/backend/#requisitos","title":"Requisitos","text":"<ul> <li>.NET SDK 8.0+</li> <li>PostgreSQL 16+</li> <li>Conta Iugu (API Key)</li> <li>Conta Cloudinary (API credentials)</li> </ul>"},{"location":"guias/configuracao-ambiente/backend/#passo-a-passo","title":"Passo a Passo","text":""},{"location":"guias/configuracao-ambiente/backend/#1-clone-do-repositorio","title":"1. Clone do Reposit\u00f3rio","text":"<pre><code>cd amasso-monorepo/backend-api\n</code></pre>"},{"location":"guias/configuracao-ambiente/backend/#2-configurar-appsettingsjson","title":"2. Configurar appsettings.json","text":"<p>Crie <code>appsettings.Development.json</code>:</p> <pre><code>{\n  \"ConnectionStrings\": {\n    \"DefaultConnection\": \"Host=localhost;Port=5432;Database=pay4tru;Username=postgres;Password=postgres\"\n  },\n  \"Jwt\": {\n    \"SecretKey\": \"sua-chave-secreta-muito-forte-aqui-com-pelo-menos-32-caracteres\",\n    \"Issuer\": \"Amasso.API\",\n    \"Audience\": \"Amasso.Frontend\",\n    \"ExpirationHours\": 24\n  },\n  \"Iugu\": {\n    \"ApiKey\": \"test_api_key_aqui\",\n    \"BaseUrl\": \"https://api.iugu.com/v1\",\n    \"MasterAccountId\": \"sua_conta_master_id\"\n  },\n  \"Cloudinary\": {\n    \"CloudName\": \"seu_cloud_name\",\n    \"ApiKey\": \"sua_api_key\",\n    \"ApiSecret\": \"seu_api_secret\"\n  }\n}\n</code></pre>"},{"location":"guias/configuracao-ambiente/backend/#3-instalar-dependencias","title":"3. Instalar Depend\u00eancias","text":"<pre><code>dotnet restore\n</code></pre>"},{"location":"guias/configuracao-ambiente/backend/#4-executar-migrations","title":"4. Executar Migrations","text":"<pre><code>dotnet ef database update\n</code></pre>"},{"location":"guias/configuracao-ambiente/backend/#5-executar-aplicacao","title":"5. Executar Aplica\u00e7\u00e3o","text":"<pre><code>dotnet run\n</code></pre> <p>A API estar\u00e1 dispon\u00edvel em: - HTTP: <code>http://localhost:7080</code> - HTTPS: <code>https://localhost:7081</code></p>"},{"location":"guias/configuracao-ambiente/backend/#6-testar-api","title":"6. Testar API","text":"<pre><code>curl http://localhost:7080/health\n</code></pre>"},{"location":"guias/configuracao-ambiente/backend/#variaveis-de-ambiente","title":"Vari\u00e1veis de Ambiente","text":"<p>Alternativamente, configure via env vars:</p> <pre><code>export ConnectionStrings__DefaultConnection=\"Host=localhost;...\"\nexport Jwt__SecretKey=\"sua-chave-secreta\"\nexport Iugu__ApiKey=\"test_api_key\"\nexport Cloudinary__CloudName=\"seu_cloud\"\nexport Cloudinary__ApiKey=\"sua_key\"\nexport Cloudinary__ApiSecret=\"seu_secret\"\n</code></pre>"},{"location":"guias/configuracao-ambiente/backend/#seed-data","title":"Seed Data","text":"<p>Para popular banco com dados iniciais:</p> <pre><code>dotnet run --seed\n</code></pre> <p>Cria: - Usu\u00e1rio admin (admin@amasso.com / Admin@123) - 5 v\u00eddeos de exemplo - 3 usu\u00e1rios de teste</p>"},{"location":"guias/configuracao-ambiente/backend/#desenvolvimento","title":"Desenvolvimento","text":""},{"location":"guias/configuracao-ambiente/backend/#hot-reload","title":"Hot Reload","text":"<pre><code>dotnet watch run\n</code></pre>"},{"location":"guias/configuracao-ambiente/backend/#logs","title":"Logs","text":"<p>Configurar n\u00edvel de log em <code>appsettings.json</code>:</p> <pre><code>{\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Information\",\n      \"Microsoft.AspNetCore\": \"Warning\",\n      \"Microsoft.EntityFrameworkCore\": \"Information\"\n    }\n  }\n}\n</code></pre>"},{"location":"guias/configuracao-ambiente/backend/#troubleshooting","title":"Troubleshooting","text":""},{"location":"guias/configuracao-ambiente/backend/#erro-cannot-connect-to-postgresql","title":"Erro: Cannot connect to PostgreSQL","text":"<p>Verificar se PostgreSQL est\u00e1 rodando:</p> <pre><code>pg_isready -h localhost -p 5432\n</code></pre>"},{"location":"guias/configuracao-ambiente/backend/#erro-migrations-pendentes","title":"Erro: Migrations pendentes","text":"<pre><code>dotnet ef database update\n</code></pre>"},{"location":"guias/configuracao-ambiente/backend/#erro-iugu-api-key-invalida","title":"Erro: Iugu API Key inv\u00e1lida","text":"<p>Verificar em https://app.iugu.com/settings/api</p>"},{"location":"guias/configuracao-ambiente/backend/#erro-cloudinary-upload-falha","title":"Erro: Cloudinary upload falha","text":"<p>Verificar credenciais em https://console.cloudinary.com</p>"},{"location":"guias/configuracao-ambiente/backend/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<ul> <li>Configurar Email API</li> <li>Configurar Frontend</li> <li>Criar Migration</li> </ul>"},{"location":"guias/configuracao-ambiente/banco-dados/","title":"Configura\u00e7\u00e3o: Banco de Dados","text":""},{"location":"guias/configuracao-ambiente/banco-dados/#postgresql-16","title":"PostgreSQL 16","text":""},{"location":"guias/configuracao-ambiente/banco-dados/#instalacao","title":"Instala\u00e7\u00e3o","text":""},{"location":"guias/configuracao-ambiente/banco-dados/#windows","title":"Windows","text":"<ol> <li>Baixe o instalador: https://www.postgresql.org/download/windows/</li> <li>Execute e siga o wizard</li> <li>Anote a senha do usu\u00e1rio <code>postgres</code></li> </ol>"},{"location":"guias/configuracao-ambiente/banco-dados/#macos","title":"macOS","text":"<pre><code># Com Homebrew\nbrew install postgresql@16\nbrew services start postgresql@16\n</code></pre>"},{"location":"guias/configuracao-ambiente/banco-dados/#linux-ubuntudebian","title":"Linux (Ubuntu/Debian)","text":"<pre><code>sudo apt update\nsudo apt install postgresql-16 postgresql-contrib\nsudo systemctl start postgresql\nsudo systemctl enable postgresql\n</code></pre>"},{"location":"guias/configuracao-ambiente/banco-dados/#criar-database","title":"Criar Database","text":"<pre><code># Conectar ao PostgreSQL\npsql -U postgres\n\n# Criar database\nCREATE DATABASE pay4tru;\n\n# Criar usu\u00e1rio (opcional)\nCREATE USER amasso WITH PASSWORD 'senha123';\nGRANT ALL PRIVILEGES ON DATABASE pay4tru TO amasso;\n\n# Sair\n\\q\n</code></pre>"},{"location":"guias/configuracao-ambiente/banco-dados/#connection-string","title":"Connection String","text":"<pre><code>Host=localhost;Port=5432;Database=pay4tru;Username=postgres;Password=sua_senha\n</code></pre>"},{"location":"guias/configuracao-ambiente/banco-dados/#docker-compose-recomendado","title":"Docker Compose (Recomendado)","text":""},{"location":"guias/configuracao-ambiente/banco-dados/#1-criar-docker-composeyml","title":"1. Criar docker-compose.yml","text":"<pre><code>version: '3.8'\n\nservices:\n  postgres:\n    image: postgres:16-alpine\n    container_name: amasso-postgres\n    environment:\n      POSTGRES_DB: pay4tru\n      POSTGRES_USER: postgres\n      POSTGRES_PASSWORD: postgres\n    ports:\n      - \"5432:5432\"\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready -U postgres\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\n\nvolumes:\n  postgres_data:\n</code></pre>"},{"location":"guias/configuracao-ambiente/banco-dados/#2-iniciar-container","title":"2. Iniciar Container","text":"<pre><code>docker-compose up -d\n</code></pre>"},{"location":"guias/configuracao-ambiente/banco-dados/#3-verificar","title":"3. Verificar","text":"<pre><code>docker-compose ps\ndocker-compose logs postgres\n</code></pre>"},{"location":"guias/configuracao-ambiente/banco-dados/#4-conectar","title":"4. Conectar","text":"<pre><code>docker exec -it amasso-postgres psql -U postgres -d pay4tru\n</code></pre>"},{"location":"guias/configuracao-ambiente/banco-dados/#executar-migrations","title":"Executar Migrations","text":""},{"location":"guias/configuracao-ambiente/banco-dados/#backend-api","title":"Backend API","text":"<pre><code>cd backend-api\ndotnet ef database update\n</code></pre>"},{"location":"guias/configuracao-ambiente/banco-dados/#email-api","title":"Email API","text":"<pre><code>cd email-api\ndotnet ef database update\n</code></pre>"},{"location":"guias/configuracao-ambiente/banco-dados/#verificar-estrutura","title":"Verificar Estrutura","text":""},{"location":"guias/configuracao-ambiente/banco-dados/#listar-tabelas","title":"Listar Tabelas","text":"<pre><code>\\dt\n</code></pre>"},{"location":"guias/configuracao-ambiente/banco-dados/#ver-estrutura-de-tabela","title":"Ver Estrutura de Tabela","text":"<pre><code>\\d users\n\\d videos\n\\d orders\n</code></pre>"},{"location":"guias/configuracao-ambiente/banco-dados/#contar-registros","title":"Contar Registros","text":"<pre><code>SELECT \n  schemaname,\n  tablename,\n  (SELECT COUNT(*) FROM pg_catalog.pg_class c WHERE c.relname = tablename) as row_count\nFROM pg_catalog.pg_tables\nWHERE schemaname = 'public'\nORDER BY tablename;\n</code></pre>"},{"location":"guias/configuracao-ambiente/banco-dados/#seed-data","title":"Seed Data","text":""},{"location":"guias/configuracao-ambiente/banco-dados/#criar-usuario-admin","title":"Criar Usu\u00e1rio Admin","text":"<pre><code>INSERT INTO users (email, password_hash, first_name, last_name, type, is_active, created_at)\nVALUES (\n  'admin@amasso.com',\n  '$2a$11$hashed_password_here', -- Use hash bcrypt real\n  'Admin',\n  'User',\n  'Admin',\n  TRUE,\n  NOW()\n);\n</code></pre>"},{"location":"guias/configuracao-ambiente/banco-dados/#criar-video-de-teste","title":"Criar V\u00eddeo de Teste","text":"<pre><code>INSERT INTO videos (title, description, cloudinary_public_id, price, is_active, created_at)\nVALUES (\n  'V\u00eddeo Teste',\n  'Descri\u00e7\u00e3o do v\u00eddeo teste',\n  'test_video_id',\n  99.90,\n  TRUE,\n  NOW()\n);\n\n-- Configurar comiss\u00f5es\nINSERT INTO video_revenue_configs (video_id, platform_percentage, owner_percentage, promoter_percentage, created_at)\nVALUES (\n  (SELECT id FROM videos WHERE title = 'V\u00eddeo Teste'),\n  20,\n  50,\n  30,\n  NOW()\n);\n</code></pre>"},{"location":"guias/configuracao-ambiente/banco-dados/#backup-e-restore","title":"Backup e Restore","text":""},{"location":"guias/configuracao-ambiente/banco-dados/#backup","title":"Backup","text":"<pre><code># Backup completo\npg_dump -U postgres -d pay4tru &gt; backup.sql\n\n# Backup apenas dados\npg_dump -U postgres -d pay4tru --data-only &gt; data_backup.sql\n\n# Backup apenas schema\npg_dump -U postgres -d pay4tru --schema-only &gt; schema_backup.sql\n\n# Com Docker\ndocker exec amasso-postgres pg_dump -U postgres pay4tru &gt; backup.sql\n</code></pre>"},{"location":"guias/configuracao-ambiente/banco-dados/#restore","title":"Restore","text":"<pre><code># Restore completo\npsql -U postgres -d pay4tru &lt; backup.sql\n\n# Com Docker\ndocker exec -i amasso-postgres psql -U postgres -d pay4tru &lt; backup.sql\n</code></pre>"},{"location":"guias/configuracao-ambiente/banco-dados/#comandos-uteis","title":"Comandos \u00dateis","text":""},{"location":"guias/configuracao-ambiente/banco-dados/#postgresql","title":"PostgreSQL","text":"<pre><code>-- Listar databases\n\\l\n\n-- Conectar a database\n\\c pay4tru\n\n-- Listar tabelas\n\\dt\n\n-- Descrever tabela\n\\d users\n\n-- Listar \u00edndices\n\\di\n\n-- Ver tamanho das tabelas\nSELECT \n  tablename,\n  pg_size_pretty(pg_total_relation_size(schemaname||'.'||tablename)) AS size\nFROM pg_tables\nWHERE schemaname = 'public'\nORDER BY pg_total_relation_size(schemaname||'.'||tablename) DESC;\n\n-- Vacuum (otimizar)\nVACUUM ANALYZE;\n\n-- Ver conex\u00f5es ativas\nSELECT * FROM pg_stat_activity WHERE datname = 'pay4tru';\n</code></pre>"},{"location":"guias/configuracao-ambiente/banco-dados/#performance","title":"Performance","text":""},{"location":"guias/configuracao-ambiente/banco-dados/#indices-recomendados","title":"\u00cdndices Recomendados","text":"<pre><code>-- J\u00e1 criados pelas migrations, mas para refer\u00eancia:\n\n-- Users\nCREATE INDEX idx_users_email ON users(email);\nCREATE INDEX idx_users_type ON users(type);\n\n-- Orders\nCREATE INDEX idx_orders_user_id ON orders(user_id);\nCREATE INDEX idx_orders_video_id ON orders(video_id);\nCREATE INDEX idx_orders_created_at ON orders(created_at DESC);\n\n-- Payments\nCREATE INDEX idx_payments_status ON payments(status);\nCREATE INDEX idx_payments_iugu_paid_at ON payments(iugu_paid_at);\n\n-- Incomes\nCREATE INDEX idx_incomes_owner_id ON incomes(owner_id);\nCREATE INDEX idx_incomes_type ON incomes(type);\n</code></pre>"},{"location":"guias/configuracao-ambiente/banco-dados/#query-performance","title":"Query Performance","text":"<pre><code>-- Analisar query\nEXPLAIN ANALYZE SELECT * FROM orders WHERE user_id = 1;\n\n-- Ver queries lentas\nSELECT \n  query,\n  calls,\n  total_time,\n  mean_time\nFROM pg_stat_statements\nORDER BY mean_time DESC\nLIMIT 10;\n</code></pre>"},{"location":"guias/configuracao-ambiente/banco-dados/#troubleshooting","title":"Troubleshooting","text":""},{"location":"guias/configuracao-ambiente/banco-dados/#conexao-recusada","title":"Conex\u00e3o recusada","text":"<pre><code># Verificar se PostgreSQL est\u00e1 rodando\npg_isready -h localhost -p 5432\n\n# Ver status\nsudo systemctl status postgresql\n\n# Iniciar\nsudo systemctl start postgresql\n</code></pre>"},{"location":"guias/configuracao-ambiente/banco-dados/#senha-incorreta","title":"Senha incorreta","text":"<pre><code># Resetar senha do postgres\nsudo -u postgres psql\nALTER USER postgres PASSWORD 'nova_senha';\n</code></pre>"},{"location":"guias/configuracao-ambiente/banco-dados/#database-nao-existe","title":"Database n\u00e3o existe","text":"<pre><code>psql -U postgres\nCREATE DATABASE pay4tru;\n</code></pre>"},{"location":"guias/configuracao-ambiente/banco-dados/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<ul> <li>Configurar Backend</li> <li>Configurar Email API</li> <li>Criar Migration</li> </ul>"},{"location":"guias/configuracao-ambiente/email-api/","title":"Configura\u00e7\u00e3o: Email API","text":""},{"location":"guias/configuracao-ambiente/email-api/#requisitos","title":"Requisitos","text":"<ul> <li>.NET SDK 8.0+</li> <li>PostgreSQL 16+ (compartilhado com Backend API)</li> <li>Conta SMTP (Gmail, SendGrid, etc.)</li> <li>Conta Z-API (para WhatsApp)</li> </ul>"},{"location":"guias/configuracao-ambiente/email-api/#passo-a-passo","title":"Passo a Passo","text":""},{"location":"guias/configuracao-ambiente/email-api/#1-navegar-para-o-diretorio","title":"1. Navegar para o Diret\u00f3rio","text":"<pre><code>cd amasso-monorepo/email-api\n</code></pre>"},{"location":"guias/configuracao-ambiente/email-api/#2-configurar-appsettingsjson","title":"2. Configurar appsettings.json","text":"<p>Crie <code>appsettings.Development.json</code>:</p> <pre><code>{\n  \"ConnectionStrings\": {\n    \"DefaultConnection\": \"Host=localhost;Port=5432;Database=pay4tru;Username=postgres;Password=postgres\"\n  },\n  \"Smtp\": {\n    \"Host\": \"smtp.gmail.com\",\n    \"Port\": 587,\n    \"Username\": \"noreply@amasso.com.br\",\n    \"Password\": \"app-password-aqui\",\n    \"FromEmail\": \"noreply@amasso.com.br\",\n    \"FromName\": \"Amasso\",\n    \"EnableSsl\": true\n  },\n  \"ZApi\": {\n    \"BaseUrl\": \"https://api.z-api.io\",\n    \"InstanceId\": \"your-instance-id\",\n    \"Token\": \"your-token\"\n  },\n  \"Hangfire\": {\n    \"DashboardPath\": \"/dashboard\",\n    \"DashboardUsername\": \"admin\",\n    \"DashboardPassword\": \"admin123\"\n  }\n}\n</code></pre>"},{"location":"guias/configuracao-ambiente/email-api/#3-instalar-dependencias","title":"3. Instalar Depend\u00eancias","text":"<pre><code>dotnet restore\n</code></pre>"},{"location":"guias/configuracao-ambiente/email-api/#4-executar-aplicacao","title":"4. Executar Aplica\u00e7\u00e3o","text":"<pre><code>dotnet run\n</code></pre> <p>A API estar\u00e1 dispon\u00edvel em: - HTTP: <code>http://localhost:5014</code> - Dashboard Hangfire: <code>http://localhost:5014/dashboard</code></p>"},{"location":"guias/configuracao-ambiente/email-api/#5-testar-dashboard","title":"5. Testar Dashboard","text":"<p>Acesse <code>http://localhost:5014/dashboard</code> e fa\u00e7a login com as credenciais configuradas.</p>"},{"location":"guias/configuracao-ambiente/email-api/#configuracao-smtp-gmail","title":"Configura\u00e7\u00e3o SMTP Gmail","text":""},{"location":"guias/configuracao-ambiente/email-api/#1-habilitar-verificacao-em-duas-etapas","title":"1. Habilitar \"Verifica\u00e7\u00e3o em duas etapas\"","text":"<ol> <li>Acesse https://myaccount.google.com/security</li> <li>Ative \"Verifica\u00e7\u00e3o em duas etapas\"</li> </ol>"},{"location":"guias/configuracao-ambiente/email-api/#2-criar-app-password","title":"2. Criar App Password","text":"<ol> <li>Acesse https://myaccount.google.com/apppasswords</li> <li>Crie uma nova senha de app</li> <li>Use esta senha no <code>appsettings.json</code></li> </ol> <pre><code>{\n  \"Smtp\": {\n    \"Host\": \"smtp.gmail.com\",\n    \"Port\": 587,\n    \"Username\": \"seu-email@gmail.com\",\n    \"Password\": \"senha-de-app-gerada\",\n    \"FromEmail\": \"seu-email@gmail.com\",\n    \"FromName\": \"Amasso\"\n  }\n}\n</code></pre>"},{"location":"guias/configuracao-ambiente/email-api/#configuracao-z-api","title":"Configura\u00e7\u00e3o Z-API","text":""},{"location":"guias/configuracao-ambiente/email-api/#1-criar-conta","title":"1. Criar Conta","text":"<ol> <li>Acesse https://www.z-api.io/</li> <li>Crie uma conta e inst\u00e2ncia</li> </ol>"},{"location":"guias/configuracao-ambiente/email-api/#2-conectar-whatsapp","title":"2. Conectar WhatsApp","text":"<ol> <li>Escaneie o QR Code</li> <li>Copie Instance ID e Token</li> </ol> <pre><code>{\n  \"ZApi\": {\n    \"BaseUrl\": \"https://api.z-api.io\",\n    \"InstanceId\": \"3DABC123\",\n    \"Token\": \"A1B2C3D4E5F6\"\n  }\n}\n</code></pre>"},{"location":"guias/configuracao-ambiente/email-api/#jobs-hangfire","title":"Jobs Hangfire","text":""},{"location":"guias/configuracao-ambiente/email-api/#jobs-configurados","title":"Jobs Configurados","text":"Job Frequ\u00eancia Descri\u00e7\u00e3o <code>process-pending-notifications</code> 1 min Processa notifica\u00e7\u00f5es pendentes <code>cleanup-old-notifications</code> Di\u00e1rio 03:00 Remove notifica\u00e7\u00f5es antigas"},{"location":"guias/configuracao-ambiente/email-api/#monitoramento","title":"Monitoramento","text":"<p>Dashboard Hangfire mostra: - Jobs executados com sucesso - Jobs com falha - Jobs agendados - Servidores ativos - Fila de processamento</p>"},{"location":"guias/configuracao-ambiente/email-api/#testar-envio","title":"Testar Envio","text":""},{"location":"guias/configuracao-ambiente/email-api/#1-criar-notificacao-manualmente","title":"1. Criar Notifica\u00e7\u00e3o Manualmente","text":"<pre><code>INSERT INTO notifications (type, channel, email, metadata_json, created_at)\nVALUES (\n    'UserActivation',\n    'Email',\n    'teste@example.com',\n    '{\"Code\": \"123456\"}',\n    NOW()\n);\n</code></pre>"},{"location":"guias/configuracao-ambiente/email-api/#2-aguardar-processamento","title":"2. Aguardar Processamento","text":"<p>O job executar\u00e1 em at\u00e9 1 minuto e: - Renderizar\u00e1 template - Enviar\u00e1 email - Marcar\u00e1 como enviado</p>"},{"location":"guias/configuracao-ambiente/email-api/#3-verificar-logs","title":"3. Verificar Logs","text":"<pre><code>tail -f email-api.log\n</code></pre>"},{"location":"guias/configuracao-ambiente/email-api/#troubleshooting","title":"Troubleshooting","text":""},{"location":"guias/configuracao-ambiente/email-api/#email-nao-envia","title":"Email n\u00e3o envia","text":"<p>Verificar SMTP: <pre><code>telnet smtp.gmail.com 587\n</code></pre></p> <p>Verificar senha: - Gmail requer \"App Password\" - N\u00e3o use senha normal da conta</p>"},{"location":"guias/configuracao-ambiente/email-api/#whatsapp-nao-envia","title":"WhatsApp n\u00e3o envia","text":"<p>Verificar conex\u00e3o: - Acesse dashboard Z-API - Verifique se inst\u00e2ncia est\u00e1 conectada - Reescanear QR Code se necess\u00e1rio</p>"},{"location":"guias/configuracao-ambiente/email-api/#jobs-nao-executam","title":"Jobs n\u00e3o executam","text":"<p>Verificar Hangfire: - Acesse <code>/dashboard</code> - Veja guia \"Servers\" - Verificar se h\u00e1 servidor ativo</p>"},{"location":"guias/configuracao-ambiente/email-api/#logs","title":"Logs","text":"<pre><code># Ver logs em tempo real\ntail -f email-api.log\n\n# Buscar erros\ngrep ERROR email-api.log\n\n# \u00daltimas 100 linhas\ntail -n 100 email-api.log\n</code></pre>"},{"location":"guias/configuracao-ambiente/email-api/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<ul> <li>Configurar Backend</li> <li>Templates de Email</li> <li>Hangfire Jobs</li> </ul>"},{"location":"guias/configuracao-ambiente/frontend/","title":"Configura\u00e7\u00e3o: Frontend React","text":""},{"location":"guias/configuracao-ambiente/frontend/#requisitos","title":"Requisitos","text":"<ul> <li>Node.js 18+ e npm</li> <li>Backend API rodando</li> </ul>"},{"location":"guias/configuracao-ambiente/frontend/#passo-a-passo","title":"Passo a Passo","text":""},{"location":"guias/configuracao-ambiente/frontend/#1-navegar-para-o-diretorio","title":"1. Navegar para o Diret\u00f3rio","text":"<pre><code>cd amasso-monorepo/frontend-react\n</code></pre>"},{"location":"guias/configuracao-ambiente/frontend/#2-instalar-dependencias","title":"2. Instalar Depend\u00eancias","text":"<pre><code>npm install\n</code></pre>"},{"location":"guias/configuracao-ambiente/frontend/#3-configurar-variaveis-de-ambiente","title":"3. Configurar Vari\u00e1veis de Ambiente","text":"<p>Crie <code>.env</code>:</p> <pre><code>VITE_API_URL=http://localhost:7080\nVITE_CLOUDINARY_CLOUD_NAME=seu_cloud_name\n</code></pre>"},{"location":"guias/configuracao-ambiente/frontend/#4-executar-em-desenvolvimento","title":"4. Executar em Desenvolvimento","text":"<pre><code>npm run dev\n</code></pre> <p>O frontend estar\u00e1 dispon\u00edvel em: - <code>http://localhost:5173</code></p>"},{"location":"guias/configuracao-ambiente/frontend/#5-build-para-producao","title":"5. Build para Produ\u00e7\u00e3o","text":"<pre><code>npm run build\n</code></pre> <p>Os arquivos estar\u00e3o em <code>dist/</code>.</p>"},{"location":"guias/configuracao-ambiente/frontend/#6-preview-da-build","title":"6. Preview da Build","text":"<pre><code>npm run preview\n</code></pre>"},{"location":"guias/configuracao-ambiente/frontend/#estrutura-de-pastas","title":"Estrutura de Pastas","text":"<pre><code>frontend-react/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 assets/          # Imagens, fontes\n\u2502   \u251c\u2500\u2500 components/      # Componentes reutiliz\u00e1veis\n\u2502   \u251c\u2500\u2500 pages/          # P\u00e1ginas/rotas\n\u2502   \u251c\u2500\u2500 services/       # APIs e utilit\u00e1rios\n\u2502   \u2502   \u251c\u2500\u2500 api/       # Chamadas HTTP\n\u2502   \u2502   \u2514\u2500\u2500 httpClient.ts\n\u2502   \u251c\u2500\u2500 store/         # Redux Toolkit\n\u2502   \u2502   \u2514\u2500\u2500 slices/\n\u2502   \u251c\u2500\u2500 styles/        # CSS/SCSS global\n\u2502   \u251c\u2500\u2500 types/         # TypeScript types\n\u2502   \u251c\u2500\u2500 App.tsx        # Componente raiz\n\u2502   \u2514\u2500\u2500 main.tsx       # Entry point\n\u251c\u2500\u2500 public/            # Assets est\u00e1ticos\n\u251c\u2500\u2500 index.html\n\u251c\u2500\u2500 vite.config.ts\n\u2514\u2500\u2500 package.json\n</code></pre>"},{"location":"guias/configuracao-ambiente/frontend/#scripts-disponiveis","title":"Scripts Dispon\u00edveis","text":"Script Descri\u00e7\u00e3o <code>npm run dev</code> Desenvolvimento com hot reload <code>npm run build</code> Build de produ\u00e7\u00e3o <code>npm run preview</code> Preview da build <code>npm run lint</code> Executar ESLint <code>npm run type-check</code> Verificar tipos TypeScript"},{"location":"guias/configuracao-ambiente/frontend/#configuracao-do-vite","title":"Configura\u00e7\u00e3o do Vite","text":"<pre><code>// vite.config.ts\nimport { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\nimport path from 'path'\n\nexport default defineConfig({\n  plugins: [react()],\n  resolve: {\n    alias: {\n      '@': path.resolve(__dirname, './src'),\n    },\n  },\n  server: {\n    port: 5173,\n    proxy: {\n      '/api': {\n        target: 'http://localhost:7080',\n        changeOrigin: true,\n      },\n    },\n  },\n})\n</code></pre>"},{"location":"guias/configuracao-ambiente/frontend/#principais-bibliotecas","title":"Principais Bibliotecas","text":"Biblioteca Vers\u00e3o Uso React ^18.2.0 Framework UI TypeScript ^5.0.0 Tipagem Redux Toolkit ^2.0.0 State management React Router ^6.20.0 Rotas Axios ^1.6.0 HTTP client React Query ^5.0.0 Cache de dados React Hook Form ^7.48.0 Formul\u00e1rios Zod ^3.22.0 Valida\u00e7\u00e3o Tailwind CSS ^3.3.0 Estiliza\u00e7\u00e3o Lucide React ^0.292.0 \u00cdcones"},{"location":"guias/configuracao-ambiente/frontend/#http-client","title":"HTTP Client","text":"<pre><code>// src/services/httpClient.ts\nimport axios from 'axios'\n\nexport const httpClient = axios.create({\n  baseURL: import.meta.env.VITE_API_URL,\n})\n\n// Interceptor para adicionar token\nhttpClient.interceptors.request.use((config) =&gt; {\n  const token = localStorage.getItem('token')\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`\n  }\n  return config\n})\n\n// Interceptor para tratar erros\nhttpClient.interceptors.response.use(\n  (response) =&gt; response,\n  (error) =&gt; {\n    if (error.response?.status === 401) {\n      localStorage.removeItem('token')\n      window.location.href = '/auth/login'\n    }\n    return Promise.reject(error)\n  }\n)\n</code></pre>"},{"location":"guias/configuracao-ambiente/frontend/#rotas-principais","title":"Rotas Principais","text":"Rota Componente Descri\u00e7\u00e3o <code>/</code> <code>Home</code> P\u00e1gina inicial <code>/auth/login</code> <code>Login</code> Login <code>/auth/register</code> <code>Register</code> Cadastro <code>/dashboard</code> <code>Dashboard</code> Dashboard do usu\u00e1rio <code>/videos</code> <code>VideoList</code> Cat\u00e1logo de v\u00eddeos <code>/videos/:id</code> <code>VideoDetail</code> Detalhes do v\u00eddeo <code>/videos/:id/watch</code> <code>VideoPlayer</code> Assistir v\u00eddeo <code>/my-videos</code> <code>MyVideos</code> V\u00eddeos comprados <code>/promoter/dashboard</code> <code>PromoterDashboard</code> Dashboard do promoter <code>/influencer/dashboard</code> <code>InfluencerDashboard</code> Dashboard do influencer <code>/admin/*</code> <code>Admin*</code> \u00c1rea administrativa"},{"location":"guias/configuracao-ambiente/frontend/#troubleshooting","title":"Troubleshooting","text":""},{"location":"guias/configuracao-ambiente/frontend/#erro-cannot-connect-to-api","title":"Erro: Cannot connect to API","text":"<p>Verificar se Backend API est\u00e1 rodando:</p> <pre><code>curl http://localhost:7080/health\n</code></pre>"},{"location":"guias/configuracao-ambiente/frontend/#erro-cors","title":"Erro: CORS","text":"<p>Verificar configura\u00e7\u00e3o CORS no Backend API.</p>"},{"location":"guias/configuracao-ambiente/frontend/#erro-modulo-nao-encontrado","title":"Erro: M\u00f3dulo n\u00e3o encontrado","text":"<pre><code>rm -rf node_modules package-lock.json\nnpm install\n</code></pre>"},{"location":"guias/configuracao-ambiente/frontend/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<ul> <li>Configurar Backend</li> <li>Adicionar Endpoint</li> <li>Padr\u00f5es de C\u00f3digo</li> </ul>"},{"location":"guias/configuracao-ambiente/requisitos/","title":"Requisitos do Sistema","text":""},{"location":"guias/configuracao-ambiente/requisitos/#visao-geral","title":"Vis\u00e3o Geral","text":"<p>Este documento lista todos os requisitos de software e hardware necess\u00e1rios para desenvolver e executar a plataforma Amasso localmente.</p>"},{"location":"guias/configuracao-ambiente/requisitos/#hardware-recomendado","title":"Hardware Recomendado","text":""},{"location":"guias/configuracao-ambiente/requisitos/#minimo","title":"M\u00ednimo","text":"<ul> <li>CPU: Dual-core 2.0 GHz</li> <li>RAM: 8 GB</li> <li>Disco: 20 GB livres (SSD recomendado)</li> <li>Conex\u00e3o: Internet est\u00e1vel (para APIs externas)</li> </ul>"},{"location":"guias/configuracao-ambiente/requisitos/#recomendado","title":"Recomendado","text":"<ul> <li>CPU: Quad-core 2.5 GHz ou superior</li> <li>RAM: 16 GB ou mais</li> <li>Disco: 50 GB livres em SSD</li> <li>Conex\u00e3o: Internet de alta velocidade</li> </ul>"},{"location":"guias/configuracao-ambiente/requisitos/#sistema-operacional","title":"Sistema Operacional","text":"<p>A plataforma pode ser desenvolvida em qualquer sistema operacional:</p> <ul> <li>\u2705 Windows 10/11</li> <li>\u2705 macOS 12 (Monterey) ou superior</li> <li>\u2705 Linux (Ubuntu 20.04+, Debian, Fedora, etc.)</li> </ul>"},{"location":"guias/configuracao-ambiente/requisitos/#software-necessario","title":"Software Necess\u00e1rio","text":""},{"location":"guias/configuracao-ambiente/requisitos/#1-net-sdk-80","title":"1. .NET SDK 8.0","text":"<p>Backend API e Email API s\u00e3o constru\u00eddos com .NET 8.</p>"},{"location":"guias/configuracao-ambiente/requisitos/#instalacao","title":"Instala\u00e7\u00e3o","text":"<p>Windows/macOS: <pre><code># Baixar e instalar de:\nhttps://dotnet.microsoft.com/download/dotnet/8.0\n</code></pre></p> <p>Linux (Ubuntu/Debian): <pre><code>wget https://packages.microsoft.com/config/ubuntu/22.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb\nsudo dpkg -i packages-microsoft-prod.deb\nsudo apt-get update\nsudo apt-get install -y dotnet-sdk-8.0\n</code></pre></p>"},{"location":"guias/configuracao-ambiente/requisitos/#verificar-instalacao","title":"Verificar Instala\u00e7\u00e3o","text":"<pre><code>dotnet --version\n# Esperado: 8.0.x\n</code></pre>"},{"location":"guias/configuracao-ambiente/requisitos/#2-nodejs-18-e-npm","title":"2. Node.js 18+ e npm","text":"<p>Frontend \u00e9 constru\u00eddo com React + TypeScript + Vite.</p>"},{"location":"guias/configuracao-ambiente/requisitos/#instalacao_1","title":"Instala\u00e7\u00e3o","text":"<p>Windows/macOS: <pre><code># Baixar e instalar de:\nhttps://nodejs.org/\n\n# Ou usar nvm (Node Version Manager)\nnvm install 18\nnvm use 18\n</code></pre></p> <p>Linux: <pre><code># Usando nvm\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash\nnvm install 18\nnvm use 18\n</code></pre></p>"},{"location":"guias/configuracao-ambiente/requisitos/#verificar-instalacao_1","title":"Verificar Instala\u00e7\u00e3o","text":"<pre><code>node --version\n# Esperado: v18.x.x ou superior\n\nnpm --version\n# Esperado: 9.x.x ou superior\n</code></pre>"},{"location":"guias/configuracao-ambiente/requisitos/#3-postgresql-16","title":"3. PostgreSQL 16","text":"<p>Banco de dados relacional.</p>"},{"location":"guias/configuracao-ambiente/requisitos/#instalacao_2","title":"Instala\u00e7\u00e3o","text":"<p>Windows: <pre><code># Baixar installer de:\nhttps://www.postgresql.org/download/windows/\n</code></pre></p> <p>macOS: <pre><code>brew install postgresql@16\nbrew services start postgresql@16\n</code></pre></p> <p>Linux (Ubuntu/Debian): <pre><code>sudo sh -c 'echo \"deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main\" &gt; /etc/apt/sources.list.d/pgdg.list'\nwget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -\nsudo apt-get update\nsudo apt-get install postgresql-16\n</code></pre></p>"},{"location":"guias/configuracao-ambiente/requisitos/#verificar-instalacao_2","title":"Verificar Instala\u00e7\u00e3o","text":"<pre><code>psql --version\n# Esperado: psql (PostgreSQL) 16.x\n</code></pre>"},{"location":"guias/configuracao-ambiente/requisitos/#configurar-banco-de-dados","title":"Configurar Banco de Dados","text":"<pre><code># Conectar como postgres\nsudo -u postgres psql\n\n# Criar database\nCREATE DATABASE pay4tru;\n\n# Criar usu\u00e1rio (opcional)\nCREATE USER amasso_dev WITH PASSWORD 'senha123';\nGRANT ALL PRIVILEGES ON DATABASE pay4tru TO amasso_dev;\n\n# Sair\n\\q\n</code></pre>"},{"location":"guias/configuracao-ambiente/requisitos/#4-git","title":"4. Git","text":"<p>Controle de vers\u00e3o.</p>"},{"location":"guias/configuracao-ambiente/requisitos/#instalacao_3","title":"Instala\u00e7\u00e3o","text":"<p>Windows: <pre><code># Baixar de:\nhttps://git-scm.com/download/win\n</code></pre></p> <p>macOS: <pre><code>brew install git\n</code></pre></p> <p>Linux: <pre><code>sudo apt-get install git\n</code></pre></p>"},{"location":"guias/configuracao-ambiente/requisitos/#verificar-instalacao_3","title":"Verificar Instala\u00e7\u00e3o","text":"<pre><code>git --version\n# Esperado: git version 2.x.x\n</code></pre>"},{"location":"guias/configuracao-ambiente/requisitos/#5-docker-opcional","title":"5. Docker (Opcional)","text":"<p>Para executar PostgreSQL em container.</p>"},{"location":"guias/configuracao-ambiente/requisitos/#instalacao_4","title":"Instala\u00e7\u00e3o","text":"<p>Windows/macOS: <pre><code># Baixar Docker Desktop de:\nhttps://www.docker.com/products/docker-desktop\n</code></pre></p> <p>Linux: <pre><code># Instalar Docker Engine\ncurl -fsSL https://get.docker.com -o get-docker.sh\nsudo sh get-docker.sh\n\n# Instalar Docker Compose\nsudo apt-get install docker-compose-plugin\n</code></pre></p>"},{"location":"guias/configuracao-ambiente/requisitos/#verificar-instalacao_4","title":"Verificar Instala\u00e7\u00e3o","text":"<pre><code>docker --version\n# Esperado: Docker version 24.x.x\n\ndocker-compose --version\n# Esperado: Docker Compose version v2.x.x\n</code></pre>"},{"location":"guias/configuracao-ambiente/requisitos/#ides-e-editores-recomendados","title":"IDEs e Editores Recomendados","text":""},{"location":"guias/configuracao-ambiente/requisitos/#para-backend-net","title":"Para Backend (.NET)","text":"<p>Visual Studio 2022 (Windows/macOS) - \u2705 IntelliSense completo - \u2705 Debugger integrado - \u2705 Ferramentas EF Core - \ud83d\udd17 https://visualstudio.microsoft.com/</p> <p>JetBrains Rider (Multiplataforma) - \u2705 Excelente performance - \u2705 Refactoring avan\u00e7ado - \u2705 Integra\u00e7\u00e3o Git - \ud83d\udd17 https://www.jetbrains.com/rider/</p> <p>Visual Studio Code (Multiplataforma) - \u2705 Leve e r\u00e1pido - \u2705 Extens\u00e3o C# Dev Kit - \u2705 Debugger - \ud83d\udd17 https://code.visualstudio.com/</p> <p>Extens\u00f5es VSCode para .NET: <pre><code>- C# Dev Kit (Microsoft)\n- C# (Microsoft)\n- NuGet Package Manager\n- vscode-solution-explorer\n</code></pre></p>"},{"location":"guias/configuracao-ambiente/requisitos/#para-frontend-react-typescript","title":"Para Frontend (React + TypeScript)","text":"<p>Visual Studio Code (Recomendado) - \u2705 Suporte TypeScript nativo - \u2705 IntelliSense para React - \u2705 Integra\u00e7\u00e3o Vite</p> <p>Extens\u00f5es VSCode para React: <pre><code>- ES7+ React/Redux/React-Native snippets\n- ESLint\n- Prettier - Code formatter\n- Auto Rename Tag\n- Tailwind CSS IntelliSense (se usar)\n- TypeScript Vue Plugin (Volar)\n</code></pre></p> <p>WebStorm (JetBrains) - \u2705 IntelliSense poderoso - \u2705 Refactoring avan\u00e7ado - \ud83d\udd17 https://www.jetbrains.com/webstorm/</p>"},{"location":"guias/configuracao-ambiente/requisitos/#ferramentas-de-desenvolvimento","title":"Ferramentas de Desenvolvimento","text":""},{"location":"guias/configuracao-ambiente/requisitos/#1-postman-ou-insomnia","title":"1. Postman ou Insomnia","text":"<p>Testar APIs REST.</p> <p>Postman: <pre><code># Download: https://www.postman.com/downloads/\n</code></pre></p> <p>Insomnia: <pre><code># Download: https://insomnia.rest/download\n</code></pre></p>"},{"location":"guias/configuracao-ambiente/requisitos/#2-pgadmin-ou-dbeaver","title":"2. pgAdmin ou DBeaver","text":"<p>Gerenciar banco de dados PostgreSQL.</p> <p>pgAdmin: <pre><code># Geralmente instalado com PostgreSQL\n# Ou download: https://www.pgadmin.org/download/\n</code></pre></p> <p>DBeaver (Recomendado): <pre><code># Download: https://dbeaver.io/download/\n# Suporta m\u00faltiplos bancos, gratuito, multiplataforma\n</code></pre></p>"},{"location":"guias/configuracao-ambiente/requisitos/#3-git-client-opcional","title":"3. Git Client (Opcional)","text":"<p>GitKraken: <pre><code># Download: https://www.gitkraken.com/\n# Interface visual para Git\n</code></pre></p> <p>SourceTree: <pre><code># Download: https://www.sourcetreeapp.com/\n# Gratuito da Atlassian\n</code></pre></p>"},{"location":"guias/configuracao-ambiente/requisitos/#contas-e-credenciais-necessarias","title":"Contas e Credenciais Necess\u00e1rias","text":""},{"location":"guias/configuracao-ambiente/requisitos/#desenvolvimento-local","title":"Desenvolvimento Local","text":"<p>Para desenvolvimento local completo, voc\u00ea precisar\u00e1 de:</p> <ol> <li>Iugu (Sandbox)</li> <li>Criar conta gratuita: https://iugu.com</li> <li>Obter API Token de teste</li> <li> <p>Configurar Webhook URL (usar ngrok)</p> </li> <li> <p>Cloudinary (Free Tier)</p> </li> <li>Criar conta: https://cloudinary.com</li> <li>Obter: Cloud Name, API Key, API Secret</li> <li> <p>Limite free: 25 GB armazenamento, 25 GB banda</p> </li> <li> <p>Z-API (WhatsApp) - Opcional</p> </li> <li>Para testar notifica\u00e7\u00f5es WhatsApp</li> <li> <p>Plano free dispon\u00edvel: https://www.z-api.io/</p> </li> <li> <p>AWS SES (Email) - Opcional</p> </li> <li>Para envio de emails em dev</li> <li>Alternativa: usar SMTP local (Mailpit, Mailtrap)</li> </ol>"},{"location":"guias/configuracao-ambiente/requisitos/#ferramentas-de-teste-locais","title":"Ferramentas de Teste Locais","text":"<p>Mailpit (Email local): <pre><code># Instalar\nbrew install mailpit  # macOS\n# ou\ndocker run -d -p 1025:1025 -p 8025:8025 axllent/mailpit\n\n# Configurar SMTP:\n# Host: localhost\n# Port: 1025\n# Interface: http://localhost:8025\n</code></pre></p> <p>ngrok (Expor localhost): <pre><code># Instalar\nbrew install ngrok  # macOS\n# ou\nsnap install ngrok  # Linux\n# ou download: https://ngrok.com/download\n\n# Usar\nngrok http 7080\n# Copiar URL gerada e configurar no Iugu como Webhook URL\n</code></pre></p>"},{"location":"guias/configuracao-ambiente/requisitos/#configuracoes-do-sistema","title":"Configura\u00e7\u00f5es do Sistema","text":""},{"location":"guias/configuracao-ambiente/requisitos/#variaveis-de-ambiente","title":"Vari\u00e1veis de Ambiente","text":"<p>Criar arquivo <code>.env</code> ou configurar no sistema:</p> <p>Backend API: <pre><code>ASPNETCORE_ENVIRONMENT=Development\nDATABASE_LOCAL=true\nDATABASE_URL=Host=localhost;Database=pay4tru;Username=postgres;Password=senha123\nIUGU_API_TOKEN=seu_token_aqui\nIUGU_MASTER_ACCOUNT_ID=seu_account_id\nCLOUDINARY_CLOUD_NAME=seu_cloud_name\nCLOUDINARY_API_KEY=seu_api_key\nCLOUDINARY_API_SECRET=seu_api_secret\nJWT_SECRET=super_secret_key_min_32_chars_here\n</code></pre></p> <p>Frontend: <pre><code>VITE_API_URL=http://localhost:7080\nVITE_CLOUDINARY_CLOUD_NAME=seu_cloud_name\n</code></pre></p> <p>Email API: <pre><code>ASPNETCORE_ENVIRONMENT=Development\nDATABASE_LOCAL=true\nSMTP_HOST=localhost\nSMTP_PORT=1025\nSMTP_USER=\nSMTP_PASS=\nZAPI_INSTANCE_ID=seu_instance_id\nZAPI_TOKEN=seu_token\n</code></pre></p>"},{"location":"guias/configuracao-ambiente/requisitos/#portas-utilizadas","title":"Portas Utilizadas","text":"Servi\u00e7o Porta URL Backend API 7080 http://localhost:7080 Email API 5014 http://localhost:5014 Frontend 5173 http://localhost:5173 PostgreSQL 5432 localhost:5432 Mailpit UI 8025 http://localhost:8025 Hangfire Dashboard 5014/dashboard http://localhost:5014/dashboard"},{"location":"guias/configuracao-ambiente/requisitos/#verificacao-final","title":"Verifica\u00e7\u00e3o Final","text":"<p>Execute estes comandos para verificar se tudo est\u00e1 instalado:</p> <pre><code># .NET\ndotnet --version\n\n# Node.js\nnode --version\nnpm --version\n\n# PostgreSQL\npsql --version\n\n# Git\ngit --version\n\n# Docker (opcional)\ndocker --version\ndocker-compose --version\n\n# Clone do reposit\u00f3rio\ngit clone https://github.com/seu-usuario/amasso-monorepo.git\ncd amasso-monorepo\n</code></pre>"},{"location":"guias/configuracao-ambiente/requisitos/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<p>Agora que voc\u00ea tem todos os requisitos instalados:</p> <ol> <li>Configure o Backend</li> <li>Configure o Email API</li> <li>Configure o Frontend</li> <li>Configure o Banco de Dados</li> </ol>"},{"location":"guias/configuracao-ambiente/requisitos/#problemas-comuns","title":"Problemas Comuns","text":""},{"location":"guias/configuracao-ambiente/requisitos/#postgresql-nao-inicia","title":"PostgreSQL n\u00e3o inicia","text":"<pre><code># macOS\nbrew services restart postgresql@16\n\n# Linux\nsudo systemctl restart postgresql\n\n# Windows\n# Services &gt; PostgreSQL 16 &gt; Restart\n</code></pre>"},{"location":"guias/configuracao-ambiente/requisitos/#porta-ja-em-uso","title":"Porta j\u00e1 em uso","text":"<pre><code># Verificar o que est\u00e1 usando a porta\n# macOS/Linux\nlsof -i :7080\n\n# Windows\nnetstat -ano | findstr :7080\n\n# Matar processo\nkill -9 &lt;PID&gt;  # macOS/Linux\ntaskkill /PID &lt;PID&gt; /F  # Windows\n</code></pre>"},{"location":"guias/configuracao-ambiente/requisitos/#migrations-nao-aplicam","title":"Migrations n\u00e3o aplicam","text":"<pre><code>cd backend-api\ndotnet ef database drop --force\ndotnet ef database update\n</code></pre>"},{"location":"guias/configuracao-ambiente/requisitos/#suporte","title":"Suporte","text":"<p>Se encontrar problemas: 1. Consulte a documenta\u00e7\u00e3o oficial 2. Verifique os logs da aplica\u00e7\u00e3o 3. Entre em contato com a equipe</p>"},{"location":"guias/desenvolvimento/adicionar-endpoint/","title":"Guia: Adicionar Endpoint","text":""},{"location":"guias/desenvolvimento/adicionar-endpoint/#passo-a-passo","title":"Passo a Passo","text":""},{"location":"guias/desenvolvimento/adicionar-endpoint/#1-criar-dto-data-transfer-object","title":"1. Criar DTO (Data Transfer Object)","text":"<pre><code>// backend-api/Data/Dtos/CreateVideoDto.cs\npublic record CreateVideoDto\n{\n    public string Title { get; init; }\n    public string Description { get; init; }\n    public decimal Price { get; init; }\n    public DateTime? ReleaseDate { get; init; }\n}\n</code></pre>"},{"location":"guias/desenvolvimento/adicionar-endpoint/#2-criar-validador-opcional","title":"2. Criar Validador (Opcional)","text":"<pre><code>// backend-api/Data/Validations/CreateVideoDtoValidator.cs\npublic class CreateVideoDtoValidator : AbstractValidator&lt;CreateVideoDto&gt;\n{\n    public CreateVideoDtoValidator()\n    {\n        RuleFor(x =&gt; x.Title).NotEmpty().MaximumLength(200);\n        RuleFor(x =&gt; x.Price).GreaterThan(0);\n    }\n}\n</code></pre>"},{"location":"guias/desenvolvimento/adicionar-endpoint/#3-criar-servico","title":"3. Criar Servi\u00e7o","text":"<pre><code>// backend-api/Services/VideoService.cs\npublic class VideoService\n{\n    private readonly ApplicationDbContext _context;\n\n    public async Task&lt;Video&gt; CreateVideoAsync(CreateVideoDto dto)\n    {\n        var video = new Video\n        {\n            Title = dto.Title,\n            Description = dto.Description,\n            Price = dto.Price,\n            ReleaseDate = dto.ReleaseDate,\n            IsActive = true,\n            CreatedAt = DateTime.UtcNow\n        };\n\n        await _context.Videos.AddAsync(video);\n        await _context.SaveChangesAsync();\n\n        return video;\n    }\n}\n</code></pre>"},{"location":"guias/desenvolvimento/adicionar-endpoint/#4-criar-endpoint","title":"4. Criar Endpoint","text":"<pre><code>// backend-api/Endpoints/VideoEndpoints.cs\npublic static class VideoEndpoints\n{\n    public static void MapVideoEndpoints(this WebApplication app)\n    {\n        // Criar v\u00eddeo\n        app.MapPost(\"/api/videos\", async (\n            CreateVideoDto dto,\n            VideoService service) =&gt;\n        {\n            var video = await service.CreateVideoAsync(dto);\n            return Results.Created($\"/api/videos/{video.Id}\", video);\n        })\n        .RequireAuthorization(\"Admin\")\n        .WithName(\"CreateVideo\")\n        .WithOpenApi();\n\n        // Listar v\u00eddeos\n        app.MapGet(\"/api/videos\", async (\n            ApplicationDbContext context,\n            int page = 1,\n            int perPage = 20) =&gt;\n        {\n            var videos = await context.Videos\n                .Where(v =&gt; v.IsActive)\n                .OrderByDescending(v =&gt; v.CreatedAt)\n                .Skip((page - 1) * perPage)\n                .Take(perPage)\n                .ToListAsync();\n\n            return Results.Ok(videos);\n        })\n        .AllowAnonymous()\n        .WithName(\"ListVideos\")\n        .WithOpenApi();\n    }\n}\n</code></pre>"},{"location":"guias/desenvolvimento/adicionar-endpoint/#5-registrar-no-programcs","title":"5. Registrar no Program.cs","text":"<pre><code>// backend-api/Program.cs\n\n// Registrar servi\u00e7o\nbuilder.Services.AddScoped&lt;VideoService&gt;();\n\n// ... ap\u00f3s app build\n\n// Registrar endpoints\napp.MapVideoEndpoints();\n</code></pre>"},{"location":"guias/desenvolvimento/adicionar-endpoint/#6-frontend-criar-servico-de-api","title":"6. Frontend - Criar Servi\u00e7o de API","text":"<pre><code>// frontend-react/src/services/api/videoApi.ts\nimport { httpClient } from '../httpClient'\n\nexport interface CreateVideoDto {\n  title: string\n  description: string\n  price: number\n  releaseDate?: string\n}\n\nexport const videoApi = {\n  create: async (data: CreateVideoDto) =&gt; {\n    const response = await httpClient.post('/api/videos', data)\n    return response.data\n  },\n\n  getAll: async (page = 1, perPage = 20) =&gt; {\n    const response = await httpClient.get('/api/videos', {\n      params: { page, perPage }\n    })\n    return response.data\n  },\n\n  getById: async (id: number) =&gt; {\n    const response = await httpClient.get(`/api/videos/${id}`)\n    return response.data\n  }\n}\n</code></pre>"},{"location":"guias/desenvolvimento/adicionar-endpoint/#7-frontend-usar-no-componente","title":"7. Frontend - Usar no Componente","text":"<pre><code>// frontend-react/src/pages/Videos/CreateVideo.tsx\nimport { useForm } from 'react-hook-form'\nimport { videoApi } from '@/services/api/videoApi'\n\nexport const CreateVideo = () =&gt; {\n  const { register, handleSubmit } = useForm&lt;CreateVideoDto&gt;()\n  const navigate = useNavigate()\n\n  const onSubmit = async (data: CreateVideoDto) =&gt; {\n    try {\n      const video = await videoApi.create(data)\n      toast.success('V\u00eddeo criado!')\n      navigate(`/videos/${video.id}`)\n    } catch (error) {\n      toast.error('Erro ao criar v\u00eddeo')\n    }\n  }\n\n  return (\n    &lt;form onSubmit={handleSubmit(onSubmit)}&gt;\n      &lt;input {...register('title')} placeholder=\"T\u00edtulo\" /&gt;\n      &lt;input {...register('description')} placeholder=\"Descri\u00e7\u00e3o\" /&gt;\n      &lt;input type=\"number\" {...register('price')} placeholder=\"Pre\u00e7o\" /&gt;\n      &lt;button type=\"submit\"&gt;Criar&lt;/button&gt;\n    &lt;/form&gt;\n  )\n}\n</code></pre>"},{"location":"guias/desenvolvimento/adicionar-endpoint/#testes","title":"Testes","text":""},{"location":"guias/desenvolvimento/adicionar-endpoint/#backend-testar-com-curl","title":"Backend - Testar com cURL","text":"<pre><code># Obter token\nTOKEN=$(curl -s -X POST http://localhost:7080/api/login \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"email\":\"admin@amasso.com\",\"password\":\"Admin@123\"}' \\\n  | jq -r '.token')\n\n# Criar v\u00eddeo\ncurl -X POST http://localhost:7080/api/videos \\\n  -H \"Authorization: Bearer $TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"title\": \"Novo V\u00eddeo\",\n    \"description\": \"Descri\u00e7\u00e3o\",\n    \"price\": 50.00\n  }'\n</code></pre>"},{"location":"guias/desenvolvimento/adicionar-endpoint/#frontend-testar-no-navegador","title":"Frontend - Testar no navegador","text":"<pre><code>// Console do navegador\nconst videoApi = window.videoApi || await import('/src/services/api/videoApi')\n\nawait videoApi.create({\n  title: 'Teste',\n  description: 'Descri\u00e7\u00e3o',\n  price: 100\n})\n</code></pre>"},{"location":"guias/desenvolvimento/adicionar-endpoint/#boas-praticas","title":"Boas Pr\u00e1ticas","text":"<ol> <li>DTOs: Use para entrada/sa\u00edda de dados</li> <li>Valida\u00e7\u00e3o: Sempre valide entrada</li> <li>Autoriza\u00e7\u00e3o: Use <code>.RequireAuthorization()</code> quando necess\u00e1rio</li> <li>Async/Await: Use opera\u00e7\u00f5es ass\u00edncronas</li> <li>Try/Catch: Trate erros adequadamente</li> <li>Status Codes: Retorne c\u00f3digos HTTP corretos</li> <li>OpenAPI: Use <code>.WithOpenApi()</code> para documenta\u00e7\u00e3o autom\u00e1tica</li> </ol>"},{"location":"guias/desenvolvimento/adicionar-endpoint/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<ul> <li>Adicionar Entidade</li> <li>Criar Migration</li> <li>Padr\u00f5es de C\u00f3digo</li> </ul>"},{"location":"guias/desenvolvimento/adicionar-entidade/","title":"Guia: Adicionar Entidade","text":""},{"location":"guias/desenvolvimento/adicionar-entidade/#passo-a-passo","title":"Passo a Passo","text":""},{"location":"guias/desenvolvimento/adicionar-entidade/#1-criar-classe-entity","title":"1. Criar Classe Entity","text":"<pre><code>// backend-api/Data/Entities/VideoComment.cs\npublic class VideoComment : Base\n{\n    public long VideoId { get; set; }\n    public long UserId { get; set; }\n    public string Comment { get; set; }\n    public int Rating { get; set; } // 1-5\n\n    // Navigation properties\n    public Video Video { get; set; }\n    public User User { get; set; }\n}\n</code></pre> <p>Base Class: <pre><code>public abstract class Base\n{\n    public long Id { get; set; }\n    public bool IsActive { get; set; } = true;\n    public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n    public DateTime? UpdatedAt { get; set; }\n    public DateTime? DeletedAt { get; set; }\n}\n</code></pre></p>"},{"location":"guias/desenvolvimento/adicionar-entidade/#2-criar-configuration","title":"2. Criar Configuration","text":"<pre><code>// backend-api/Data/Configuration/VideoCommentConfiguration.cs\npublic class VideoCommentConfiguration : IEntityTypeConfiguration&lt;VideoComment&gt;\n{\n    public void Configure(EntityTypeBuilder&lt;VideoComment&gt; builder)\n    {\n        builder.ToTable(\"video_comments\");\n\n        builder.HasKey(x =&gt; x.Id);\n\n        builder.Property(x =&gt; x.Id)\n            .HasColumnName(\"id\")\n            .ValueGeneratedOnAdd();\n\n        builder.Property(x =&gt; x.VideoId)\n            .HasColumnName(\"video_id\")\n            .IsRequired();\n\n        builder.Property(x =&gt; x.UserId)\n            .HasColumnName(\"user_id\")\n            .IsRequired();\n\n        builder.Property(x =&gt; x.Comment)\n            .HasColumnName(\"comment\")\n            .HasMaxLength(1000)\n            .IsRequired();\n\n        builder.Property(x =&gt; x.Rating)\n            .HasColumnName(\"rating\")\n            .IsRequired();\n\n        builder.Property(x =&gt; x.IsActive)\n            .HasColumnName(\"is_active\")\n            .HasDefaultValue(true);\n\n        builder.Property(x =&gt; x.CreatedAt)\n            .HasColumnName(\"created_at\")\n            .HasDefaultValueSql(\"CURRENT_TIMESTAMP\");\n\n        builder.Property(x =&gt; x.UpdatedAt)\n            .HasColumnName(\"updated_at\");\n\n        builder.Property(x =&gt; x.DeletedAt)\n            .HasColumnName(\"deleted_at\");\n\n        // Relacionamentos\n        builder.HasOne(x =&gt; x.Video)\n            .WithMany()\n            .HasForeignKey(x =&gt; x.VideoId)\n            .OnDelete(DeleteBehavior.Restrict);\n\n        builder.HasOne(x =&gt; x.User)\n            .WithMany()\n            .HasForeignKey(x =&gt; x.UserId)\n            .OnDelete(DeleteBehavior.Restrict);\n\n        // \u00cdndices\n        builder.HasIndex(x =&gt; x.VideoId);\n        builder.HasIndex(x =&gt; x.UserId);\n        builder.HasIndex(x =&gt; new { x.VideoId, x.UserId });\n\n        // Query filter para soft delete\n        builder.HasQueryFilter(x =&gt; x.DeletedAt == null);\n    }\n}\n</code></pre>"},{"location":"guias/desenvolvimento/adicionar-entidade/#3-adicionar-dbset-no-context","title":"3. Adicionar DbSet no Context","text":"<pre><code>// backend-api/Data/Context/ApplicationDbContext.cs\npublic class ApplicationDbContext : DbContext\n{\n    // ... outros DbSets\n\n    public DbSet&lt;VideoComment&gt; VideoComments { get; set; }\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        // ... outras configura\u00e7\u00f5es\n\n        modelBuilder.ApplyConfiguration(new VideoCommentConfiguration());\n    }\n}\n</code></pre>"},{"location":"guias/desenvolvimento/adicionar-entidade/#4-criar-migration","title":"4. Criar Migration","text":"<pre><code>dotnet ef migrations add AddVideoCommentsTable\n</code></pre> <p>Isso gera:</p> <pre><code>// Migrations/YYYYMMDDHHMMSS_AddVideoCommentsTable.cs\npublic partial class AddVideoCommentsTable : Migration\n{\n    protected override void Up(MigrationBuilder migrationBuilder)\n    {\n        migrationBuilder.CreateTable(\n            name: \"video_comments\",\n            columns: table =&gt; new\n            {\n                id = table.Column&lt;long&gt;(type: \"bigint\", nullable: false)\n                    .Annotation(\"Npgsql:ValueGenerationStrategy\", \n                        NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),\n                video_id = table.Column&lt;long&gt;(type: \"bigint\", nullable: false),\n                user_id = table.Column&lt;long&gt;(type: \"bigint\", nullable: false),\n                comment = table.Column&lt;string&gt;(type: \"character varying(1000)\", \n                    maxLength: 1000, nullable: false),\n                rating = table.Column&lt;int&gt;(type: \"integer\", nullable: false),\n                is_active = table.Column&lt;bool&gt;(type: \"boolean\", nullable: false, \n                    defaultValue: true),\n                created_at = table.Column&lt;DateTime&gt;(type: \"timestamp with time zone\", \n                    nullable: false, defaultValueSql: \"CURRENT_TIMESTAMP\"),\n                updated_at = table.Column&lt;DateTime&gt;(type: \"timestamp with time zone\", \n                    nullable: true),\n                deleted_at = table.Column&lt;DateTime&gt;(type: \"timestamp with time zone\", \n                    nullable: true)\n            },\n            constraints: table =&gt;\n            {\n                table.PrimaryKey(\"PK_video_comments\", x =&gt; x.id);\n                table.ForeignKey(\n                    name: \"FK_video_comments_videos_video_id\",\n                    column: x =&gt; x.video_id,\n                    principalTable: \"videos\",\n                    principalColumn: \"id\",\n                    onDelete: ReferentialAction.Restrict);\n                table.ForeignKey(\n                    name: \"FK_video_comments_users_user_id\",\n                    column: x =&gt; x.user_id,\n                    principalTable: \"users\",\n                    principalColumn: \"id\",\n                    onDelete: ReferentialAction.Restrict);\n            });\n\n        migrationBuilder.CreateIndex(\n            name: \"IX_video_comments_video_id\",\n            table: \"video_comments\",\n            column: \"video_id\");\n\n        migrationBuilder.CreateIndex(\n            name: \"IX_video_comments_user_id\",\n            table: \"video_comments\",\n            column: \"user_id\");\n\n        migrationBuilder.CreateIndex(\n            name: \"IX_video_comments_video_id_user_id\",\n            table: \"video_comments\",\n            columns: new[] { \"video_id\", \"user_id\" });\n    }\n\n    protected override void Down(MigrationBuilder migrationBuilder)\n    {\n        migrationBuilder.DropTable(\n            name: \"video_comments\");\n    }\n}\n</code></pre>"},{"location":"guias/desenvolvimento/adicionar-entidade/#5-aplicar-migration","title":"5. Aplicar Migration","text":"<pre><code>dotnet ef database update\n</code></pre>"},{"location":"guias/desenvolvimento/adicionar-entidade/#6-verificar-no-postgresql","title":"6. Verificar no PostgreSQL","text":"<pre><code>\\d video_comments\n\n-- Listar \u00edndices\n\\d+ video_comments\n\n-- Verificar constraints\nSELECT conname, contype FROM pg_constraint \nWHERE conrelid = 'video_comments'::regclass;\n</code></pre>"},{"location":"guias/desenvolvimento/adicionar-entidade/#convencoes","title":"Conven\u00e7\u00f5es","text":""},{"location":"guias/desenvolvimento/adicionar-entidade/#nomenclatura","title":"Nomenclatura","text":"Conceito C# PostgreSQL Classe <code>VideoComment</code> <code>video_comments</code> Propriedade <code>VideoId</code> <code>video_id</code> Enum <code>UserTypeEnum</code> <code>varchar(50)</code>"},{"location":"guias/desenvolvimento/adicionar-entidade/#tipos-de-dados","title":"Tipos de Dados","text":"C# PostgreSQL <code>long</code> <code>bigint</code> <code>int</code> <code>integer</code> <code>string</code> <code>varchar(n)</code> ou <code>text</code> <code>decimal</code> <code>numeric(10,2)</code> <code>DateTime</code> <code>timestamp with time zone</code> <code>bool</code> <code>boolean</code>"},{"location":"guias/desenvolvimento/adicionar-entidade/#padroes","title":"Padr\u00f5es","text":"<ol> <li>Herdar de Base: Todas as entidades herdam <code>Base</code></li> <li>Snake case: Nomes de tabelas e colunas em snake_case</li> <li>Soft delete: Usar <code>DeletedAt</code> + Query Filter</li> <li>Timestamps: <code>CreatedAt</code> obrigat\u00f3rio, <code>UpdatedAt</code> opcional</li> <li>Foreign Keys: Sempre com <code>OnDelete.Restrict</code></li> <li>\u00cdndices: Criar para FKs e campos de busca</li> </ol>"},{"location":"guias/desenvolvimento/adicionar-entidade/#boas-praticas","title":"Boas Pr\u00e1ticas","text":"<p>\u2705 Fazer: - Herdar de <code>Base</code> - Usar <code>IEntityTypeConfiguration</code> - Aplicar Query Filter para soft delete - Criar \u00edndices para FKs - Usar <code>OnDelete.Restrict</code></p> <p>\u274c Evitar: - Deletar fisicamente (usar soft delete) - Cascade delete (usar Restrict) - Campos sem valida\u00e7\u00e3o - Tabelas sem \u00edndices</p>"},{"location":"guias/desenvolvimento/adicionar-entidade/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<ul> <li>Criar Migration</li> <li>Adicionar Endpoint</li> <li>Padr\u00f5es de C\u00f3digo</li> </ul>"},{"location":"guias/desenvolvimento/criar-migration/","title":"Guia: Criar Migration","text":""},{"location":"guias/desenvolvimento/criar-migration/#comandos-basicos","title":"Comandos B\u00e1sicos","text":""},{"location":"guias/desenvolvimento/criar-migration/#criar-migration","title":"Criar Migration","text":"<pre><code>dotnet ef migrations add NomeDaMigration\n</code></pre> <p>Exemplos: <pre><code>dotnet ef migrations add AddVideoCommentsTable\ndotnet ef migrations add AddPriceColumnToVideos\ndotnet ef migrations add UpdateUserEmailIndex\n</code></pre></p>"},{"location":"guias/desenvolvimento/criar-migration/#aplicar-migrations","title":"Aplicar Migrations","text":"<pre><code># Aplicar todas pendentes\ndotnet ef database update\n\n# Aplicar at\u00e9 uma espec\u00edfica\ndotnet ef database update NomeDaMigration\n\n# Reverter todas\ndotnet ef database update 0\n</code></pre>"},{"location":"guias/desenvolvimento/criar-migration/#listar-migrations","title":"Listar Migrations","text":"<pre><code>dotnet ef migrations list\n</code></pre>"},{"location":"guias/desenvolvimento/criar-migration/#remover-ultima-migration-nao-aplicada","title":"Remover \u00daltima Migration (n\u00e3o aplicada)","text":"<pre><code>dotnet ef migrations remove\n</code></pre>"},{"location":"guias/desenvolvimento/criar-migration/#gerar-script-sql","title":"Gerar Script SQL","text":"<pre><code># Gerar SQL de todas as migrations\ndotnet ef migrations script\n\n# Gerar SQL de uma migration espec\u00edfica\ndotnet ef migrations script PreviousMigration TargetMigration\n\n# Gerar SQL idempotente (com IF NOT EXISTS)\ndotnet ef migrations script --idempotent\n</code></pre>"},{"location":"guias/desenvolvimento/criar-migration/#tipos-de-migrations","title":"Tipos de Migrations","text":""},{"location":"guias/desenvolvimento/criar-migration/#1-criar-tabela","title":"1. Criar Tabela","text":"<pre><code>public partial class AddVideoCommentsTable : Migration\n{\n    protected override void Up(MigrationBuilder migrationBuilder)\n    {\n        migrationBuilder.CreateTable(\n            name: \"video_comments\",\n            columns: table =&gt; new\n            {\n                id = table.Column&lt;long&gt;(nullable: false)\n                    .Annotation(\"Npgsql:ValueGenerationStrategy\", \n                        NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),\n                video_id = table.Column&lt;long&gt;(nullable: false),\n                comment = table.Column&lt;string&gt;(maxLength: 1000, nullable: false),\n                created_at = table.Column&lt;DateTime&gt;(nullable: false)\n            },\n            constraints: table =&gt;\n            {\n                table.PrimaryKey(\"PK_video_comments\", x =&gt; x.id);\n                table.ForeignKey(\n                    name: \"FK_video_comments_videos_video_id\",\n                    column: x =&gt; x.video_id,\n                    principalTable: \"videos\",\n                    principalColumn: \"id\",\n                    onDelete: ReferentialAction.Restrict);\n            });\n    }\n\n    protected override void Down(MigrationBuilder migrationBuilder)\n    {\n        migrationBuilder.DropTable(name: \"video_comments\");\n    }\n}\n</code></pre>"},{"location":"guias/desenvolvimento/criar-migration/#2-adicionar-coluna","title":"2. Adicionar Coluna","text":"<pre><code>public partial class AddDiscountToVideos : Migration\n{\n    protected override void Up(MigrationBuilder migrationBuilder)\n    {\n        migrationBuilder.AddColumn&lt;decimal&gt;(\n            name: \"discount_percentage\",\n            table: \"videos\",\n            type: \"numeric(5,2)\",\n            nullable: true,\n            defaultValue: 0);\n    }\n\n    protected override void Down(MigrationBuilder migrationBuilder)\n    {\n        migrationBuilder.DropColumn(\n            name: \"discount_percentage\",\n            table: \"videos\");\n    }\n}\n</code></pre>"},{"location":"guias/desenvolvimento/criar-migration/#3-modificar-coluna","title":"3. Modificar Coluna","text":"<pre><code>public partial class UpdateVideoTitleLength : Migration\n{\n    protected override void Up(MigrationBuilder migrationBuilder)\n    {\n        migrationBuilder.AlterColumn&lt;string&gt;(\n            name: \"title\",\n            table: \"videos\",\n            type: \"character varying(300)\",\n            maxLength: 300,\n            nullable: false,\n            oldClrType: typeof(string),\n            oldType: \"character varying(200)\",\n            oldMaxLength: 200);\n    }\n\n    protected override void Down(MigrationBuilder migrationBuilder)\n    {\n        migrationBuilder.AlterColumn&lt;string&gt;(\n            name: \"title\",\n            table: \"videos\",\n            type: \"character varying(200)\",\n            maxLength: 200,\n            nullable: false,\n            oldClrType: typeof(string),\n            oldType: \"character varying(300)\",\n            oldMaxLength: 300);\n    }\n}\n</code></pre>"},{"location":"guias/desenvolvimento/criar-migration/#4-criar-indice","title":"4. Criar \u00cdndice","text":"<pre><code>public partial class AddEmailIndexToUsers : Migration\n{\n    protected override void Up(MigrationBuilder migrationBuilder)\n    {\n        migrationBuilder.CreateIndex(\n            name: \"IX_users_email\",\n            table: \"users\",\n            column: \"email\",\n            unique: true);\n    }\n\n    protected override void Down(MigrationBuilder migrationBuilder)\n    {\n        migrationBuilder.DropIndex(\n            name: \"IX_users_email\",\n            table: \"users\");\n    }\n}\n</code></pre>"},{"location":"guias/desenvolvimento/criar-migration/#5-migration-com-dados","title":"5. Migration com Dados","text":"<pre><code>public partial class SeedInitialData : Migration\n{\n    protected override void Up(MigrationBuilder migrationBuilder)\n    {\n        migrationBuilder.InsertData(\n            table: \"users\",\n            columns: new[] { \"email\", \"password_hash\", \"first_name\", \"last_name\", \"type\" },\n            values: new object[] \n            { \n                \"admin@amasso.com\", \n                \"hashed_password_here\", \n                \"Admin\", \n                \"User\", \n                \"Admin\" \n            });\n    }\n\n    protected override void Down(MigrationBuilder migrationBuilder)\n    {\n        migrationBuilder.DeleteData(\n            table: \"users\",\n            keyColumn: \"email\",\n            keyValue: \"admin@amasso.com\");\n    }\n}\n</code></pre>"},{"location":"guias/desenvolvimento/criar-migration/#6-migration-com-sql-customizado","title":"6. Migration com SQL Customizado","text":"<pre><code>public partial class AddVideoFullTextSearch : Migration\n{\n    protected override void Up(MigrationBuilder migrationBuilder)\n    {\n        migrationBuilder.Sql(@\"\n            ALTER TABLE videos \n            ADD COLUMN search_vector tsvector \n            GENERATED ALWAYS AS (\n                to_tsvector('portuguese', coalesce(title, '') || ' ' || coalesce(description, ''))\n            ) STORED;\n\n            CREATE INDEX idx_videos_search_vector ON videos USING GIN (search_vector);\n        \");\n    }\n\n    protected override void Down(MigrationBuilder migrationBuilder)\n    {\n        migrationBuilder.Sql(@\"\n            DROP INDEX idx_videos_search_vector;\n            ALTER TABLE videos DROP COLUMN search_vector;\n        \");\n    }\n}\n</code></pre>"},{"location":"guias/desenvolvimento/criar-migration/#boas-praticas","title":"Boas Pr\u00e1ticas","text":""},{"location":"guias/desenvolvimento/criar-migration/#nomenclatura","title":"Nomenclatura","text":"<p>\u2705 Bom: - <code>AddVideoCommentsTable</code> - <code>AddPriceColumnToVideos</code> - <code>UpdateUserEmailIndex</code> - <code>RemoveOldPaymentMethods</code></p> <p>\u274c Ruim: - <code>Migration1</code> - <code>Update</code> - <code>Fix</code> - <code>Changes</code></p>"},{"location":"guias/desenvolvimento/criar-migration/#reversibilidade","title":"Reversibilidade","text":"<p>Sempre implemente <code>Down()</code> para permitir rollback:</p> <pre><code>protected override void Down(MigrationBuilder migrationBuilder)\n{\n    // Reverter TODAS as mudan\u00e7as do Up()\n    migrationBuilder.DropTable(name: \"nova_tabela\");\n}\n</code></pre>"},{"location":"guias/desenvolvimento/criar-migration/#dados-de-producao","title":"Dados de Produ\u00e7\u00e3o","text":"<p>\u26a0\ufe0f Cuidado ao: - Remover colunas (dados ser\u00e3o perdidos) - Alterar tipos (pode falhar se dados incompat\u00edveis) - Adicionar colunas <code>NOT NULL</code> sem default</p> <p>Solu\u00e7\u00e3o: Migration em 2 etapas</p> <pre><code>// Etapa 1: Adicionar coluna nullable\nprotected override void Up(MigrationBuilder migrationBuilder)\n{\n    migrationBuilder.AddColumn&lt;string&gt;(\n        name: \"new_field\",\n        table: \"users\",\n        nullable: true);\n}\n\n// Etapa 2 (pr\u00f3xima migration): Popular dados e tornar NOT NULL\nprotected override void Up(MigrationBuilder migrationBuilder)\n{\n    migrationBuilder.Sql(\"UPDATE users SET new_field = 'default' WHERE new_field IS NULL\");\n\n    migrationBuilder.AlterColumn&lt;string&gt;(\n        name: \"new_field\",\n        table: \"users\",\n        nullable: false);\n}\n</code></pre>"},{"location":"guias/desenvolvimento/criar-migration/#troubleshooting","title":"Troubleshooting","text":""},{"location":"guias/desenvolvimento/criar-migration/#erro-migration-pendente","title":"Erro: Migration pendente","text":"<pre><code>dotnet ef migrations list\ndotnet ef database update\n</code></pre>"},{"location":"guias/desenvolvimento/criar-migration/#erro-conflito-de-migration","title":"Erro: Conflito de migration","text":"<pre><code># Listar migrations aplicadas\ndotnet ef migrations list\n\n# Reverter para migration anterior\ndotnet ef database update PreviousMigration\n\n# Remover migration conflitante\ndotnet ef migrations remove\n\n# Recriar migration\ndotnet ef migrations add FixedMigration\n</code></pre>"},{"location":"guias/desenvolvimento/criar-migration/#erro-cannot-drop-column-fk-constraint","title":"Erro: Cannot drop column (FK constraint)","text":"<pre><code>// 1. Remover FK primeiro\nmigrationBuilder.DropForeignKey(\"FK_orders_videos\", \"orders\");\n\n// 2. Remover coluna\nmigrationBuilder.DropColumn(\"video_id\", \"orders\");\n</code></pre>"},{"location":"guias/desenvolvimento/criar-migration/#ambientes","title":"Ambientes","text":""},{"location":"guias/desenvolvimento/criar-migration/#desenvolvimento","title":"Desenvolvimento","text":"<pre><code>dotnet ef database update\n</code></pre>"},{"location":"guias/desenvolvimento/criar-migration/#stagingproducao","title":"Staging/Produ\u00e7\u00e3o","text":"<pre><code># Gerar script SQL\ndotnet ef migrations script --idempotent --output migrations.sql\n\n# Executar via psql\npsql -h host -U user -d database -f migrations.sql\n</code></pre>"},{"location":"guias/desenvolvimento/criar-migration/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<ul> <li>Adicionar Entidade</li> <li>Adicionar Endpoint</li> <li>Banco de Dados</li> </ul>"},{"location":"guias/desenvolvimento/estrutura-projeto/","title":"Estrutura de Projeto","text":""},{"location":"guias/desenvolvimento/estrutura-projeto/#overview","title":"Overview","text":"<p>O monorepo Amasso cont\u00e9m 3 projetos principais:</p> <pre><code>amasso-monorepo/\n\u251c\u2500\u2500 backend-api/          # API principal (.NET 8)\n\u251c\u2500\u2500 email-api/            # API de notifica\u00e7\u00f5es (.NET 8 + Hangfire)\n\u251c\u2500\u2500 frontend-react/       # Interface web (React + TypeScript)\n\u2514\u2500\u2500 documentation/        # Documenta\u00e7\u00e3o (MkDocs)\n</code></pre>"},{"location":"guias/desenvolvimento/estrutura-projeto/#backend-api-net-8","title":"Backend API (.NET 8)","text":""},{"location":"guias/desenvolvimento/estrutura-projeto/#estrutura-de-pastas","title":"Estrutura de Pastas","text":"<pre><code>backend-api/\n\u251c\u2500\u2500 Data/\n\u2502   \u251c\u2500\u2500 Configuration/      # EF Core Configurations (FluentAPI)\n\u2502   \u2502   \u251c\u2500\u2500 UserConfiguration.cs\n\u2502   \u2502   \u251c\u2500\u2500 VideoConfiguration.cs\n\u2502   \u2502   \u2514\u2500\u2500 OrderConfiguration.cs\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 Context/\n\u2502   \u2502   \u2514\u2500\u2500 ApplicationDbContext.cs\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 Dtos/              # Data Transfer Objects\n\u2502   \u2502   \u251c\u2500\u2500 CreateOrderDto.cs\n\u2502   \u2502   \u251c\u2500\u2500 UserDto.cs\n\u2502   \u2502   \u2514\u2500\u2500 VideoDto.cs\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 Entities/          # Modelos do banco de dados\n\u2502   \u2502   \u251c\u2500\u2500 User.cs\n\u2502   \u2502   \u251c\u2500\u2500 Video.cs\n\u2502   \u2502   \u251c\u2500\u2500 Order.cs\n\u2502   \u2502   \u2514\u2500\u2500 Payment.cs\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 Enums/            # Enumera\u00e7\u00f5es\n\u2502   \u2502   \u251c\u2500\u2500 UserTypeEnum.cs\n\u2502   \u2502   \u251c\u2500\u2500 PaymentStatusEnum.cs\n\u2502   \u2502   \u2514\u2500\u2500 OwnerSubAccountStatusEnum.cs\n\u2502   \u2502\n\u2502   \u2514\u2500\u2500 Validations/      # FluentValidation\n\u2502       \u251c\u2500\u2500 CreateOrderDtoValidator.cs\n\u2502       \u2514\u2500\u2500 UpdateUserDtoValidator.cs\n\u2502\n\u251c\u2500\u2500 Endpoints/            # Minimal APIs\n\u2502   \u251c\u2500\u2500 AdminEndpoints.cs\n\u2502   \u251c\u2500\u2500 VideoEndpoints.cs\n\u2502   \u251c\u2500\u2500 OrderEndpoints.cs\n\u2502   \u251c\u2500\u2500 UserEndpoints.cs\n\u2502   \u251c\u2500\u2500 PromoterEndpoint.cs\n\u2502   \u251c\u2500\u2500 OwnerEndpoints.cs\n\u2502   \u2514\u2500\u2500 WebHookEndpoint.cs\n\u2502\n\u251c\u2500\u2500 Services/             # L\u00f3gica de neg\u00f3cio\n\u2502   \u251c\u2500\u2500 Admin/\n\u2502   \u2502   \u251c\u2500\u2500 AdminService.cs\n\u2502   \u2502   \u2514\u2500\u2500 KycService.cs\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 External/\n\u2502   \u2502   \u251c\u2500\u2500 IuguService.cs\n\u2502   \u2502   \u251c\u2500\u2500 CloudinaryService.cs\n\u2502   \u2502   \u2514\u2500\u2500 ZApiService.cs\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 Promoter/\n\u2502   \u2502   \u2514\u2500\u2500 AffiliateLinkService.cs\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 LoginService.cs\n\u2502   \u251c\u2500\u2500 UserService.cs\n\u2502   \u251c\u2500\u2500 VideoService.cs\n\u2502   \u251c\u2500\u2500 OrderService.cs\n\u2502   \u2514\u2500\u2500 PaymentService.cs\n\u2502\n\u251c\u2500\u2500 Helpers/\n\u2502   \u251c\u2500\u2500 Constants.cs\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 Extensions/\n\u2502   \u2502   \u251c\u2500\u2500 DateTimeExtensions.cs\n\u2502   \u2502   \u251c\u2500\u2500 StringExtensions.cs\n\u2502   \u2502   \u2514\u2500\u2500 QueryableExtensions.cs\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 Logging/\n\u2502   \u2502   \u2514\u2500\u2500 LoggingMiddleware.cs\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 Middlewares/\n\u2502   \u2502   \u251c\u2500\u2500 ExceptionHandleMiddleware.cs\n\u2502   \u2502   \u2514\u2500\u2500 TokenAuthenticationMiddleware.cs\n\u2502   \u2502\n\u2502   \u2514\u2500\u2500 Wrappers/\n\u2502       \u2514\u2500\u2500 Response.cs\n\u2502\n\u251c\u2500\u2500 Migrations/           # EF Core Migrations\n\u2502   \u251c\u2500\u2500 20250101000000_InitialCreate.cs\n\u2502   \u2514\u2500\u2500 20250115000000_AddVideoRevenueConfig.cs\n\u2502\n\u251c\u2500\u2500 Models/\n\u2502   \u2514\u2500\u2500 Configuration/    # Configura\u00e7\u00f5es de integra\u00e7\u00e3o\n\u2502       \u251c\u2500\u2500 IuguConfig.cs\n\u2502       \u2514\u2500\u2500 CloudinaryConfig.cs\n\u2502\n\u251c\u2500\u2500 appsettings.json\n\u251c\u2500\u2500 appsettings.Development.json\n\u251c\u2500\u2500 Program.cs\n\u251c\u2500\u2500 Usings.cs\n\u2514\u2500\u2500 Pay4Tru.Api.csproj\n</code></pre>"},{"location":"guias/desenvolvimento/estrutura-projeto/#camadas-e-responsabilidades","title":"Camadas e Responsabilidades","text":""},{"location":"guias/desenvolvimento/estrutura-projeto/#1-endpoints-minimal-apis","title":"1. Endpoints (Minimal APIs)","text":"<p>Definem rotas HTTP e valida\u00e7\u00f5es b\u00e1sicas.</p> <pre><code>// VideoEndpoints.cs\npublic static class VideoEndpoints\n{\n    public static void MapVideoEndpoints(this IEndpointRouteBuilder app)\n    {\n        app.MapGet(\"/api/videos\", GetAllVideos);\n        app.MapGet(\"/api/videos/{id:long}\", GetVideoById);\n        app.MapPost(\"/api/videos\", CreateVideo).RequireAuthorization(\"Admin\");\n    }\n\n    private static async Task&lt;IResult&gt; GetAllVideos(\n        VideoService service,\n        int page = 1,\n        int perPage = 20)\n    {\n        var videos = await service.GetAllAsync(page, perPage);\n        return Results.Ok(videos);\n    }\n}\n</code></pre>"},{"location":"guias/desenvolvimento/estrutura-projeto/#2-services","title":"2. Services","text":"<p>Cont\u00e9m l\u00f3gica de neg\u00f3cio.</p> <pre><code>// VideoService.cs\npublic class VideoService\n{\n    private readonly ApplicationDbContext _context;\n    private readonly ILogger&lt;VideoService&gt; _logger;\n\n    public async Task&lt;List&lt;VideoDto&gt;&gt; GetAllAsync(int page, int perPage)\n    {\n        var videos = await _context.Videos\n            .Where(v =&gt; v.IsActive)\n            .OrderByDescending(v =&gt; v.CreatedAt)\n            .Skip((page - 1) * perPage)\n            .Take(perPage)\n            .Select(v =&gt; new VideoDto\n            {\n                Id = v.Id,\n                Title = v.Title,\n                Price = v.Price\n            })\n            .ToListAsync();\n\n        return videos;\n    }\n}\n</code></pre>"},{"location":"guias/desenvolvimento/estrutura-projeto/#3-entities","title":"3. Entities","text":"<p>Modelos do banco de dados com EF Core.</p> <pre><code>// Data/Entities/Video.cs\npublic class Video\n{\n    public long Id { get; set; }\n    public string Title { get; set; }\n    public string Description { get; set; }\n    public decimal Price { get; set; }\n    public bool IsActive { get; set; }\n    public DateTime CreatedAt { get; set; }\n\n    // Navigation Properties\n    public VideoRevenueConfig VideoRevenueConfig { get; set; }\n    public ICollection&lt;Order&gt; Orders { get; set; }\n}\n</code></pre>"},{"location":"guias/desenvolvimento/estrutura-projeto/#4-configuration-fluentapi","title":"4. Configuration (FluentAPI)","text":"<p>Configura\u00e7\u00f5es de tabelas e relacionamentos.</p> <pre><code>// Data/Configuration/VideoConfiguration.cs\npublic class VideoConfiguration : IEntityTypeConfiguration&lt;Video&gt;\n{\n    public void Configure(EntityTypeBuilder&lt;Video&gt; builder)\n    {\n        builder.ToTable(\"videos\");\n\n        builder.HasKey(v =&gt; v.Id);\n\n        builder.Property(v =&gt; v.Title)\n            .HasMaxLength(255)\n            .IsRequired();\n\n        builder.Property(v =&gt; v.Price)\n            .HasColumnType(\"decimal(10,2)\")\n            .IsRequired();\n\n        builder.HasOne(v =&gt; v.VideoRevenueConfig)\n            .WithOne(vrc =&gt; vrc.Video)\n            .HasForeignKey&lt;VideoRevenueConfig&gt;(vrc =&gt; vrc.VideoId);\n    }\n}\n</code></pre>"},{"location":"guias/desenvolvimento/estrutura-projeto/#5-dtos","title":"5. DTOs","text":"<p>Objetos de transfer\u00eancia (input/output).</p> <pre><code>// Data/Dtos/VideoDto.cs\npublic record VideoDto\n{\n    public long Id { get; init; }\n    public string Title { get; init; }\n    public decimal Price { get; init; }\n}\n\n// Data/Dtos/CreateVideoDto.cs\npublic record CreateVideoDto\n{\n    public string Title { get; init; }\n    public string Description { get; init; }\n    public decimal Price { get; init; }\n}\n</code></pre>"},{"location":"guias/desenvolvimento/estrutura-projeto/#email-api-net-8-hangfire","title":"Email API (.NET 8 + Hangfire)","text":""},{"location":"guias/desenvolvimento/estrutura-projeto/#estrutura-de-pastas_1","title":"Estrutura de Pastas","text":"<pre><code>email-api/\n\u251c\u2500\u2500 Data/\n\u2502   \u251c\u2500\u2500 Context/\n\u2502   \u2502   \u2514\u2500\u2500 ApplicationDbContext.cs\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 Entities/\n\u2502   \u2502   \u2514\u2500\u2500 Notification.cs\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 Enums/\n\u2502   \u2502   \u251c\u2500\u2500 NotificationTypeEnum.cs\n\u2502   \u2502   \u2514\u2500\u2500 NotificationChannelEnum.cs\n\u2502   \u2502\n\u2502   \u2514\u2500\u2500 Dtos/\n\u2502       \u2514\u2500\u2500 NotificationDto.cs\n\u2502\n\u251c\u2500\u2500 Jobs/                 # Hangfire Jobs\n\u2502   \u251c\u2500\u2500 NotificationJob.cs\n\u2502   \u2514\u2500\u2500 LogCleanupJob.cs\n\u2502\n\u251c\u2500\u2500 Services/\n\u2502   \u251c\u2500\u2500 NotificationService.cs\n\u2502   \u251c\u2500\u2500 EmailSender.cs\n\u2502   \u251c\u2500\u2500 WhatsAppSender.cs\n\u2502   \u251c\u2500\u2500 TemplateRenderer.cs\n\u2502   \u2514\u2500\u2500 LogCleanupService.cs\n\u2502\n\u251c\u2500\u2500 Filters/\n\u2502   \u2514\u2500\u2500 HangfireAuthorizationCustomFilter.cs\n\u2502\n\u251c\u2500\u2500 Middlewares/\n\u2502   \u2514\u2500\u2500 ExceptionHandleMiddleware.cs\n\u2502\n\u251c\u2500\u2500 wwwroot/\n\u2502   \u251c\u2500\u2500 Templates/\n\u2502   \u2502   \u251c\u2500\u2500 Email/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 MfaCode.html\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 PaymentConfirmed.html\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 KycApproved.html\n\u2502   \u2502   \u2502\n\u2502   \u2502   \u2514\u2500\u2500 WhatsApp/\n\u2502   \u2502       \u251c\u2500\u2500 MfaCode.txt\n\u2502   \u2502       \u251c\u2500\u2500 PaymentConfirmed.txt\n\u2502   \u2502       \u2514\u2500\u2500 KycApproved.txt\n\u2502   \u2502\n\u2502   \u2514\u2500\u2500 Images/\n\u2502       \u2514\u2500\u2500 logo.png\n\u2502\n\u251c\u2500\u2500 appsettings.json\n\u251c\u2500\u2500 Program.cs\n\u2514\u2500\u2500 Pay4Tru.JobEmails.csproj\n</code></pre>"},{"location":"guias/desenvolvimento/estrutura-projeto/#responsabilidades","title":"Responsabilidades","text":"<ul> <li>Jobs: Processar notifica\u00e7\u00f5es pendentes (Hangfire)</li> <li>Services: Enviar emails (SMTP) e WhatsApp (Z-API)</li> <li>Templates: Renderizar HTML/TXT com vari\u00e1veis din\u00e2micas</li> <li>Dashboard: Monitoramento Hangfire (<code>/dashboard</code>)</li> </ul>"},{"location":"guias/desenvolvimento/estrutura-projeto/#frontend-react-typescript","title":"Frontend React (TypeScript)","text":""},{"location":"guias/desenvolvimento/estrutura-projeto/#estrutura-de-pastas_2","title":"Estrutura de Pastas","text":"<pre><code>frontend-react/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 pages/            # P\u00e1ginas/rotas\n\u2502   \u2502   \u251c\u2500\u2500 Home/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 Home.tsx\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 Home.scss\n\u2502   \u2502   \u2502\n\u2502   \u2502   \u251c\u2500\u2500 Videos/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 VideoList.tsx\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 VideoDetail.tsx\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 VideoCheckout.tsx\n\u2502   \u2502   \u2502\n\u2502   \u2502   \u251c\u2500\u2500 Auth/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 Login.tsx\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 Register.tsx\n\u2502   \u2502   \u2502\n\u2502   \u2502   \u251c\u2500\u2500 Admin/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 AdminDashboard.tsx\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 KycApprovals.tsx\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 VideoManagement.tsx\n\u2502   \u2502   \u2502\n\u2502   \u2502   \u251c\u2500\u2500 Promoter/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 PromoterDashboard.tsx\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 AffiliateLinks.tsx\n\u2502   \u2502   \u2502\n\u2502   \u2502   \u2514\u2500\u2500 Influencer/\n\u2502   \u2502       \u2514\u2500\u2500 InfluencerDashboard.tsx\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 components/       # Componentes reutiliz\u00e1veis\n\u2502   \u2502   \u251c\u2500\u2500 common/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 Button.tsx\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 Card.tsx\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 Input.tsx\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 Modal.tsx\n\u2502   \u2502   \u2502\n\u2502   \u2502   \u251c\u2500\u2500 layout/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 Header.tsx\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 Footer.tsx\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 Sidebar.tsx\n\u2502   \u2502   \u2502\n\u2502   \u2502   \u2514\u2500\u2500 video/\n\u2502   \u2502       \u251c\u2500\u2500 VideoCard.tsx\n\u2502   \u2502       \u251c\u2500\u2500 VideoPlayer.tsx\n\u2502   \u2502       \u2514\u2500\u2500 VideoGrid.tsx\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 services/         # API e utilit\u00e1rios\n\u2502   \u2502   \u251c\u2500\u2500 api/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 httpClient.ts\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 videoApi.ts\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 orderApi.ts\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 userApi.ts\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 adminApi.ts\n\u2502   \u2502   \u2502\n\u2502   \u2502   \u2514\u2500\u2500 utils/\n\u2502   \u2502       \u251c\u2500\u2500 formatters.ts\n\u2502   \u2502       \u251c\u2500\u2500 validators.ts\n\u2502   \u2502       \u2514\u2500\u2500 storage.ts\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 store/            # Redux Toolkit\n\u2502   \u2502   \u251c\u2500\u2500 store.ts\n\u2502   \u2502   \u2502\n\u2502   \u2502   \u251c\u2500\u2500 slices/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 authSlice.ts\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 videoSlice.ts\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 cartSlice.ts\n\u2502   \u2502   \u2502\n\u2502   \u2502   \u2514\u2500\u2500 hooks.ts\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 types/            # TypeScript types\n\u2502   \u2502   \u251c\u2500\u2500 user.ts\n\u2502   \u2502   \u251c\u2500\u2500 video.ts\n\u2502   \u2502   \u2514\u2500\u2500 order.ts\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 routes/\n\u2502   \u2502   \u251c\u2500\u2500 AppRoutes.tsx\n\u2502   \u2502   \u2514\u2500\u2500 ProtectedRoute.tsx\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 App.tsx\n\u2502   \u251c\u2500\u2500 main.tsx\n\u2502   \u2514\u2500\u2500 vite-env.d.ts\n\u2502\n\u251c\u2500\u2500 public/\n\u2502   \u251c\u2500\u2500 favicon.ico\n\u2502   \u2514\u2500\u2500 robots.txt\n\u2502\n\u251c\u2500\u2500 index.html\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 tsconfig.json\n\u2514\u2500\u2500 vite.config.ts\n</code></pre>"},{"location":"guias/desenvolvimento/estrutura-projeto/#organizacao-por-feature","title":"Organiza\u00e7\u00e3o por Feature","text":""},{"location":"guias/desenvolvimento/estrutura-projeto/#api-services","title":"API Services","text":"<pre><code>// services/api/videoApi.ts\nimport httpClient from './httpClient'\n\nexport const videoApi = {\n  getAll: async (params?: VideoFilters) =&gt; {\n    const response = await httpClient.get('/api/videos', { params })\n    return response.data\n  },\n\n  getById: async (id: number) =&gt; {\n    const response = await httpClient.get(`/api/videos/${id}`)\n    return response.data\n  }\n}\n</code></pre>"},{"location":"guias/desenvolvimento/estrutura-projeto/#redux-store","title":"Redux Store","text":"<pre><code>// store/slices/authSlice.ts\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\ninterface AuthState {\n  user: User | null\n  token: string | null\n  isAuthenticated: boolean\n}\n\nconst initialState: AuthState = {\n  user: null,\n  token: localStorage.getItem('token'),\n  isAuthenticated: false\n}\n\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    setCredentials: (state, action: PayloadAction&lt;{ user: User, token: string }&gt;) =&gt; {\n      state.user = action.payload.user\n      state.token = action.payload.token\n      state.isAuthenticated = true\n      localStorage.setItem('token', action.payload.token)\n    },\n    logout: (state) =&gt; {\n      state.user = null\n      state.token = null\n      state.isAuthenticated = false\n      localStorage.removeItem('token')\n    }\n  }\n})\n\nexport const { setCredentials, logout } = authSlice.actions\nexport default authSlice.reducer\n</code></pre>"},{"location":"guias/desenvolvimento/estrutura-projeto/#components","title":"Components","text":"<pre><code>// components/video/VideoCard.tsx\ninterface VideoCardProps {\n  video: Video\n  onClickBuy: (videoId: number) =&gt; void\n}\n\nexport const VideoCard: React.FC&lt;VideoCardProps&gt; = ({ video, onClickBuy }) =&gt; {\n  return (\n    &lt;div className=\"video-card\"&gt;\n      &lt;img src={video.thumbImgUrl} alt={video.title} /&gt;\n      &lt;h3&gt;{video.title}&lt;/h3&gt;\n      &lt;p className=\"price\"&gt;R$ {video.price.toFixed(2)}&lt;/p&gt;\n      &lt;button onClick={() =&gt; onClickBuy(video.id)}&gt;\n        Comprar\n      &lt;/button&gt;\n    &lt;/div&gt;\n  )\n}\n</code></pre>"},{"location":"guias/desenvolvimento/estrutura-projeto/#fluxo-de-dados","title":"Fluxo de Dados","text":""},{"location":"guias/desenvolvimento/estrutura-projeto/#backend-frontend","title":"Backend \u2192 Frontend","text":"<pre><code>1. Frontend faz request HTTP (Axios)\n   \u2193\n2. Backend Endpoint recebe\n   \u2193\n3. Service executa l\u00f3gica\n   \u2193\n4. DbContext acessa PostgreSQL\n   \u2193\n5. Service retorna DTO\n   \u2193\n6. Endpoint retorna JSON\n   \u2193\n7. Frontend recebe response\n</code></pre>"},{"location":"guias/desenvolvimento/estrutura-projeto/#exemplo-completo","title":"Exemplo Completo","text":"<pre><code>// Frontend\nconst handleBuyVideo = async (videoId: number) =&gt; {\n  const order = await orderApi.create({ videoId })\n  window.location.href = order.payment.iuguSecureUrl\n}\n</code></pre> <pre><code>// Backend Endpoint\napp.MapPost(\"/api/orders\", async (CreateOrderDto dto, OrderService service) =&gt;\n{\n    var order = await service.CreateOrderAsync(dto);\n    return Results.Created($\"/api/orders/{order.Id}\", order);\n});\n\n// Backend Service\npublic async Task&lt;OrderDto&gt; CreateOrderAsync(CreateOrderDto dto)\n{\n    var order = new Order\n    {\n        VideoId = dto.VideoId,\n        UserId = _currentUserId,\n        Amount = video.Price * 100,\n        CreatedAt = DateTime.UtcNow\n    };\n\n    await _context.Orders.AddAsync(order);\n    await _context.SaveChangesAsync();\n\n    // Criar invoice no Iugu\n    var invoice = await _iuguService.CreateInvoiceAsync(order);\n\n    return new OrderDto { /* ... */ };\n}\n</code></pre>"},{"location":"guias/desenvolvimento/estrutura-projeto/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<ul> <li>Padr\u00f5es de C\u00f3digo</li> <li>Adicionar Endpoint</li> <li>Adicionar Entidade</li> <li>Criar Migration</li> </ul>"},{"location":"guias/desenvolvimento/padroes-codigo/","title":"Padr\u00f5es de C\u00f3digo","text":""},{"location":"guias/desenvolvimento/padroes-codigo/#nomenclatura","title":"Nomenclatura","text":""},{"location":"guias/desenvolvimento/padroes-codigo/#c-backend-api-email-api","title":"C# (Backend API / Email API)","text":"<p>Classes, Interfaces e Enums: <code>PascalCase</code> <pre><code>public class VideoService { }\npublic interface IEmailSender { }\npublic enum UserTypeEnum { }\n</code></pre></p> <p>M\u00e9todos e Propriedades: <code>PascalCase</code> <pre><code>public async Task&lt;Video&gt; GetVideoByIdAsync(long id) { }\npublic string FirstName { get; set; }\n</code></pre></p> <p>Vari\u00e1veis locais e par\u00e2metros: <code>camelCase</code> <pre><code>var videoId = 123;\npublic async Task CreateOrder(long userId, CreateOrderDto dto)\n</code></pre></p> <p>Constantes: <code>UPPER_SNAKE_CASE</code> ou <code>PascalCase</code> <pre><code>public const string DEFAULT_CURRENCY = \"BRL\";\npublic const int MaxRetryAttempts = 3;\n</code></pre></p> <p>Private fields: <code>_camelCase</code> (com underscore) <pre><code>private readonly ApplicationDbContext _context;\nprivate readonly ILogger&lt;VideoService&gt; _logger;\n</code></pre></p>"},{"location":"guias/desenvolvimento/padroes-codigo/#typescript-frontend-react","title":"TypeScript (Frontend React)","text":"<p>Componentes React: <code>PascalCase</code> <pre><code>export const VideoCard = () =&gt; { }\nexport const UserDashboard = () =&gt; { }\n</code></pre></p> <p>Fun\u00e7\u00f5es e vari\u00e1veis: <code>camelCase</code> <pre><code>const handleSubmit = () =&gt; { }\nconst isLoading = false\n</code></pre></p> <p>Interfaces e Types: <code>PascalCase</code> <pre><code>interface User {\n  id: number\n  email: string\n}\n\ntype VideoFilters = {\n  search?: string\n  minPrice?: number\n}\n</code></pre></p> <p>Constantes: <code>UPPER_SNAKE_CASE</code> <pre><code>export const API_BASE_URL = 'http://localhost:7080'\nexport const MAX_FILE_SIZE = 100 * 1024 * 1024 // 100MB\n</code></pre></p> <p>Arquivos: <code>camelCase.tsx</code> ou <code>PascalCase.tsx</code> <pre><code>videoCard.tsx          // componente pequeno\nVideoCard.tsx          // componente principal\nuserService.ts         // service\napiClient.ts           // utility\n</code></pre></p>"},{"location":"guias/desenvolvimento/padroes-codigo/#postgresql-database","title":"PostgreSQL (Database)","text":"<p>Tabelas e colunas: <code>snake_case</code> <pre><code>CREATE TABLE video_affiliate_links (\n    id BIGSERIAL PRIMARY KEY,\n    owner_id BIGINT NOT NULL,\n    video_id BIGINT NOT NULL,\n    unique_code VARCHAR(50),\n    created_at TIMESTAMP\n);\n</code></pre></p> <p>\u00cdndices: <code>idx_[table]_[columns]</code> <pre><code>CREATE INDEX idx_orders_user_id ON orders(user_id);\nCREATE INDEX idx_payments_iugu_invoice_id ON payments(iugu_invoice_id);\n</code></pre></p> <p>Foreign Keys: <code>fk_[table]_[referenced_table]</code> <pre><code>CONSTRAINT fk_orders_users FOREIGN KEY (user_id) REFERENCES users(id)\n</code></pre></p>"},{"location":"guias/desenvolvimento/padroes-codigo/#dtos-vs-entities","title":"DTOs vs Entities","text":""},{"location":"guias/desenvolvimento/padroes-codigo/#entities-banco-de-dados","title":"Entities (Banco de Dados)","text":"<pre><code>// backend-api/Data/Entities/User.cs\npublic class User\n{\n    public long Id { get; set; }\n    public string Email { get; set; }\n    public string PasswordHash { get; set; }  // Nunca expor!\n    public UserTypeEnum Type { get; set; }\n    public bool IsActive { get; set; }\n    public DateTime CreatedAt { get; set; }\n    public DateTime? UpdatedAt { get; set; }\n    public DateTime? DeletedAt { get; set; }\n\n    // Navigation Properties\n    public ICollection&lt;Order&gt; Orders { get; set; }\n}\n</code></pre>"},{"location":"guias/desenvolvimento/padroes-codigo/#dtos-data-transfer-objects","title":"DTOs (Data Transfer Objects)","text":"<pre><code>// backend-api/Data/Dtos/UserDto.cs\npublic record UserDto\n{\n    public long Id { get; init; }\n    public string Email { get; init; }\n    public string FirstName { get; init; }\n    public string LastName { get; init; }\n    public UserTypeEnum Type { get; init; }\n    public bool IsActive { get; init; }\n    // Sem PasswordHash!\n    // Sem DeletedAt!\n}\n\n// Input DTO\npublic record CreateUserDto\n{\n    public string Email { get; init; }\n    public string Password { get; init; }\n    public string FirstName { get; init; }\n    public string LastName { get; init; }\n}\n</code></pre> <p>Regra: Nunca retornar Entity diretamente. Sempre usar DTO para APIs.</p>"},{"location":"guias/desenvolvimento/padroes-codigo/#asyncawait","title":"Async/Await","text":"<p>Sempre usar <code>async</code>/<code>await</code> para opera\u00e7\u00f5es I/O (banco, HTTP, arquivos).</p> <p>\u2705 Correto: <pre><code>public async Task&lt;Video&gt; GetVideoByIdAsync(long id)\n{\n    var video = await _context.Videos\n        .Include(v =&gt; v.VideoRevenueConfig)\n        .FirstOrDefaultAsync(v =&gt; v.Id == id);\n\n    return video;\n}\n</code></pre></p> <p>\u274c Incorreto: <pre><code>public Video GetVideoById(long id)\n{\n    // Bloqueando thread!\n    var video = _context.Videos.FirstOrDefault(v =&gt; v.Id == id);\n    return video;\n}\n</code></pre></p> <p>Nomenclatura: M\u00e9todos async devem terminar com <code>Async</code>.</p>"},{"location":"guias/desenvolvimento/padroes-codigo/#trycatch","title":"Try/Catch","text":""},{"location":"guias/desenvolvimento/padroes-codigo/#backend-c","title":"Backend (C#)","text":"<p>Sempre usar <code>try/catch</code> para: - Opera\u00e7\u00f5es externas (HTTP, Iugu, Cloudinary) - Opera\u00e7\u00f5es cr\u00edticas (pagamentos)</p> <pre><code>public async Task&lt;Invoice&gt; CreateInvoiceAsync(Order order)\n{\n    try\n    {\n        var response = await _httpClient.PostAsJsonAsync(url, payload);\n        response.EnsureSuccessStatusCode();\n\n        var invoice = await response.Content.ReadFromJsonAsync&lt;Invoice&gt;();\n        return invoice;\n    }\n    catch (HttpRequestException ex)\n    {\n        _logger.LogError(ex, \"Failed to create Iugu invoice for order {OrderId}\", order.Id);\n        throw new InvalidOperationException(\"Erro ao criar invoice no Iugu\", ex);\n    }\n}\n</code></pre>"},{"location":"guias/desenvolvimento/padroes-codigo/#frontend-typescript","title":"Frontend (TypeScript)","text":"<pre><code>const handleCheckout = async () =&gt; {\n  try {\n    setIsLoading(true)\n\n    const order = await orderApi.create({ videoId })\n\n    window.location.href = order.payment.iuguSecureUrl\n  } catch (error: any) {\n    const message = error.response?.data?.error || 'Erro ao criar pedido'\n    toast.error(message)\n  } finally {\n    setIsLoading(false)\n  }\n}\n</code></pre>"},{"location":"guias/desenvolvimento/padroes-codigo/#validacoes","title":"Valida\u00e7\u00f5es","text":""},{"location":"guias/desenvolvimento/padroes-codigo/#backend-com-fluentvalidation","title":"Backend com FluentValidation","text":"<pre><code>// backend-api/Data/Validations/CreateOrderDtoValidator.cs\npublic class CreateOrderDtoValidator : AbstractValidator&lt;CreateOrderDto&gt;\n{\n    public CreateOrderDtoValidator()\n    {\n        RuleFor(x =&gt; x.VideoId)\n            .GreaterThan(0)\n            .WithMessage(\"VideoId deve ser maior que 0\");\n\n        RuleFor(x =&gt; x.AffiliateCode)\n            .MaximumLength(50)\n            .When(x =&gt; !string.IsNullOrEmpty(x.AffiliateCode))\n            .WithMessage(\"C\u00f3digo de afiliado deve ter no m\u00e1ximo 50 caracteres\");\n    }\n}\n\n// Registrar no Program.cs\nbuilder.Services.AddValidatorsFromAssemblyContaining&lt;CreateOrderDtoValidator&gt;();\n</code></pre>"},{"location":"guias/desenvolvimento/padroes-codigo/#frontend-com-zod","title":"Frontend com Zod","text":"<pre><code>import { z } from 'zod'\n\nconst createOrderSchema = z.object({\n  videoId: z.number().min(1, 'V\u00eddeo inv\u00e1lido'),\n  affiliateCode: z.string().max(50).optional()\n})\n\ntype CreateOrderDto = z.infer&lt;typeof createOrderSchema&gt;\n\n// Uso\nconst result = createOrderSchema.safeParse(data)\nif (!result.success) {\n  toast.error(result.error.errors[0].message)\n  return\n}\n</code></pre>"},{"location":"guias/desenvolvimento/padroes-codigo/#comentarios","title":"Coment\u00e1rios","text":"<p>Comentar apenas quando necess\u00e1rio.</p> <p>\u2705 Bom (explica \"por qu\u00ea\"): <pre><code>// Ajustar arredondamento para garantir que split = total\nvar diff = totalCents - (platformCents + ownerCents + promoterCents);\nif (diff != 0) ownerCents += diff;\n</code></pre></p> <p>\u2705 Bom (explica l\u00f3gica complexa): <pre><code>// Webhook pode chegar m\u00faltiplas vezes, verificar idempot\u00eancia\nif (payment.Status == PaymentStatusEnum.Paid)\n{\n    _logger.LogInformation(\"Payment already processed\");\n    return Results.Ok(new { AlreadyProcessed = true });\n}\n</code></pre></p> <p>\u274c Ruim (\u00f3bvio): <pre><code>// Incrementa contador\ncounter++;\n\n// Retorna o v\u00eddeo\nreturn video;\n</code></pre></p>"},{"location":"guias/desenvolvimento/padroes-codigo/#logging","title":"Logging","text":""},{"location":"guias/desenvolvimento/padroes-codigo/#niveis","title":"N\u00edveis","text":"<ul> <li><code>LogInformation</code>: Opera\u00e7\u00f5es normais</li> <li><code>LogWarning</code>: Situa\u00e7\u00f5es anormais mas recuper\u00e1veis</li> <li><code>LogError</code>: Erros que impedem opera\u00e7\u00e3o</li> </ul> <pre><code>_logger.LogInformation(\"Processing order {OrderId} for user {UserId}\", \n    order.Id, userId);\n\n_logger.LogWarning(\"Invalid affiliate code {Code} for video {VideoId}\", \n    affiliateCode, videoId);\n\n_logger.LogError(ex, \"Failed to confirm payment {PaymentId}\", \n    payment.Id);\n</code></pre>"},{"location":"guias/desenvolvimento/padroes-codigo/#structured-logging","title":"Structured Logging","text":"<p>\u2705 Correto: <pre><code>_logger.LogInformation(\"User {UserId} purchased video {VideoId} for {Amount}\", \n    userId, videoId, amount);\n</code></pre></p> <p>\u274c Incorreto: <pre><code>_logger.LogInformation($\"User {userId} purchased video {videoId} for {amount}\");\n</code></pre></p>"},{"location":"guias/desenvolvimento/padroes-codigo/#queries-eficientes","title":"Queries Eficientes","text":""},{"location":"guias/desenvolvimento/padroes-codigo/#usar-include-para-evitar-n1","title":"Usar Include para evitar N+1","text":"<p>\u274c N+1 Problem: <pre><code>var orders = await _context.Orders.ToListAsync();\nforeach (var order in orders)\n{\n    // Faz 1 query por order!\n    var video = await _context.Videos.FindAsync(order.VideoId);\n}\n</code></pre></p> <p>\u2705 Correto: <pre><code>var orders = await _context.Orders\n    .Include(o =&gt; o.Video)\n    .Include(o =&gt; o.Payment)\n    .Include(o =&gt; o.User)\n    .ToListAsync();\n</code></pre></p>"},{"location":"guias/desenvolvimento/padroes-codigo/#projetar-apenas-campos-necessarios","title":"Projetar apenas campos necess\u00e1rios","text":"<p>\u274c Busca tudo: <pre><code>var videos = await _context.Videos.ToListAsync();\n</code></pre></p> <p>\u2705 Seleciona apenas necess\u00e1rio: <pre><code>var videos = await _context.Videos\n    .Select(v =&gt; new VideoListDto\n    {\n        Id = v.Id,\n        Title = v.Title,\n        Price = v.Price,\n        ThumbImgUrl = v.ThumbImgUrl\n    })\n    .ToListAsync();\n</code></pre></p>"},{"location":"guias/desenvolvimento/padroes-codigo/#seguranca","title":"Seguran\u00e7a","text":""},{"location":"guias/desenvolvimento/padroes-codigo/#nunca-expor-senhas","title":"Nunca expor senhas","text":"<p>\u274c NUNCA: <pre><code>return Results.Ok(user); // Cont\u00e9m PasswordHash!\n</code></pre></p> <p>\u2705 Sempre usar DTO: <pre><code>return Results.Ok(new UserDto\n{\n    Id = user.Id,\n    Email = user.Email,\n    // Sem PasswordHash!\n});\n</code></pre></p>"},{"location":"guias/desenvolvimento/padroes-codigo/#validar-jwt","title":"Validar JWT","text":"<pre><code>private long GetUserIdFromToken(HttpRequest request)\n{\n    var userIdClaim = request.HttpContext.User\n        .FindFirst(ClaimTypes.NameIdentifier);\n\n    if (userIdClaim == null)\n        throw new UnauthorizedAccessException(\"Token inv\u00e1lido\");\n\n    return long.Parse(userIdClaim.Value);\n}\n</code></pre>"},{"location":"guias/desenvolvimento/padroes-codigo/#sql-injection-ef-core-protege","title":"SQL Injection - EF Core protege","text":"<p>\u2705 Seguro (EF Core parametriza): <pre><code>var videos = await _context.Videos\n    .Where(v =&gt; v.Title.Contains(search))\n    .ToListAsync();\n</code></pre></p> <p>\u274c NUNCA usar SQL raw com concatena\u00e7\u00e3o: <pre><code>var sql = $\"SELECT * FROM videos WHERE title LIKE '%{search}%'\";\nvar videos = await _context.Videos.FromSqlRaw(sql).ToListAsync();\n</code></pre></p>"},{"location":"guias/desenvolvimento/padroes-codigo/#testes","title":"Testes","text":""},{"location":"guias/desenvolvimento/padroes-codigo/#nomenclatura_1","title":"Nomenclatura","text":"<pre><code>[Fact]\npublic async Task CreateOrder_WithValidData_ShouldReturnOrder()\n{\n    // Arrange\n    var dto = new CreateOrderDto { VideoId = 1 };\n\n    // Act\n    var result = await _service.CreateOrderAsync(dto, userId);\n\n    // Assert\n    Assert.NotNull(result);\n    Assert.Equal(1, result.VideoId);\n}\n</code></pre> <p>Padr\u00e3o: <code>MethodName_Scenario_ExpectedBehavior</code></p>"},{"location":"guias/desenvolvimento/padroes-codigo/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<ul> <li>Estrutura de Projeto</li> <li>Adicionar Endpoint</li> <li>Adicionar Entidade</li> </ul>"},{"location":"pagamentos/conta-master-subcontas/","title":"Conta Master e Subcontas","text":""},{"location":"pagamentos/conta-master-subcontas/#arquitetura-de-contas","title":"Arquitetura de Contas","text":"<p>O modelo de conta master + subcontas do Iugu \u00e9 fundamental para o funcionamento do Amasso como marketplace.</p> <pre><code>graph TD\n    CM[Conta Master - Amasso] --&gt; S1[Subconta Promoter 1]\n    CM --&gt; S2[Subconta Promoter 2]\n    CM --&gt; S3[Subconta Promoter 3]\n    CM --&gt; S4[Subconta Influencer 1]\n    CM --&gt; S5[Subconta Influencer 2]\n    CM --&gt; S6[Subconta Influencer 3]\n\n    U[Usu\u00e1rio] --&gt;|Paga| Invoice[Invoice]\n    Invoice --&gt;|Split 20%| CM\n    Invoice --&gt;|Split 50%| S4\n    Invoice --&gt;|Split 30%| S1\n\n    style CM fill:#3498db\n    style S1 fill:#e74c3c\n    style S2 fill:#e74c3c\n    style S3 fill:#e74c3c\n    style S4 fill:#2ecc71\n    style S5 fill:#2ecc71\n    style S6 fill:#2ecc71</code></pre>"},{"location":"pagamentos/conta-master-subcontas/#conta-master-plataforma","title":"Conta Master (Plataforma)","text":""},{"location":"pagamentos/conta-master-subcontas/#caracteristicas","title":"Caracter\u00edsticas","text":"<ul> <li>Propriet\u00e1rio: Empresa Amasso</li> <li>Responsabilidade: Centralizar pagamentos e distribuir</li> <li>Recebe: Sua porcentagem configurada (ex: 20%)</li> <li>Gerencia: Todas as subcontas vinculadas</li> </ul>"},{"location":"pagamentos/conta-master-subcontas/#responsabilidades","title":"Responsabilidades","text":"<ol> <li>Receber Pagamentos: Todos os pagamentos passam pela master</li> <li>Distribuir via Split: Autom\u00e1tico no momento do pagamento</li> <li>Criar Subcontas: Para novos Promoters/Influencers</li> <li>Aprovar KYC: Validar documenta\u00e7\u00e3o</li> <li>Compliance: Garantir conformidade legal</li> </ol>"},{"location":"pagamentos/conta-master-subcontas/#configuracao","title":"Configura\u00e7\u00e3o","text":"<pre><code>// appsettings.json\n{\n  \"Iugu\": {\n    \"ApiToken\": \"SEU_TOKEN_AQUI\",\n    \"MasterAccountId\": \"ID_DA_CONTA_MASTER\",\n    \"WebhookSecret\": \"SECRET_PARA_VALIDAR_WEBHOOKS\"\n  }\n}\n</code></pre>"},{"location":"pagamentos/conta-master-subcontas/#acesso-ao-dashboard","title":"Acesso ao Dashboard","text":"<p>A conta master acessa o dashboard administrativo do Iugu: - Visualizar todas as transa\u00e7\u00f5es - Gerenciar subcontas - Configurar webhooks - Extratos e relat\u00f3rios - Saques para conta banc\u00e1ria</p>"},{"location":"pagamentos/conta-master-subcontas/#subcontas-promoters-e-influencers","title":"Subcontas (Promoters e Influencers)","text":""},{"location":"pagamentos/conta-master-subcontas/#caracteristicas_1","title":"Caracter\u00edsticas","text":"<ul> <li>Vinculadas: Sempre ligadas \u00e0 conta master</li> <li>Aut\u00f4nomas: Podem gerenciar seus pr\u00f3prios dados</li> <li>Recebem Automaticamente: Via split de pagamento</li> <li>Requerem KYC: Obrigat\u00f3rio para opera\u00e7\u00e3o</li> </ul>"},{"location":"pagamentos/conta-master-subcontas/#quando-criar","title":"Quando Criar","text":"<p>Uma subconta \u00e9 criada quando: 1. Promoter se cadastra 2. Influencer se cadastra 3. Status inicial: Pendente 4. Aguarda envio de documentos 5. Admin aprova KYC 6. Status muda para: Aprovado 7. Subconta \u00e9 ativada no Iugu</p>"},{"location":"pagamentos/conta-master-subcontas/#mapeamento-no-banco-de-dados","title":"Mapeamento no Banco de Dados","text":"<pre><code>-- Tabela owners armazena dados da subconta\nCREATE TABLE owners (\n    id BIGSERIAL PRIMARY KEY,\n    user_id BIGINT REFERENCES users(id),\n    type VARCHAR(50), -- Influencer, Promoter, Partner, Agent, Other\n\n    -- Subconta Iugu\n    iugu_account_id VARCHAR(100), -- ID da subconta no Iugu\n    sub_account_status VARCHAR(20), -- Pendente, Aprovado, Rejeitado\n\n    -- Dados pessoais (KYC)\n    cpf_cnpj VARCHAR(20),\n    rg VARCHAR(20),\n    birth_date DATE,\n    address_street VARCHAR(200),\n    address_number VARCHAR(20),\n    address_city VARCHAR(100),\n    address_state VARCHAR(2),\n    address_zipcode VARCHAR(10),\n\n    -- Dados banc\u00e1rios\n    bank_code VARCHAR(10),\n    bank_agency VARCHAR(10),\n    bank_account VARCHAR(20),\n    bank_account_type VARCHAR(20), -- corrente, poupan\u00e7a\n\n    -- Documentos\n    document_cpf_url TEXT,\n    document_rg_url TEXT,\n    document_address_proof_url TEXT,\n    document_selfie_url TEXT,\n\n    -- Auditoria\n    created_at TIMESTAMP,\n    updated_at TIMESTAMP\n);\n</code></pre>"},{"location":"pagamentos/conta-master-subcontas/#ciclo-de-vida-de-uma-subconta","title":"Ciclo de Vida de uma Subconta","text":"<pre><code>stateDiagram-v2\n    [*] --&gt; Criada: Usu\u00e1rio se cadastra&lt;br/&gt;como Promoter/Influencer\n    Criada --&gt; Pendente: Subconta criada no Iugu&lt;br/&gt;(modo pendente)\n    Pendente --&gt; DocumentosEnviados: Usu\u00e1rio envia&lt;br/&gt;documentos\n    DocumentosEnviados --&gt; EmAnalise: Admin inicia&lt;br/&gt;revis\u00e3o\n    EmAnalise --&gt; Aprovado: Documentos v\u00e1lidos\n    EmAnalise --&gt; Rejeitado: Documentos inv\u00e1lidos\n    Aprovado --&gt; Ativa: Subconta ativada&lt;br/&gt;no Iugu\n    Ativa --&gt; Operando: Pode receber&lt;br/&gt;pagamentos\n    Rejeitado --&gt; DocumentosEnviados: Reenviar&lt;br/&gt;documentos\n    Operando --&gt; [*]: Desativa\u00e7\u00e3o</code></pre>"},{"location":"pagamentos/conta-master-subcontas/#criacao-de-subconta","title":"Cria\u00e7\u00e3o de Subconta","text":""},{"location":"pagamentos/conta-master-subcontas/#1-usuario-se-cadastra","title":"1. Usu\u00e1rio Se Cadastra","text":"<pre><code>// UserService.cs\npublic async Task&lt;User&gt; CreatePromoterAsync(CreateUserDto dto)\n{\n    // Criar User\n    var user = new User\n    {\n        Email = dto.Email,\n        Type = UserTypeEnum.Promoter,\n        // ... outros campos\n    };\n\n    await _context.Users.AddAsync(user);\n    await _context.SaveChangesAsync();\n\n    // Criar Owner (ainda sem subconta)\n    var owner = new Owner\n    {\n        UserId = user.Id,\n        Type = OwnerTypeEnum.Promoter,\n        SubAccountStatus = OwnerSubAccountStatusEnum.Pending,\n        // ... outros campos\n    };\n\n    await _context.Owners.AddAsync(owner);\n    await _context.SaveChangesAsync();\n\n    return user;\n}\n</code></pre>"},{"location":"pagamentos/conta-master-subcontas/#2-criacao-da-subconta-no-iugu","title":"2. Cria\u00e7\u00e3o da Subconta no Iugu","text":"<p>Quando o usu\u00e1rio envia os documentos:</p> <pre><code>// OwnerService.cs\npublic async Task SubmitKycDocumentsAsync(long ownerId, KycDocumentsDto dto)\n{\n    var owner = await _context.Owners.FindAsync(ownerId);\n\n    // Salvar documentos\n    owner.DocumentCpfUrl = dto.CpfUrl;\n    owner.DocumentRgUrl = dto.RgUrl;\n    owner.DocumentAddressProofUrl = dto.AddressProofUrl;\n    owner.DocumentSelfieUrl = dto.SelfieUrl;\n\n    // Criar subconta no Iugu (se ainda n\u00e3o existe)\n    if (string.IsNullOrEmpty(owner.IuguAccountId))\n    {\n        var subAccount = await _iuguService.CreateSubAccountAsync(new CreateSubAccountDto\n        {\n            Name = owner.User.Fullname,\n            Email = owner.User.Email,\n            Cpf = owner.CpfCnpj,\n            Address = new AddressDto\n            {\n                Street = owner.AddressStreet,\n                Number = owner.AddressNumber,\n                City = owner.AddressCity,\n                State = owner.AddressState,\n                ZipCode = owner.AddressZipcode\n            },\n            BankAccount = new BankAccountDto\n            {\n                BankCode = owner.BankCode,\n                Agency = owner.BankAgency,\n                Account = owner.BankAccount,\n                AccountType = owner.BankAccountType\n            }\n        });\n\n        owner.IuguAccountId = subAccount.AccountId;\n    }\n\n    owner.SubAccountStatus = OwnerSubAccountStatusEnum.Pending;\n    await _context.SaveChangesAsync();\n\n    // Notificar admin para revisar\n    await _notificationService.NotifyAdminKycPendingAsync(ownerId);\n}\n</code></pre>"},{"location":"pagamentos/conta-master-subcontas/#3-chamada-a-api-do-iugu","title":"3. Chamada \u00e0 API do Iugu","text":"<pre><code>// IuguService.cs\npublic async Task&lt;IuguSubAccountDto&gt; CreateSubAccountAsync(CreateSubAccountDto dto)\n{\n    var request = new\n    {\n        name = dto.Name,\n        email = dto.Email,\n        cpf_cnpj = dto.Cpf,\n        address = new\n        {\n            street = dto.Address.Street,\n            number = dto.Address.Number,\n            city = dto.Address.City,\n            state = dto.Address.State,\n            zip_code = dto.Address.ZipCode\n        },\n        bank_account = new\n        {\n            bank = dto.BankAccount.BankCode,\n            bank_ag = dto.BankAccount.Agency,\n            account_type = dto.BankAccount.AccountType,\n            bank_cc = dto.BankAccount.Account\n        },\n        // Criar em modo de verifica\u00e7\u00e3o pendente\n        auto_verify = false\n    };\n\n    var response = await _httpClient.PostAsJsonAsync(\n        \"https://api.iugu.com/v1/marketplace/create_account\",\n        request\n    );\n\n    response.EnsureSuccessStatusCode();\n\n    var result = await response.Content.ReadFromJsonAsync&lt;IuguSubAccountResponse&gt;();\n\n    return new IuguSubAccountDto\n    {\n        AccountId = result.account_id,\n        LiveApiToken = result.live_api_token,\n        TestApiToken = result.test_api_token\n    };\n}\n</code></pre>"},{"location":"pagamentos/conta-master-subcontas/#ativacao-de-subconta","title":"Ativa\u00e7\u00e3o de Subconta","text":"<p>Ap\u00f3s admin aprovar o KYC:</p> <pre><code>// AdminService.cs\npublic async Task ApproveKycAsync(long ownerId)\n{\n    var owner = await _context.Owners\n        .Include(o =&gt; o.User)\n        .FirstAsync(o =&gt; o.Id == ownerId);\n\n    if (owner.SubAccountStatus != OwnerSubAccountStatusEnum.Pending)\n        throw new InvalidOperationException(\"KYC n\u00e3o est\u00e1 pendente\");\n\n    // Ativar subconta no Iugu\n    await _iuguService.VerifySubAccountAsync(owner.IuguAccountId);\n\n    // Atualizar status\n    owner.SubAccountStatus = OwnerSubAccountStatusEnum.Approved;\n    owner.UpdatedAt = DateTime.UtcNow;\n\n    await _context.SaveChangesAsync();\n\n    // Notificar usu\u00e1rio\n    await _notificationService.NotifyKycApprovedAsync(ownerId);\n}\n</code></pre> <pre><code>// IuguService.cs\npublic async Task VerifySubAccountAsync(string accountId)\n{\n    var request = new\n    {\n        // Campos necess\u00e1rios para verifica\u00e7\u00e3o\n        data = new\n        {\n            price_range = \"At\u00e9 R$ 50.000\",\n            physical_products = false,\n            business_type = \"Services\",\n            person_type = \"Pessoa F\u00edsica\",\n            automatic_transfer = true\n        }\n    };\n\n    var response = await _httpClient.PostAsJsonAsync(\n        $\"https://api.iugu.com/v1/accounts/{accountId}/request_verification\",\n        request\n    );\n\n    response.EnsureSuccessStatusCode();\n}\n</code></pre>"},{"location":"pagamentos/conta-master-subcontas/#gestao-de-subcontas","title":"Gest\u00e3o de Subcontas","text":""},{"location":"pagamentos/conta-master-subcontas/#listar-subcontas-pendentes","title":"Listar Subcontas Pendentes","text":"<pre><code>// AdminService.cs\npublic async Task&lt;List&lt;OwnerDto&gt;&gt; GetPendingKycAsync()\n{\n    return await _context.Owners\n        .Include(o =&gt; o.User)\n        .Where(o =&gt; o.SubAccountStatus == OwnerSubAccountStatusEnum.Pending)\n        .Select(o =&gt; new OwnerDto\n        {\n            Id = o.Id,\n            Name = o.User.Fullname,\n            Email = o.User.Email,\n            Type = o.Type.ToString(),\n            Status = o.SubAccountStatus.ToString(),\n            DocumentsSubmitted = !string.IsNullOrEmpty(o.DocumentCpfUrl)\n        })\n        .ToListAsync();\n}\n</code></pre>"},{"location":"pagamentos/conta-master-subcontas/#consultar-status-no-iugu","title":"Consultar Status no Iugu","text":"<pre><code>public async Task&lt;IuguAccountStatusDto&gt; GetSubAccountStatusAsync(string accountId)\n{\n    var response = await _httpClient.GetAsync(\n        $\"https://api.iugu.com/v1/accounts/{accountId}\"\n    );\n\n    response.EnsureSuccessStatusCode();\n\n    var result = await response.Content.ReadFromJsonAsync&lt;IuguAccountResponse&gt;();\n\n    return new IuguAccountStatusDto\n    {\n        AccountId = result.id,\n        Name = result.name,\n        IsVerified = result.is_verified,\n        CanReceive = result.can_receive,\n        Balance = result.balance_cents / 100m\n    };\n}\n</code></pre>"},{"location":"pagamentos/conta-master-subcontas/#vantagens-do-modelo","title":"Vantagens do Modelo","text":""},{"location":"pagamentos/conta-master-subcontas/#para-a-plataforma-amasso","title":"Para a Plataforma (Amasso)","text":"<ul> <li>\u2705 Centraliza\u00e7\u00e3o de pagamentos</li> <li>\u2705 Controle total sobre transa\u00e7\u00f5es</li> <li>\u2705 Compliance simplificado</li> <li>\u2705 Visibilidade de todas as opera\u00e7\u00f5es</li> </ul>"},{"location":"pagamentos/conta-master-subcontas/#para-promotersinfluencers","title":"Para Promoters/Influencers","text":"<ul> <li>\u2705 Recebimento autom\u00e1tico (split)</li> <li>\u2705 Transpar\u00eancia nos valores</li> <li>\u2705 Sem intermedi\u00e1rios</li> <li>\u2705 Dashboard pr\u00f3prio no Iugu</li> <li>\u2705 Saque direto para conta banc\u00e1ria</li> </ul>"},{"location":"pagamentos/conta-master-subcontas/#para-usuarios-finais","title":"Para Usu\u00e1rios Finais","text":"<ul> <li>\u2705 Pagamento simples e seguro</li> <li>\u2705 M\u00faltiplos m\u00e9todos (cart\u00e3o, boleto, Pix)</li> <li>\u2705 Confirma\u00e7\u00e3o em tempo real</li> </ul>"},{"location":"pagamentos/conta-master-subcontas/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<ul> <li>Entenda o Processo KYC em detalhes</li> <li>Veja como funciona o Split de Pagamento</li> <li>Configure Webhooks para notifica\u00e7\u00f5es</li> </ul>"},{"location":"pagamentos/processo-kyc/","title":"Processo KYC","text":""},{"location":"pagamentos/processo-kyc/#o-que-e-kyc","title":"O que \u00e9 KYC?","text":"<p>KYC significa Know Your Customer (Conhe\u00e7a Seu Cliente). \u00c9 um processo de verifica\u00e7\u00e3o de identidade exigido por lei para institui\u00e7\u00f5es financeiras e empresas que lidam com transa\u00e7\u00f5es monet\u00e1rias.</p>"},{"location":"pagamentos/processo-kyc/#por-que-e-necessario","title":"Por que \u00e9 Necess\u00e1rio?","text":""},{"location":"pagamentos/processo-kyc/#regulamentacao","title":"Regulamenta\u00e7\u00e3o","text":"<ul> <li>Lei de Preven\u00e7\u00e3o \u00e0 Lavagem de Dinheiro: Exige identifica\u00e7\u00e3o de quem recebe dinheiro</li> <li>Banco Central do Brasil: Normas para opera\u00e7\u00f5es financeiras</li> <li>Iugu: Requisito para ativar subcontas que receber\u00e3o pagamentos</li> </ul>"},{"location":"pagamentos/processo-kyc/#seguranca","title":"Seguran\u00e7a","text":"<ul> <li>Previne fraudes</li> <li>Protege a plataforma</li> <li>Garante legitimidade das transa\u00e7\u00f5es</li> <li>Cria confian\u00e7a no ecossistema</li> </ul>"},{"location":"pagamentos/processo-kyc/#quem-precisa-passar-pelo-kyc","title":"Quem Precisa Passar pelo KYC?","text":"<pre><code>graph TD\n    A[Tipo de Usu\u00e1rio] --&gt; B{Recebe Dinheiro?}\n    B --&gt;|Sim| C[Precisa KYC]\n    B --&gt;|N\u00e3o| D[N\u00e3o Precisa KYC]\n\n    C --&gt; E[Promoter \u2713]\n    C --&gt; F[Influencer \u2713]\n\n    D --&gt; G[Admin \u2717]\n    D --&gt; H[Default User \u2717]\n\n    style C fill:#e74c3c\n    style D fill:#2ecc71</code></pre>"},{"location":"pagamentos/processo-kyc/#promoter-precisa","title":"Promoter (Precisa)","text":"<ul> <li>Recebe comiss\u00e3o por vendas atrav\u00e9s de links de afiliado</li> <li>Tem subconta Iugu</li> <li>Deve ter KYC aprovado antes de gerar links</li> </ul>"},{"location":"pagamentos/processo-kyc/#influencer-precisa","title":"Influencer (Precisa)","text":"<ul> <li>Recebe comiss\u00e3o quando seus v\u00eddeos s\u00e3o vendidos</li> <li>Tem subconta Iugu</li> <li>Deve ter KYC aprovado antes de receber</li> </ul>"},{"location":"pagamentos/processo-kyc/#admin-nao-precisa","title":"Admin (N\u00e3o Precisa)","text":"<ul> <li>N\u00e3o recebe dinheiro de vendas</li> <li>Gerencia a plataforma</li> <li>Sem subconta Iugu</li> </ul>"},{"location":"pagamentos/processo-kyc/#default-user-nao-precisa","title":"Default User (N\u00e3o Precisa)","text":"<ul> <li>Apenas compra v\u00eddeos</li> <li>N\u00e3o recebe comiss\u00f5es</li> <li>Sem subconta Iugu</li> </ul>"},{"location":"pagamentos/processo-kyc/#documentos-necessarios","title":"Documentos Necess\u00e1rios","text":""},{"location":"pagamentos/processo-kyc/#pessoa-fisica","title":"Pessoa F\u00edsica","text":"Documento Obrigat\u00f3rio Formato Descri\u00e7\u00e3o CPF \u2713 PDF/IMG Comprovante de inscri\u00e7\u00e3o no CPF RG ou CNH \u2713 PDF/IMG Documento de identidade com foto Comprovante de Resid\u00eancia \u2713 PDF/IMG Recente (m\u00e1x 90 dias) Selfie com Documento \u2713 IMG Foto segurando RG/CNH Dados Banc\u00e1rios \u2713 Form Banco, ag\u00eancia, conta corrente/poupan\u00e7a"},{"location":"pagamentos/processo-kyc/#pessoa-juridica-cnpj","title":"Pessoa Jur\u00eddica (CNPJ)","text":"Documento Obrigat\u00f3rio Formato Descri\u00e7\u00e3o CNPJ \u2713 PDF Comprovante de inscri\u00e7\u00e3o Contrato Social \u2713 PDF \u00daltima altera\u00e7\u00e3o Documentos do Respons\u00e1vel \u2713 PDF/IMG CPF, RG do s\u00f3cio/representante Comprovante de Endere\u00e7o \u2713 PDF/IMG Da empresa Dados Banc\u00e1rios \u2713 Form Conta PJ"},{"location":"pagamentos/processo-kyc/#fluxo-completo-do-processo","title":"Fluxo Completo do Processo","text":"<pre><code>flowchart TD\n    A[Promoter/Influencer&lt;br/&gt;se cadastra] --&gt; B[Acessa \u00c1rea de KYC]\n    B --&gt; C{J\u00e1 enviou&lt;br/&gt;documentos?}\n    C --&gt;|N\u00e3o| D[Upload de Documentos]\n    C --&gt;|Sim| E{Status?}\n\n    D --&gt; F[Preenche Dados Banc\u00e1rios]\n    F --&gt; G[Sistema valida campos]\n    G --&gt; H{Dados v\u00e1lidos?}\n    H --&gt;|N\u00e3o| D\n    H --&gt;|Sim| I[Salva no banco]\n\n    I --&gt; J[Cria/Atualiza Subconta Iugu]\n    J --&gt; K[Status: Pendente]\n    K --&gt; L[Notifica Admin]\n\n    L --&gt; M[Admin revisa documentos]\n    M --&gt; N{Documentos OK?}\n\n    N --&gt;|Sim| O[Admin clica em Aprovar]\n    O --&gt; P[Ativa Subconta no Iugu]\n    P --&gt; Q[Status: Aprovado]\n    Q --&gt; R[Notifica Usu\u00e1rio: Aprovado]\n    R --&gt; S[Usu\u00e1rio pode operar]\n\n    N --&gt;|N\u00e3o| T[Admin clica em Rejeitar]\n    T --&gt; U[Status: Rejeitado]\n    U --&gt; V[Notifica Usu\u00e1rio: Rejeitado]\n    V --&gt; W[Usu\u00e1rio corrige e reenvia]\n    W --&gt; D\n\n    E --&gt;|Pendente| X[Aguardando revis\u00e3o]\n    E --&gt;|Aprovado| Y[J\u00e1 pode operar]\n    E --&gt;|Rejeitado| Z[Pode reenviar]\n\n    style Q fill:#2ecc71\n    style U fill:#e74c3c\n    style K fill:#f39c12</code></pre>"},{"location":"pagamentos/processo-kyc/#estados-do-kyc","title":"Estados do KYC","text":""},{"location":"pagamentos/processo-kyc/#enum-no-codigo","title":"Enum no C\u00f3digo","text":"<pre><code>public enum OwnerSubAccountStatusEnum\n{\n    Pending,    // Aguardando revis\u00e3o\n    Approved,   // Aprovado, pode operar\n    Rejected    // Rejeitado, precisa reenviar\n}\n</code></pre>"},{"location":"pagamentos/processo-kyc/#tabela-de-estados","title":"Tabela de Estados","text":"Status Descri\u00e7\u00e3o O que o usu\u00e1rio pode fazer Pendente Documentos enviados, aguardando an\u00e1lise Aguardar aprova\u00e7\u00e3o Aprovado KYC aprovado pelo admin Gerar links (Promoter)Receber comiss\u00f5es (ambos) Rejeitado Documentos rejeitados Corrigir e reenviar"},{"location":"pagamentos/processo-kyc/#implementacao","title":"Implementa\u00e7\u00e3o","text":""},{"location":"pagamentos/processo-kyc/#1-envio-de-documentos-frontend","title":"1. Envio de Documentos (Frontend)","text":"<pre><code>export const KycDocumentsForm: React.FC = () =&gt; {\n  const [documents, setDocuments] = useState&lt;KycDocuments&gt;({\n    cpfFile: null,\n    rgFile: null,\n    addressProofFile: null,\n    selfieFile: null\n  });\n\n  const handleSubmit = async (e: React.FormEvent) =&gt; {\n    e.preventDefault();\n\n    const formData = new FormData();\n    formData.append('cpf', documents.cpfFile);\n    formData.append('rg', documents.rgFile);\n    formData.append('addressProof', documents.addressProofFile);\n    formData.append('selfie', documents.selfieFile);\n    formData.append('bankCode', bankData.code);\n    formData.append('bankAgency', bankData.agency);\n    formData.append('bankAccount', bankData.account);\n\n    try {\n      await ownerApi.submitKycDocuments(formData);\n      toast.success('Documentos enviados! Aguarde aprova\u00e7\u00e3o.');\n    } catch (error) {\n      toast.error('Erro ao enviar documentos');\n    }\n  };\n\n  return (\n    &lt;form onSubmit={handleSubmit}&gt;\n      &lt;FileInput label=\"CPF\" onChange={handleCpfChange} required /&gt;\n      &lt;FileInput label=\"RG ou CNH\" onChange={handleRgChange} required /&gt;\n      &lt;FileInput label=\"Comprovante de Resid\u00eancia\" onChange={handleAddressChange} required /&gt;\n      &lt;FileInput label=\"Selfie com Documento\" onChange={handleSelfieChange} required /&gt;\n\n      &lt;BankDataForm onChange={setBankData} /&gt;\n\n      &lt;Button type=\"submit\"&gt;Enviar Documentos&lt;/Button&gt;\n    &lt;/form&gt;\n  );\n};\n</code></pre>"},{"location":"pagamentos/processo-kyc/#2-recebimento-no-backend","title":"2. Recebimento no Backend","text":"<pre><code>// OwnerEndpoints.cs\ngroup.MapPost(\"/kyc/submit\", SubmitKyc)\n    .RequireAuthorization()\n    .DisableAntiforgery(); // Para upload de arquivos\n\nprivate static async Task&lt;IResult&gt; SubmitKyc(\n    HttpRequest request,\n    [FromServices] IOwnerService ownerService,\n    [FromServices] ICloudinaryService cloudinaryService)\n{\n    var form = await request.ReadFormAsync();\n    var userId = GetUserIdFromToken(request);\n\n    // Upload dos documentos para Cloudinary\n    var cpfUrl = await cloudinaryService.UploadDocumentAsync(form.Files[\"cpf\"]);\n    var rgUrl = await cloudinaryService.UploadDocumentAsync(form.Files[\"rg\"]);\n    var addressProofUrl = await cloudinaryService.UploadDocumentAsync(form.Files[\"addressProof\"]);\n    var selfieUrl = await cloudinaryService.UploadDocumentAsync(form.Files[\"selfie\"]);\n\n    var dto = new SubmitKycDto\n    {\n        UserId = userId,\n        DocumentCpfUrl = cpfUrl,\n        DocumentRgUrl = rgUrl,\n        DocumentAddressProofUrl = addressProofUrl,\n        DocumentSelfieUrl = selfieUrl,\n        BankCode = form[\"bankCode\"],\n        BankAgency = form[\"bankAgency\"],\n        BankAccount = form[\"bankAccount\"],\n        BankAccountType = form[\"bankAccountType\"]\n    };\n\n    await ownerService.SubmitKycAsync(dto);\n\n    return Results.Ok(new { message = \"Documentos enviados com sucesso\" });\n}\n</code></pre>"},{"location":"pagamentos/processo-kyc/#3-processamento-do-kyc","title":"3. Processamento do KYC","text":"<pre><code>// OwnerService.cs\npublic async Task SubmitKycAsync(SubmitKycDto dto)\n{\n    var owner = await _context.Owners\n        .Include(o =&gt; o.User)\n        .FirstAsync(o =&gt; o.UserId == dto.UserId);\n\n    // Salvar documentos\n    owner.DocumentCpfUrl = dto.DocumentCpfUrl;\n    owner.DocumentRgUrl = dto.DocumentRgUrl;\n    owner.DocumentAddressProofUrl = dto.DocumentAddressProofUrl;\n    owner.DocumentSelfieUrl = dto.DocumentSelfieUrl;\n\n    // Salvar dados banc\u00e1rios\n    owner.BankCode = dto.BankCode;\n    owner.BankAgency = dto.BankAgency;\n    owner.BankAccount = dto.BankAccount;\n    owner.BankAccountType = dto.BankAccountType;\n\n    // Criar ou atualizar subconta no Iugu\n    if (string.IsNullOrEmpty(owner.IuguAccountId))\n    {\n        // Primeira submiss\u00e3o - criar subconta\n        var subAccount = await _iuguService.CreateSubAccountAsync(owner);\n        owner.IuguAccountId = subAccount.AccountId;\n    }\n    else\n    {\n        // Resubmiss\u00e3o - atualizar dados\n        await _iuguService.UpdateSubAccountAsync(owner);\n    }\n\n    // Marcar como pendente\n    owner.SubAccountStatus = OwnerSubAccountStatusEnum.Pending;\n    owner.UpdatedAt = DateTime.UtcNow;\n\n    await _context.SaveChangesAsync();\n\n    // Notificar admin\n    var notification = new Notification\n    {\n        Type = NotificationTypeEnum.AdminKycPending,\n        Channel = NotificationChannelEnum.Email,\n        MetadataJson = JsonSerializer.Serialize(new\n        {\n            OwnerId = owner.Id,\n            OwnerName = owner.User.Fullname,\n            OwnerEmail = owner.User.Email,\n            OwnerType = owner.Type.ToString()\n        })\n    };\n\n    await _context.Notifications.AddAsync(notification);\n    await _context.SaveChangesAsync();\n}\n</code></pre>"},{"location":"pagamentos/processo-kyc/#4-aprovacao-pelo-admin","title":"4. Aprova\u00e7\u00e3o pelo Admin","text":"<pre><code>// AdminService.cs\npublic async Task ApproveKycAsync(long ownerId, string adminUserId)\n{\n    var owner = await _context.Owners\n        .Include(o =&gt; o.User)\n        .FirstAsync(o =&gt; o.Id == ownerId);\n\n    if (owner.SubAccountStatus != OwnerSubAccountStatusEnum.Pending)\n    {\n        throw new InvalidOperationException(\n            \"Apenas KYCs pendentes podem ser aprovados\");\n    }\n\n    // Ativar subconta no Iugu\n    try\n    {\n        await _iuguService.VerifySubAccountAsync(owner.IuguAccountId);\n    }\n    catch (Exception ex)\n    {\n        _logger.LogError(ex, \"Erro ao ativar subconta no Iugu\");\n        throw new InvalidOperationException(\n            \"Erro ao ativar subconta no Iugu. Verifique os dados.\");\n    }\n\n    // Atualizar status\n    owner.SubAccountStatus = OwnerSubAccountStatusEnum.Approved;\n    owner.UpdatedAt = DateTime.UtcNow;\n    owner.UpdatedBy = adminUserId;\n\n    await _context.SaveChangesAsync();\n\n    // Notificar usu\u00e1rio\n    var notification = new Notification\n    {\n        Type = NotificationTypeEnum.KycApproved,\n        Channel = owner.User.NotificationPreference,\n        MetadataJson = JsonSerializer.Serialize(new\n        {\n            Email = owner.User.Email,\n            PhoneNumber = owner.User.Telephone,\n            Name = owner.User.FirstName,\n            OwnerType = owner.Type.ToString()\n        })\n    };\n\n    await _context.Notifications.AddAsync(notification);\n    await _context.SaveChangesAsync();\n\n    _logger.LogInformation(\n        \"KYC aprovado: Owner {OwnerId} por Admin {AdminId}\",\n        ownerId, adminUserId);\n}\n\npublic async Task RejectKycAsync(long ownerId, string reason, string adminUserId)\n{\n    var owner = await _context.Owners\n        .Include(o =&gt; o.User)\n        .FirstAsync(o =&gt; o.Id == ownerId);\n\n    if (owner.SubAccountStatus != OwnerSubAccountStatusEnum.Pending)\n    {\n        throw new InvalidOperationException(\n            \"Apenas KYCs pendentes podem ser rejeitados\");\n    }\n\n    // Atualizar status\n    owner.SubAccountStatus = OwnerSubAccountStatusEnum.Rejected;\n    owner.UpdatedAt = DateTime.UtcNow;\n    owner.UpdatedBy = adminUserId;\n\n    await _context.SaveChangesAsync();\n\n    // Notificar usu\u00e1rio com motivo\n    var notification = new Notification\n    {\n        Type = NotificationTypeEnum.KycRejected,\n        Channel = owner.User.NotificationPreference,\n        MetadataJson = JsonSerializer.Serialize(new\n        {\n            Email = owner.User.Email,\n            PhoneNumber = owner.User.Telephone,\n            Name = owner.User.FirstName,\n            Reason = reason\n        })\n    };\n\n    await _context.Notifications.AddAsync(notification);\n    await _context.SaveChangesAsync();\n\n    _logger.LogInformation(\n        \"KYC rejeitado: Owner {OwnerId} por Admin {AdminId}. Motivo: {Reason}\",\n        ownerId, adminUserId, reason);\n}\n</code></pre>"},{"location":"pagamentos/processo-kyc/#validacoes","title":"Valida\u00e7\u00f5es","text":""},{"location":"pagamentos/processo-kyc/#no-envio","title":"No Envio","text":"<ul> <li>\u2705 Todos os arquivos obrigat\u00f3rios presentes</li> <li>\u2705 Formatos v\u00e1lidos (PDF, JPG, PNG)</li> <li>\u2705 Tamanho m\u00e1ximo por arquivo (10MB)</li> <li>\u2705 Dados banc\u00e1rios preenchidos</li> <li>\u2705 CPF v\u00e1lido</li> </ul>"},{"location":"pagamentos/processo-kyc/#na-revisao-admin","title":"Na Revis\u00e3o (Admin)","text":"<ul> <li>\u2705 Documentos leg\u00edveis</li> <li>\u2705 CPF confere em todos os documentos</li> <li>\u2705 Comprovante de resid\u00eancia recente</li> <li>\u2705 Selfie reconhec\u00edvel</li> <li>\u2705 Dados banc\u00e1rios corretos</li> </ul>"},{"location":"pagamentos/processo-kyc/#restricoes-baseadas-em-kyc","title":"Restri\u00e7\u00f5es Baseadas em KYC","text":""},{"location":"pagamentos/processo-kyc/#promoter","title":"Promoter","text":"<pre><code>// PromoterService.cs\npublic async Task&lt;List&lt;VideoDto&gt;&gt; GetVideosForLinksAsync(long promoterId)\n{\n    var owner = await _context.Owners.FindAsync(promoterId);\n\n    // Verificar se KYC est\u00e1 aprovado\n    if (owner.SubAccountStatus != OwnerSubAccountStatusEnum.Approved)\n    {\n        throw new UnauthorizedAccessException(\n            \"KYC deve estar aprovado para gerar links\");\n    }\n\n    // Retornar apenas v\u00eddeos com comiss\u00e3o &gt; 0%\n    return await _context.Videos\n        .Include(v =&gt; v.VideoRevenueConfig)\n        .Where(v =&gt; v.IsActive &amp;&amp; \n                    v.VideoRevenueConfig.PromoterPercentage &gt; 0)\n        .Select(v =&gt; MapToDto(v))\n        .ToListAsync();\n}\n</code></pre>"},{"location":"pagamentos/processo-kyc/#influencer","title":"Influencer","text":"<pre><code>// Valida\u00e7\u00e3o antes de criar OwnerVideo\npublic async Task LinkInfluencerToVideoAsync(long videoId, long influencerId)\n{\n    var owner = await _context.Owners.FindAsync(influencerId);\n\n    if (owner.Type != OwnerTypeEnum.Influencer)\n    {\n        throw new InvalidOperationException(\"Owner n\u00e3o \u00e9 influencer\");\n    }\n\n    if (owner.SubAccountStatus != OwnerSubAccountStatusEnum.Approved)\n    {\n        _logger.LogWarning(\n            \"Vinculando influencer {Id} com KYC n\u00e3o aprovado ao v\u00eddeo {VideoId}\",\n            influencerId, videoId);\n        // Pode vincular, mas n\u00e3o receber\u00e1 at\u00e9 aprovar KYC\n    }\n\n    var ownerVideo = new OwnerVideo\n    {\n        OwnerId = influencerId,\n        VideoId = videoId\n    };\n\n    await _context.OwnerVideos.AddAsync(ownerVideo);\n    await _context.SaveChangesAsync();\n}\n</code></pre>"},{"location":"pagamentos/processo-kyc/#dashboard-admin","title":"Dashboard Admin","text":""},{"location":"pagamentos/processo-kyc/#listagem-de-kycs-pendentes","title":"Listagem de KYCs Pendentes","text":"<pre><code>public async Task&lt;List&lt;KycPendingDto&gt;&gt; GetPendingKycsAsync()\n{\n    return await _context.Owners\n        .Include(o =&gt; o.User)\n        .Where(o =&gt; o.SubAccountStatus == OwnerSubAccountStatusEnum.Pending)\n        .Select(o =&gt; new KycPendingDto\n        {\n            OwnerId = o.Id,\n            Name = o.User.Fullname,\n            Email = o.User.Email,\n            Type = o.Type.ToString(),\n            SubmittedAt = o.UpdatedAt,\n            DocumentUrls = new DocumentUrlsDto\n            {\n                Cpf = o.DocumentCpfUrl,\n                Rg = o.DocumentRgUrl,\n                AddressProof = o.DocumentAddressProofUrl,\n                Selfie = o.DocumentSelfieUrl\n            },\n            BankData = new BankDataDto\n            {\n                BankCode = o.BankCode,\n                Agency = o.BankAgency,\n                Account = o.BankAccount,\n                AccountType = o.BankAccountType\n            }\n        })\n        .OrderBy(o =&gt; o.SubmittedAt)\n        .ToListAsync();\n}\n</code></pre>"},{"location":"pagamentos/processo-kyc/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<ul> <li>Veja como funciona o Split de Pagamento ap\u00f3s KYC aprovado</li> <li>Entenda Webhooks para confirma\u00e7\u00f5es autom\u00e1ticas</li> <li>Consulte Casos de Uso &gt; Aprova\u00e7\u00e3o KYC para exemplo completo</li> </ul>"},{"location":"pagamentos/split-pagamento/","title":"Split de Pagamento","text":""},{"location":"pagamentos/split-pagamento/#o-que-e-split","title":"O que \u00e9 Split?","text":"<p>Split de Pagamento \u00e9 a divis\u00e3o autom\u00e1tica de uma transa\u00e7\u00e3o entre m\u00faltiplos benefici\u00e1rios no momento do pagamento. No Iugu, o split \u00e9 configurado ao criar a invoice e executado automaticamente quando o pagamento \u00e9 confirmado.</p>"},{"location":"pagamentos/split-pagamento/#por-que-usar-split","title":"Por que Usar Split?","text":""},{"location":"pagamentos/split-pagamento/#sem-split-manual","title":"Sem Split (Manual)","text":"<pre><code>sequenceDiagram\n    participant U as Usu\u00e1rio\n    participant P as Plataforma\n    participant I1 as Influencer\n    participant P1 as Promoter\n\n    U-&gt;&gt;P: Paga R$ 100\n    P-&gt;&gt;P: Recebe R$ 100\n    Note over P: Aguarda confirma\u00e7\u00e3o\n    P-&gt;&gt;I1: Transfere R$ 50 (manual)\n    P-&gt;&gt;P1: Transfere R$ 30 (manual)\n    P-&gt;&gt;P: Fica com R$ 20\n\n    Note over P: Trabalho manual&lt;br/&gt;Atraso no repasse&lt;br/&gt;Custo de transa\u00e7\u00e3o extra</code></pre>"},{"location":"pagamentos/split-pagamento/#com-split-automatico","title":"Com Split (Autom\u00e1tico)","text":"<pre><code>sequenceDiagram\n    participant U as Usu\u00e1rio\n    participant Iugu as Iugu\n    participant P as Plataforma (Master)\n    participant I1 as Influencer (Sub)\n    participant P1 as Promoter (Sub)\n\n    U-&gt;&gt;Iugu: Paga R$ 100\n    Iugu-&gt;&gt;Iugu: Divide automaticamente\n    Iugu-&gt;&gt;P: R$ 20 (20%)\n    Iugu-&gt;&gt;I1: R$ 50 (50%)\n    Iugu-&gt;&gt;P1: R$ 30 (30%)\n\n    Note over Iugu: Instant\u00e2neo&lt;br/&gt;Sem custo extra&lt;br/&gt;Transparente</code></pre>"},{"location":"pagamentos/split-pagamento/#como-funciona","title":"Como Funciona","text":""},{"location":"pagamentos/split-pagamento/#1-configuracao-no-videorevenueconfig","title":"1. Configura\u00e7\u00e3o no VideoRevenueConfig","text":"<p>Cada v\u00eddeo tem sua pr\u00f3pria configura\u00e7\u00e3o de comiss\u00f5es:</p> <pre><code>CREATE TABLE video_revenue_configs (\n    id BIGSERIAL PRIMARY KEY,\n    video_id BIGINT REFERENCES videos(id),\n\n    -- Percentuais (devem somar 100)\n    platform_percentage DECIMAL(5,2), -- Ex: 20.00\n    owner_percentage DECIMAL(5,2),    -- Ex: 50.00\n    promoter_percentage DECIMAL(5,2), -- Ex: 30.00\n\n    -- Se promoter_percentage = 0, v\u00eddeo n\u00e3o aparece para gera\u00e7\u00e3o de links\n\n    created_at TIMESTAMP,\n    updated_at TIMESTAMP\n);\n</code></pre> <p>Exemplo de configura\u00e7\u00f5es:</p> V\u00eddeo Plataforma Owner Promoter Dispon\u00edvel para Links V\u00eddeo A 20% 80% 0% \u274c N\u00e3o V\u00eddeo B 20% 50% 30% \u2705 Sim V\u00eddeo C 30% 60% 10% \u2705 Sim V\u00eddeo D 25% 75% 0% \u274c N\u00e3o"},{"location":"pagamentos/split-pagamento/#2-calculo-dos-valores","title":"2. C\u00e1lculo dos Valores","text":"<pre><code>// OrderService.cs\npublic async Task&lt;Order&gt; CreateOrderAsync(CreateOrderDto dto)\n{\n    var video = await _context.Videos\n        .Include(v =&gt; v.VideoRevenueConfig)\n        .FirstAsync(v =&gt; v.Id == dto.VideoId);\n\n    var config = video.VideoRevenueConfig;\n\n    // Valor do v\u00eddeo em centavos (Iugu trabalha com centavos)\n    var totalCents = (int)(video.Price * 100);\n\n    // Calcular cada parte\n    var platformCents = (int)(totalCents * config.PlatformPercentage / 100);\n    var ownerCents = (int)(totalCents * config.OwnerPercentage / 100);\n    var promoterCents = dto.PromoterId.HasValue \n        ? (int)(totalCents * config.PromoterPercentage / 100)\n        : 0;\n\n    // Ajustar arredondamento (garantir que soma = 100%)\n    var totalCalculated = platformCents + ownerCents + promoterCents;\n    if (totalCalculated != totalCents)\n    {\n        // Adiciona diferen\u00e7a ao owner\n        ownerCents += (totalCents - totalCalculated);\n    }\n\n    var order = new Order\n    {\n        UserId = dto.UserId,\n        VideoId = dto.VideoId,\n        PromoterId = dto.PromoterId,\n        VideoAffiliateLinkId = dto.AffiliateLinkId,\n        Amount = totalCents,\n        PlatformAmount = platformCents,\n        OwnerAmount = ownerCents,\n        PromoterAmount = promoterCents\n    };\n\n    await _context.Orders.AddAsync(order);\n    await _context.SaveChangesAsync();\n\n    return order;\n}\n</code></pre>"},{"location":"pagamentos/split-pagamento/#3-criacao-da-invoice-com-split-no-iugu","title":"3. Cria\u00e7\u00e3o da Invoice com Split no Iugu","text":"<pre><code>// IuguService.cs\npublic async Task&lt;IuguInvoiceDto&gt; CreateInvoiceWithSplitAsync(Order order)\n{\n    var video = await _context.Videos.FindAsync(order.VideoId);\n    var owner = await GetOwnerForVideo(order.VideoId); // Influencer\n    var promoter = order.PromoterId.HasValue \n        ? await _context.Owners.FindAsync(order.PromoterId.Value)\n        : null;\n    var user = await _context.Users.FindAsync(order.UserId);\n\n    // Validar que Owner tem KYC aprovado\n    if (owner.SubAccountStatus != OwnerSubAccountStatusEnum.Approved)\n    {\n        throw new InvalidOperationException(\n            \"Owner/Influencer deve ter KYC aprovado\");\n    }\n\n    // Validar que Promoter (se houver) tem KYC aprovado\n    if (promoter != null &amp;&amp; \n        promoter.SubAccountStatus != OwnerSubAccountStatusEnum.Approved)\n    {\n        throw new InvalidOperationException(\n            \"Promoter deve ter KYC aprovado\");\n    }\n\n    // Montar splits\n    var splits = new List&lt;object&gt;();\n\n    // Conta Master (Plataforma)\n    splits.Add(new\n    {\n        recipient_account_id = _config.IuguMasterAccountId,\n        cents = order.PlatformAmount\n    });\n\n    // Subconta Owner (Influencer)\n    splits.Add(new\n    {\n        recipient_account_id = owner.IuguAccountId,\n        cents = order.OwnerAmount\n    });\n\n    // Subconta Promoter (se houver)\n    if (promoter != null &amp;&amp; order.PromoterAmount &gt; 0)\n    {\n        splits.Add(new\n        {\n            recipient_account_id = promoter.IuguAccountId,\n            cents = order.PromoterAmount\n        });\n    }\n\n    var request = new\n    {\n        email = user.Email,\n        due_date = DateTime.Now.AddDays(3).ToString(\"yyyy-MM-dd\"),\n        items = new[]\n        {\n            new\n            {\n                description = $\"V\u00eddeo: {video.Title}\",\n                quantity = 1,\n                price_cents = order.Amount\n            }\n        },\n        splits = splits.ToArray(),\n        // Importante: configurar split para executar na confirma\u00e7\u00e3o\n        split_on_payment = true\n    };\n\n    _httpClient.DefaultRequestHeaders.Authorization = \n        new AuthenticationHeaderValue(\"Bearer\", _config.IuguApiToken);\n\n    var response = await _httpClient.PostAsJsonAsync(\n        \"https://api.iugu.com/v1/invoices\",\n        request\n    );\n\n    response.EnsureSuccessStatusCode();\n\n    var result = await response.Content.ReadFromJsonAsync&lt;dynamic&gt;();\n\n    return new IuguInvoiceDto\n    {\n        Id = result.id,\n        SecureUrl = result.secure_url,\n        Status = result.status\n    };\n}\n</code></pre>"},{"location":"pagamentos/split-pagamento/#4-execucao-automatica-do-split","title":"4. Execu\u00e7\u00e3o Autom\u00e1tica do Split","text":"<p>Quando o usu\u00e1rio paga a invoice:</p> <pre><code>sequenceDiagram\n    participant U as Usu\u00e1rio\n    participant I as Iugu\n    participant M as Conta Master\n    participant O as Subconta Owner\n    participant P as Subconta Promoter\n    participant W as Webhook\n    participant B as Backend\n\n    U-&gt;&gt;I: Paga R$ 100 (cart\u00e3o/boleto/Pix)\n    I-&gt;&gt;I: Valida pagamento\n    I-&gt;&gt;I: Status: pending \u2192 paid\n\n    Note over I: Executa split autom\u00e1tico\n    I-&gt;&gt;M: Transfere R$ 20 (20%)\n    I-&gt;&gt;O: Transfere R$ 50 (50%)\n    I-&gt;&gt;P: Transfere R$ 30 (30%)\n\n    I-&gt;&gt;W: POST /webhook/iugu&lt;br/&gt;{event: invoice.paid}\n    W-&gt;&gt;B: Processa webhook\n    B-&gt;&gt;B: Registra Income (3 registros)\n    B--&gt;&gt;W: 200 OK\n\n    U-&gt;&gt;U: Recebe confirma\u00e7\u00e3o\n    O-&gt;&gt;O: Saldo dispon\u00edvel para saque\n    P-&gt;&gt;P: Saldo dispon\u00edvel para saque</code></pre>"},{"location":"pagamentos/split-pagamento/#registro-de-income","title":"Registro de Income","text":"<p>Ap\u00f3s confirma\u00e7\u00e3o do pagamento, registramos cada parte do split:</p> <pre><code>// PaymentService.cs\npublic async Task ConfirmPaymentAsync(string iuguInvoiceId)\n{\n    var payment = await _context.Payments\n        .Include(p =&gt; p.Order)\n        .ThenInclude(o =&gt; o.Video)\n        .ThenInclude(v =&gt; v.OwnerVideos)\n        .FirstAsync(p =&gt; p.IuguInvoiceId == iuguInvoiceId);\n\n    // Atualizar payment\n    payment.Status = PaymentStatusEnum.Paid;\n    payment.IuguPaidAt = DateTime.UtcNow;\n\n    // Criar registro de income para cada benefici\u00e1rio\n    var incomes = new List&lt;Income&gt;();\n\n    // 1. Plataforma (conta master)\n    incomes.Add(new Income\n    {\n        OrderId = payment.Order.Id,\n        OwnerId = null, // NULL = plataforma\n        Amount = payment.Order.PlatformAmount,\n        Type = IncomeTypeEnum.Platform,\n        Description = \"Comiss\u00e3o da plataforma\",\n        CreatedAt = DateTime.UtcNow\n    });\n\n    // 2. Owner/Influencer\n    var owner = payment.Order.Video.OwnerVideos.First().Owner;\n    incomes.Add(new Income\n    {\n        OrderId = payment.Order.Id,\n        OwnerId = owner.Id,\n        Amount = payment.Order.OwnerAmount,\n        Type = IncomeTypeEnum.Owner,\n        Description = $\"Venda do v\u00eddeo: {payment.Order.Video.Title}\",\n        CreatedAt = DateTime.UtcNow\n    });\n\n    // 3. Promoter (se houver)\n    if (payment.Order.PromoterId.HasValue &amp;&amp; payment.Order.PromoterAmount &gt; 0)\n    {\n        incomes.Add(new Income\n        {\n            OrderId = payment.Order.Id,\n            OwnerId = payment.Order.PromoterId.Value,\n            Amount = payment.Order.PromoterAmount,\n            Type = IncomeTypeEnum.Promoter,\n            Description = $\"Comiss\u00e3o por divulga\u00e7\u00e3o: {payment.Order.Video.Title}\",\n            CreatedAt = DateTime.UtcNow\n        });\n    }\n\n    _context.Incomes.AddRange(incomes);\n    await _context.SaveChangesAsync();\n\n    _logger.LogInformation(\n        \"Pagamento confirmado: Invoice {InvoiceId}, {IncomeCount} incomes criados\",\n        iuguInvoiceId, incomes.Count);\n}\n</code></pre>"},{"location":"pagamentos/split-pagamento/#exemplo-pratico","title":"Exemplo Pr\u00e1tico","text":""},{"location":"pagamentos/split-pagamento/#cenario-video-de-r-10000","title":"Cen\u00e1rio: V\u00eddeo de R$ 100,00","text":"<p>Configura\u00e7\u00e3o: - Plataforma: 20% - Influencer (Owner): 50% - Promoter: 30%</p> <p>Usu\u00e1rio compra via link de afiliado:</p> <pre><code>Pre\u00e7o do v\u00eddeo: R$ 100,00\n\nC\u00e1lculo:\n- Plataforma: R$ 100 \u00d7 20% = R$ 20,00\n- Influencer: R$ 100 \u00d7 50% = R$ 50,00\n- Promoter: R$ 100 \u00d7 30% = R$ 30,00\n\nTotal: R$ 20 + R$ 50 + R$ 30 = R$ 100,00 \u2713\n</code></pre> <p>Ap\u00f3s pagamento:</p> Benefici\u00e1rio Valor Recebe em Pode Sacar Conta Master (Amasso) R$ 20,00 Imediato Sim Subconta Influencer R$ 50,00 Imediato Sim Subconta Promoter R$ 30,00 Imediato Sim <p>Tabela <code>incomes</code>:</p> id order_id owner_id amount type description 1 123 NULL 2000 Platform Comiss\u00e3o da plataforma 2 123 45 5000 Owner Venda do v\u00eddeo: V\u00eddeo X 3 123 67 3000 Promoter Comiss\u00e3o por divulga\u00e7\u00e3o: V\u00eddeo X <p>Nota: Valores armazenados em centavos no banco.</p>"},{"location":"pagamentos/split-pagamento/#videos-sem-promoter","title":"V\u00eddeos Sem Promoter","text":"<p>Se o usu\u00e1rio comprar sem usar link de afiliado ou se o v\u00eddeo n\u00e3o tem comiss\u00e3o para promoter (promoter_percentage = 0):</p> <pre><code>Pre\u00e7o do v\u00eddeo: R$ 100,00\nConfig: Plataforma 20%, Owner 80%, Promoter 0%\n\nC\u00e1lculo:\n- Plataforma: R$ 100 \u00d7 20% = R$ 20,00\n- Influencer: R$ 100 \u00d7 80% = R$ 80,00\n- Promoter: R$ 0,00 (sem promoter ou sem comiss\u00e3o)\n\nTotal: R$ 20 + R$ 80 = R$ 100,00 \u2713\n</code></pre> <p>Split no Iugu: <pre><code>{\n  splits: [\n    { recipient_account_id: \"master_id\", cents: 2000 },\n    { recipient_account_id: \"owner_id\", cents: 8000 }\n    // Sem split para promoter\n  ]\n}\n</code></pre></p>"},{"location":"pagamentos/split-pagamento/#custos-e-taxas","title":"Custos e Taxas","text":""},{"location":"pagamentos/split-pagamento/#taxas-do-iugu-exemplo","title":"Taxas do Iugu (Exemplo)","text":"<p>O Iugu cobra sobre o valor total da transa\u00e7\u00e3o: - Cart\u00e3o de cr\u00e9dito: ~2,99% + R$ 0,49 - Boleto: ~R$ 2,00 - Pix: ~0,99%</p> <p>Exemplo: Venda de R$ 100 com cart\u00e3o: <pre><code>Valor pago pelo usu\u00e1rio: R$ 100,00\nTaxa Iugu (2,99% + R$ 0,49): R$ 3,48\nValor dispon\u00edvel para split: R$ 96,52\n\nSplit:\n- Plataforma (20% de 96,52): R$ 19,30\n- Influencer (50% de 96,52): R$ 48,26\n- Promoter (30% de 96,52): R$ 28,96\n</code></pre></p> <p>Nota: A plataforma pode: 1. Absorver as taxas (como acima) 2. Repassar ao usu\u00e1rio (cobrar R$ 103,48) 3. Distribuir entre benefici\u00e1rios</p>"},{"location":"pagamentos/split-pagamento/#relatorios-e-dashboards","title":"Relat\u00f3rios e Dashboards","text":""},{"location":"pagamentos/split-pagamento/#dashboard-do-influencer","title":"Dashboard do Influencer","text":"<pre><code>public async Task&lt;InfluencerDashboardDto&gt; GetDashboardAsync(long influencerId)\n{\n    var incomes = await _context.Incomes\n        .Include(i =&gt; i.Order)\n        .ThenInclude(o =&gt; o.Video)\n        .Where(i =&gt; i.OwnerId == influencerId &amp;&amp; \n                    i.Type == IncomeTypeEnum.Owner)\n        .ToListAsync();\n\n    return new InfluencerDashboardDto\n    {\n        TotalEarnings = incomes.Sum(i =&gt; i.Amount) / 100m,\n        TotalSales = incomes.Count,\n        AveragePerSale = incomes.Average(i =&gt; i.Amount) / 100m,\n        TopVideos = incomes\n            .GroupBy(i =&gt; i.Order.Video)\n            .OrderByDescending(g =&gt; g.Sum(i =&gt; i.Amount))\n            .Take(5)\n            .Select(g =&gt; new VideoEarningsDto\n            {\n                VideoTitle = g.Key.Title,\n                Sales = g.Count(),\n                TotalEarnings = g.Sum(i =&gt; i.Amount) / 100m\n            })\n            .ToList()\n    };\n}\n</code></pre>"},{"location":"pagamentos/split-pagamento/#dashboard-do-promoter","title":"Dashboard do Promoter","text":"<pre><code>public async Task&lt;PromoterDashboardDto&gt; GetDashboardAsync(long promoterId)\n{\n    var incomes = await _context.Incomes\n        .Include(i =&gt; i.Order)\n        .ThenInclude(o =&gt; o.Video)\n        .Include(i =&gt; i.Order)\n        .ThenInclude(o =&gt; o.VideoAffiliateLink)\n        .Where(i =&gt; i.OwnerId == promoterId &amp;&amp; \n                    i.Type == IncomeTypeEnum.Promoter)\n        .ToListAsync();\n\n    var links = await _context.VideoAffiliateLinks\n        .Include(l =&gt; l.Video)\n        .Where(l =&gt; l.OwnerId == promoterId)\n        .ToListAsync();\n\n    return new PromoterDashboardDto\n    {\n        TotalEarnings = incomes.Sum(i =&gt; i.Amount) / 100m,\n        TotalConversions = incomes.Count,\n        ActiveLinks = links.Count(l =&gt; l.IsActive),\n        ConversionRate = CalculateConversionRate(links, incomes),\n        TopPerformingLinks = GetTopLinks(links, incomes)\n    };\n}\n</code></pre>"},{"location":"pagamentos/split-pagamento/#vantagens-do-split-automatico","title":"Vantagens do Split Autom\u00e1tico","text":""},{"location":"pagamentos/split-pagamento/#para-a-plataforma","title":"Para a Plataforma","text":"<ul> <li>\u2705 Sem trabalho manual de transfer\u00eancias</li> <li>\u2705 Sem custo extra de transa\u00e7\u00f5es</li> <li>\u2705 Transpar\u00eancia total</li> <li>\u2705 Conformidade garantida</li> </ul>"},{"location":"pagamentos/split-pagamento/#para-promotersinfluencers","title":"Para Promoters/Influencers","text":"<ul> <li>\u2705 Recebimento instant\u00e2neo</li> <li>\u2705 Sem atrasos</li> <li>\u2705 Controle total do saldo</li> <li>\u2705 Pode sacar quando quiser</li> </ul>"},{"location":"pagamentos/split-pagamento/#para-o-sistema","title":"Para o Sistema","text":"<ul> <li>\u2705 Escal\u00e1vel</li> <li>\u2705 Audit\u00e1vel</li> <li>\u2705 Autom\u00e1tico</li> <li>\u2705 Confi\u00e1vel</li> </ul>"},{"location":"pagamentos/split-pagamento/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<ul> <li>Entenda como Webhooks confirmam os pagamentos</li> <li>Veja Casos de Uso &gt; Compra de V\u00eddeo para fluxo completo</li> <li>Consulte Fluxos de Neg\u00f3cio &gt; Comiss\u00f5es para detalhes</li> </ul>"},{"location":"pagamentos/visao-geral-iugu/","title":"Pagamentos Iugu - Vis\u00e3o Geral","text":""},{"location":"pagamentos/visao-geral-iugu/#o-que-e-o-iugu","title":"O que \u00e9 o Iugu?","text":"<p>O Iugu \u00e9 um gateway de pagamento brasileiro completo que oferece n\u00e3o apenas processamento de pagamentos, mas tamb\u00e9m um sistema robusto de marketplace com contas master e subcontas.</p> <p>Website: https://iugu.com</p>"},{"location":"pagamentos/visao-geral-iugu/#por-que-escolhemos-o-iugu","title":"Por que Escolhemos o Iugu?","text":""},{"location":"pagamentos/visao-geral-iugu/#recursos-fundamentais-para-o-amasso","title":"Recursos Fundamentais para o Amasso","text":"<ol> <li>Sistema de Marketplace (Split Autom\u00e1tico)</li> <li>Divis\u00e3o autom\u00e1tica do pagamento entre m\u00faltiplos benefici\u00e1rios</li> <li>Sem necessidade de transfer\u00eancias manuais</li> <li> <p>Transpar\u00eancia total para todos os envolvidos</p> </li> <li> <p>Conta Master + Subcontas</p> </li> <li>Plataforma como conta master centraliza pagamentos</li> <li>Cada Promoter e Influencer tem sua subconta</li> <li> <p>Conformidade com regulamenta\u00e7\u00f5es financeiras</p> </li> <li> <p>Compliance e KYC</p> </li> <li>Sistema integrado de verifica\u00e7\u00e3o de identidade</li> <li>Exigido por lei para quem recebe dinheiro</li> <li> <p>Processo documentado e audit\u00e1vel</p> </li> <li> <p>Webhooks Confi\u00e1veis</p> </li> <li>Notifica\u00e7\u00f5es em tempo real de mudan\u00e7as de status</li> <li>Retry autom\u00e1tico em caso de falha</li> <li> <p>Assinatura digital para seguran\u00e7a</p> </li> <li> <p>API Completa</p> </li> <li>Cria\u00e7\u00e3o de invoices (faturas)</li> <li>Gest\u00e3o de subcontas</li> <li>Configura\u00e7\u00e3o de splits</li> <li>Consulta de transa\u00e7\u00f5es</li> </ol>"},{"location":"pagamentos/visao-geral-iugu/#conceitos-principais","title":"Conceitos Principais","text":""},{"location":"pagamentos/visao-geral-iugu/#invoice-fatura","title":"Invoice (Fatura)","text":"<p>Representa uma cobran\u00e7a a ser paga: - Criada programaticamente via API - Possui URL de pagamento (secure_url) - Aceita m\u00faltiplos m\u00e9todos: cart\u00e3o, boleto, Pix - Status: pending, paid, cancelled, refunded</p>"},{"location":"pagamentos/visao-geral-iugu/#split-divisao","title":"Split (Divis\u00e3o)","text":"<p>Configura\u00e7\u00e3o de como o valor ser\u00e1 distribu\u00eddo: - Definido no momento da cria\u00e7\u00e3o da invoice - Percentuais ou valores fixos - Executa automaticamente quando invoice \u00e9 paga - Irrevog\u00e1vel ap\u00f3s execu\u00e7\u00e3o</p>"},{"location":"pagamentos/visao-geral-iugu/#conta-master","title":"Conta Master","text":"<p>Conta principal da plataforma: - Recebe todos os pagamentos - Gerencia subcontas - Configura regras de split - Centraliza gest\u00e3o financeira</p>"},{"location":"pagamentos/visao-geral-iugu/#subconta","title":"Subconta","text":"<p>Conta vinculada \u00e0 master para cada seller: - Criada para Promoters e Influencers - Requer KYC aprovado - Recebe automaticamente via split - Pode sacar para conta banc\u00e1ria</p>"},{"location":"pagamentos/visao-geral-iugu/#arquitetura-do-sistema","title":"Arquitetura do Sistema","text":"<pre><code>graph TD\n    A[Usu\u00e1rio] --&gt;|Paga| B[Invoice Iugu]\n    B --&gt;|Split Autom\u00e1tico| C[Conta Master Amasso]\n    B --&gt;|Split Autom\u00e1tico| D[Subconta Owner]\n    B --&gt;|Split Autom\u00e1tico| E[Subconta Promoter]\n\n    C --&gt;|Saque| F[Conta Banc\u00e1ria Amasso]\n    D --&gt;|Saque| G[Conta Banc\u00e1ria Owner]\n    E --&gt;|Saque| H[Conta Banc\u00e1ria Promoter]\n\n    I[Backend API] --&gt;|Cria Invoice| B\n    I --&gt;|Cria Subconta| D\n    I --&gt;|Cria Subconta| E\n\n    B --&gt;|Webhook| I\n\n    style C fill:#3498db\n    style D fill:#2ecc71\n    style E fill:#2ecc71</code></pre>"},{"location":"pagamentos/visao-geral-iugu/#fluxo-geral-de-pagamento","title":"Fluxo Geral de Pagamento","text":"<pre><code>sequenceDiagram\n    participant U as Usu\u00e1rio\n    participant F as Frontend\n    participant B as Backend API\n    participant I as Iugu\n    participant W as Webhook\n\n    U-&gt;&gt;F: Compra v\u00eddeo\n    F-&gt;&gt;B: POST /api/orders\n    B-&gt;&gt;B: Calcula split baseado em&lt;br/&gt;VideoRevenueConfig\n    B-&gt;&gt;I: POST /v1/invoices&lt;br/&gt;{splits: [...]}\n    I--&gt;&gt;B: {id, secure_url, status: pending}\n    B--&gt;&gt;F: {secure_url}\n    F-&gt;&gt;U: Redireciona\n    U-&gt;&gt;I: Paga (cart\u00e3o/boleto/Pix)\n    I-&gt;&gt;I: Valida pagamento\n    I-&gt;&gt;I: Executa split autom\u00e1tico\n    Note over I: Distribui:&lt;br/&gt;- Master: 20%&lt;br/&gt;- Owner: 50%&lt;br/&gt;- Promoter: 30%\n    I-&gt;&gt;W: invoice.status_changed (paid)\n    W-&gt;&gt;B: POST /webhook/iugu\n    B-&gt;&gt;B: Atualiza status\n    B-&gt;&gt;B: Registra Income\n    B--&gt;&gt;W: 200 OK\n    I--&gt;&gt;U: Confirma\u00e7\u00e3o</code></pre>"},{"location":"pagamentos/visao-geral-iugu/#entidades-relacionadas-no-banco","title":"Entidades Relacionadas no Banco","text":""},{"location":"pagamentos/visao-geral-iugu/#owner","title":"Owner","text":"<pre><code>CREATE TABLE owners (\n    id BIGSERIAL PRIMARY KEY,\n    user_id BIGINT REFERENCES users(id),\n    type VARCHAR(50), -- Influencer, Promoter, etc\n    iugu_account_id VARCHAR(100), -- ID da subconta no Iugu\n    sub_account_status VARCHAR(20), -- Pendente, Aprovado, Rejeitado\n    cpf_cnpj VARCHAR(20),\n    -- Dados banc\u00e1rios\n    bank_code VARCHAR(10),\n    bank_agency VARCHAR(10),\n    bank_account VARCHAR(20),\n    -- ... outros campos\n);\n</code></pre>"},{"location":"pagamentos/visao-geral-iugu/#payment","title":"Payment","text":"<pre><code>CREATE TABLE payments (\n    id BIGSERIAL PRIMARY KEY,\n    order_id BIGINT REFERENCES orders(id),\n    iugu_invoice_id VARCHAR(100), -- ID da invoice no Iugu\n    iugu_secure_url TEXT, -- URL de pagamento\n    status VARCHAR(20), -- Pending, Paid, Cancelled\n    iugu_paid_at TIMESTAMP,\n    amount INT, -- em centavos\n    -- ... outros campos\n);\n</code></pre>"},{"location":"pagamentos/visao-geral-iugu/#income","title":"Income","text":"<pre><code>CREATE TABLE incomes (\n    id BIGSERIAL PRIMARY KEY,\n    order_id BIGINT REFERENCES orders(id),\n    owner_id BIGINT REFERENCES owners(id), -- NULL para plataforma\n    amount INT, -- em centavos\n    type VARCHAR(20), -- Platform, Owner, Promoter\n    created_at TIMESTAMP\n);\n</code></pre>"},{"location":"pagamentos/visao-geral-iugu/#recursos-utilizados-do-iugu","title":"Recursos Utilizados do Iugu","text":"Recurso Endpoint Uso Criar Invoice <code>POST /v1/invoices</code> Gerar cobran\u00e7a com split Consultar Invoice <code>GET /v1/invoices/:id</code> Verificar status Criar Subconta <code>POST /v1/marketplace/create_account</code> KYC de Promoter/Influencer Consultar Subconta <code>GET /v1/accounts/:id</code> Status do KYC Verificar Subconta <code>POST /v1/accounts/:id/request_verification</code> Enviar para an\u00e1lise Webhooks Configura\u00e7\u00e3o no painel Notifica\u00e7\u00f5es autom\u00e1ticas"},{"location":"pagamentos/visao-geral-iugu/#custos-exemplo-simplificado","title":"Custos (Exemplo Simplificado)","text":"<p>Nota: Valores ilustrativos. Consultar contrato com Iugu.</p>"},{"location":"pagamentos/visao-geral-iugu/#taxas-da-plataforma","title":"Taxas da Plataforma","text":"<ul> <li>Cart\u00e3o de cr\u00e9dito: ~2,99% + R$ 0,49</li> <li>Boleto: ~R$ 2,00</li> <li>Pix: ~0,99%</li> </ul>"},{"location":"pagamentos/visao-geral-iugu/#repasses-para-subcontas","title":"Repasses para Subcontas","text":"<ul> <li>Autom\u00e1ticos via split (sem custo extra)</li> <li>Saques para conta banc\u00e1ria: Conforme pol\u00edtica Iugu</li> </ul>"},{"location":"pagamentos/visao-geral-iugu/#seguranca","title":"Seguran\u00e7a","text":""},{"location":"pagamentos/visao-geral-iugu/#api-token","title":"API Token","text":"<pre><code>// Configura\u00e7\u00e3o\nvar apiToken = Environment.GetEnvironmentVariable(\"IUGU_API_TOKEN\");\n_httpClient.DefaultRequestHeaders.Add(\"Authorization\", $\"Bearer {apiToken}\");\n</code></pre>"},{"location":"pagamentos/visao-geral-iugu/#validacao-de-webhooks","title":"Valida\u00e7\u00e3o de Webhooks","text":"<pre><code>public bool ValidateWebhookSignature(string payload, string signature)\n{\n    var secret = _configuration[\"Iugu:WebhookSecret\"];\n    var hash = ComputeHmacSha256(payload, secret);\n    return hash.Equals(signature, StringComparison.OrdinalIgnoreCase);\n}\n</code></pre>"},{"location":"pagamentos/visao-geral-iugu/#ambientes","title":"Ambientes","text":""},{"location":"pagamentos/visao-geral-iugu/#sandbox-desenvolvimento","title":"Sandbox (Desenvolvimento)","text":"<ul> <li>Base URL: <code>https://api.iugu.com</code> (mesmo endpoint, usa API Token de teste)</li> <li>Cart\u00f5es de teste dispon\u00edveis</li> <li>Sem cobran\u00e7as reais</li> </ul>"},{"location":"pagamentos/visao-geral-iugu/#producao","title":"Produ\u00e7\u00e3o","text":"<ul> <li>Base URL: <code>https://api.iugu.com</code></li> <li>API Token de produ\u00e7\u00e3o</li> <li>Transa\u00e7\u00f5es reais</li> </ul>"},{"location":"pagamentos/visao-geral-iugu/#limitacoes-e-consideracoes","title":"Limita\u00e7\u00f5es e Considera\u00e7\u00f5es","text":""},{"location":"pagamentos/visao-geral-iugu/#splits","title":"Splits","text":"<ul> <li>M\u00e1ximo de 20 recipients por invoice</li> <li>Percentuais devem somar 100%</li> <li>M\u00ednimo de R$ 1,00 por recipient</li> </ul>"},{"location":"pagamentos/visao-geral-iugu/#subcontas","title":"Subcontas","text":"<ul> <li>Requerem KYC completo</li> <li>Aprova\u00e7\u00e3o pode levar dias</li> <li>Documenta\u00e7\u00e3o obrigat\u00f3ria</li> </ul>"},{"location":"pagamentos/visao-geral-iugu/#webhooks","title":"Webhooks","text":"<ul> <li>Timeout de 5 segundos</li> <li>Retry autom\u00e1tico 3x (1h, 6h, 24h)</li> <li>Deve responder 200 OK rapidamente</li> </ul>"},{"location":"pagamentos/visao-geral-iugu/#monitoramento","title":"Monitoramento","text":""},{"location":"pagamentos/visao-geral-iugu/#dashboard-iugu","title":"Dashboard Iugu","text":"<ul> <li>Transa\u00e7\u00f5es em tempo real</li> <li>Status de subcontas</li> <li>Relat\u00f3rios financeiros</li> <li>Gest\u00e3o de invoices</li> </ul>"},{"location":"pagamentos/visao-geral-iugu/#nossa-aplicacao","title":"Nossa Aplica\u00e7\u00e3o","text":"<ul> <li>Tabela <code>payments</code> - todos os pagamentos</li> <li>Tabela <code>incomes</code> - distribui\u00e7\u00e3o detalhada</li> <li>Logs de webhooks</li> <li>Alertas de falhas</li> </ul>"},{"location":"pagamentos/visao-geral-iugu/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<p>Aprofunde-se nos t\u00f3picos espec\u00edficos: - Conta Master e Subcontas - Arquitetura detalhada - Processo KYC - Como aprovar Promoters/Influencers - Split de Pagamento - C\u00e1lculo e distribui\u00e7\u00e3o - Webhooks - Processamento de eventos</p>"},{"location":"pagamentos/visao-geral-iugu/#recursos-externos","title":"Recursos Externos","text":"<ul> <li>Documenta\u00e7\u00e3o Oficial Iugu</li> <li>API Reference</li> <li>Webhooks</li> <li>Marketplace</li> </ul>"},{"location":"pagamentos/webhooks/","title":"Webhooks do Iugu","text":""},{"location":"pagamentos/webhooks/#o-que-sao-webhooks","title":"O que s\u00e3o Webhooks?","text":"<p>Webhooks s\u00e3o notifica\u00e7\u00f5es HTTP autom\u00e1ticas enviadas pelo Iugu para informar a aplica\u00e7\u00e3o sobre eventos importantes, como mudan\u00e7as de status de pagamento.</p> <pre><code>sequenceDiagram\n    participant U as Usu\u00e1rio\n    participant I as Iugu\n    participant W as Webhook Endpoint\n    participant B as Backend\n    participant D as Database\n\n    U-&gt;&gt;I: Realiza pagamento\n    I-&gt;&gt;I: Processa pagamento\n    I-&gt;&gt;I: Status: pending \u2192 paid\n    I-&gt;&gt;W: POST /api/webhook/iugu&lt;br/&gt;{event, data}\n    W-&gt;&gt;W: Valida assinatura\n    W-&gt;&gt;B: Processa evento\n    B-&gt;&gt;D: Atualiza payment\n    B-&gt;&gt;D: Cria incomes\n    B--&gt;&gt;W: 200 OK\n    W--&gt;&gt;I: 200 OK\n\n    Note over I: Se n\u00e3o receber 200:&lt;br/&gt;Retry ap\u00f3s 1h, 6h, 24h</code></pre>"},{"location":"pagamentos/webhooks/#por-que-usar-webhooks","title":"Por que Usar Webhooks?","text":""},{"location":"pagamentos/webhooks/#sem-webhooks-polling","title":"Sem Webhooks (Polling)","text":"<pre><code>\u274c Backend precisa consultar status periodicamente\n\u274c Atraso na confirma\u00e7\u00e3o\n\u274c Sobrecarga de requisi\u00e7\u00f5es \u00e0 API\n\u274c Complexidade de implementa\u00e7\u00e3o\n</code></pre>"},{"location":"pagamentos/webhooks/#com-webhooks","title":"Com Webhooks","text":"<pre><code>\u2705 Notifica\u00e7\u00e3o instant\u00e2nea\n\u2705 Sem polling necess\u00e1rio\n\u2705 Eficiente e escal\u00e1vel\n\u2705 Confi\u00e1vel (retry autom\u00e1tico)\n</code></pre>"},{"location":"pagamentos/webhooks/#eventos-do-iugu","title":"Eventos do Iugu","text":""},{"location":"pagamentos/webhooks/#eventos-de-invoice-fatura","title":"Eventos de Invoice (Fatura)","text":"Evento Descri\u00e7\u00e3o Quando acontece invoice.created Invoice criada Ao criar invoice programaticamente invoice.status_changed Status mudou Pagamento confirmado, cancelado, etc invoice.payment_failed Pagamento falhou Cart\u00e3o recusado, boleto n\u00e3o pago invoice.refunded Estorno realizado Admin ou Iugu estorna"},{"location":"pagamentos/webhooks/#eventos-de-subconta","title":"Eventos de Subconta","text":"Evento Descri\u00e7\u00e3o Quando acontece account.verified Subconta verificada KYC aprovado pelo Iugu account.updated Dados atualizados Altera\u00e7\u00e3o de dados banc\u00e1rios"},{"location":"pagamentos/webhooks/#status-de-invoice","title":"Status de Invoice","text":"Status Descri\u00e7\u00e3o A\u00e7\u00e3o do Backend pending Aguardando pagamento Nenhuma paid Pago \u2705 Confirmar payment, criar incomes canceled Cancelado Cancelar order refunded Estornado Reverter incomes expired Expirado Marcar como expirado partially_paid Pago parcialmente Aguardar confirma\u00e7\u00e3o total"},{"location":"pagamentos/webhooks/#configuracao","title":"Configura\u00e7\u00e3o","text":""},{"location":"pagamentos/webhooks/#1-configurar-url-no-painel-iugu","title":"1. Configurar URL no Painel Iugu","text":"<p>Acessar: <code>Dashboard Iugu &gt; Configura\u00e7\u00f5es &gt; Webhooks</code></p> <p>URL de Produ\u00e7\u00e3o: <code>https://api.amasso.com.br/api/webhook/iugu</code></p> <p>URL de Dev: <code>https://dev-api.amasso.com.br/api/webhook/iugu</code> ou usar ngrok: <pre><code>ngrok http 7080\n# URL gerada: https://abc123.ngrok.io\n# Configurar: https://abc123.ngrok.io/api/webhook/iugu\n</code></pre></p> <p>Eventos a assinar: - \u2705 invoice.status_changed - \u2705 invoice.refunded - \u2705 invoice.payment_failed - \u2705 account.verified</p>"},{"location":"pagamentos/webhooks/#2-secret-para-validacao","title":"2. Secret para Valida\u00e7\u00e3o","text":"<p>O Iugu gera um Webhook Secret \u00fanico. Copiar e configurar:</p> <pre><code>// appsettings.json\n{\n  \"Iugu\": {\n    \"ApiToken\": \"...\",\n    \"MasterAccountId\": \"...\",\n    \"WebhookSecret\": \"SEU_SECRET_AQUI\"\n  }\n}\n</code></pre>"},{"location":"pagamentos/webhooks/#implementacao","title":"Implementa\u00e7\u00e3o","text":""},{"location":"pagamentos/webhooks/#endpoint-do-webhook","title":"Endpoint do Webhook","text":"<pre><code>// WebHookEndpoint.cs\npublic static class WebHookEndpoints\n{\n    public static void MapWebHookEndpoints(this IEndpointRouteBuilder app)\n    {\n        var group = app.MapGroup(\"/api/webhook\");\n\n        // N\u00e3o requer autentica\u00e7\u00e3o JWT (usa valida\u00e7\u00e3o de assinatura)\n        group.MapPost(\"/iugu\", HandleIuguWebhook);\n    }\n\n    [AllowAnonymous]\n    private static async Task&lt;IResult&gt; HandleIuguWebhook(\n        HttpContext context,\n        [FromServices] IPaymentService paymentService,\n        [FromServices] IConfiguration config)\n    {\n        // 1. Ler body\n        context.Request.EnableBuffering();\n        var body = await new StreamReader(context.Request.Body).ReadToEndAsync();\n        context.Request.Body.Position = 0;\n\n        // 2. Validar assinatura\n        var signature = context.Request.Headers[\"X-Hub-Signature\"].ToString();\n        if (!ValidateSignature(body, signature, config[\"Iugu:WebhookSecret\"]))\n        {\n            return Results.Unauthorized();\n        }\n\n        // 3. Deserializar\n        var webhook = JsonSerializer.Deserialize&lt;IuguWebhookDto&gt;(body);\n\n        // 4. Processar evento\n        try\n        {\n            switch (webhook.Event)\n            {\n                case \"invoice.status_changed\":\n                    await HandleInvoiceStatusChanged(webhook.Data, paymentService);\n                    break;\n\n                case \"invoice.refunded\":\n                    await HandleInvoiceRefunded(webhook.Data, paymentService);\n                    break;\n\n                case \"invoice.payment_failed\":\n                    await HandlePaymentFailed(webhook.Data, paymentService);\n                    break;\n\n                default:\n                    // Evento n\u00e3o tratado, mas retorna 200 OK\n                    break;\n            }\n\n            return Results.Ok();\n        }\n        catch (Exception ex)\n        {\n            // Log erro mas retorna 200 para n\u00e3o gerar retry\n            // (se for erro de l\u00f3gica, n\u00e3o adianta retry)\n            _logger.LogError(ex, \"Erro ao processar webhook Iugu\");\n            return Results.Ok(); // ou Results.StatusCode(500) para retry\n        }\n    }\n\n    private static bool ValidateSignature(string body, string signature, string secret)\n    {\n        if (string.IsNullOrEmpty(signature))\n            return false;\n\n        // Iugu envia: sha256=&lt;hash&gt;\n        var expectedHash = signature.Replace(\"sha256=\", \"\");\n\n        using var hmac = new HMACSHA256(Encoding.UTF8.GetBytes(secret));\n        var hash = hmac.ComputeHash(Encoding.UTF8.GetBytes(body));\n        var computedHash = BitConverter.ToString(hash).Replace(\"-\", \"\").ToLower();\n\n        return computedHash.Equals(expectedHash, StringComparison.OrdinalIgnoreCase);\n    }\n\n    private static async Task HandleInvoiceStatusChanged(\n        IuguWebhookDataDto data,\n        IPaymentService paymentService)\n    {\n        if (data.Status == \"paid\")\n        {\n            await paymentService.ConfirmPaymentAsync(data.Id);\n        }\n        else if (data.Status == \"canceled\")\n        {\n            await paymentService.CancelPaymentAsync(data.Id);\n        }\n        else if (data.Status == \"expired\")\n        {\n            await paymentService.ExpirePaymentAsync(data.Id);\n        }\n    }\n\n    private static async Task HandleInvoiceRefunded(\n        IuguWebhookDataDto data,\n        IPaymentService paymentService)\n    {\n        await paymentService.RefundPaymentAsync(data.Id);\n    }\n\n    private static async Task HandlePaymentFailed(\n        IuguWebhookDataDto data,\n        IPaymentService paymentService)\n    {\n        await paymentService.MarkPaymentFailedAsync(data.Id);\n    }\n}\n</code></pre>"},{"location":"pagamentos/webhooks/#dtos-do-webhook","title":"DTOs do Webhook","text":"<pre><code>public class IuguWebhookDto\n{\n    [JsonPropertyName(\"event\")]\n    public string Event { get; set; }\n\n    [JsonPropertyName(\"data\")]\n    public IuguWebhookDataDto Data { get; set; }\n}\n\npublic class IuguWebhookDataDto\n{\n    [JsonPropertyName(\"id\")]\n    public string Id { get; set; } // Invoice ID\n\n    [JsonPropertyName(\"status\")]\n    public string Status { get; set; }\n\n    [JsonPropertyName(\"total_cents\")]\n    public int TotalCents { get; set; }\n\n    [JsonPropertyName(\"paid_at\")]\n    public DateTime? PaidAt { get; set; }\n\n    [JsonPropertyName(\"payer_email\")]\n    public string PayerEmail { get; set; }\n\n    // ... outros campos conforme necess\u00e1rio\n}\n</code></pre>"},{"location":"pagamentos/webhooks/#processamento-do-pagamento","title":"Processamento do Pagamento","text":"<pre><code>// PaymentService.cs\npublic async Task ConfirmPaymentAsync(string iuguInvoiceId)\n{\n    var payment = await _context.Payments\n        .Include(p =&gt; p.Order)\n        .ThenInclude(o =&gt; o.Video)\n        .ThenInclude(v =&gt; v.OwnerVideos)\n        .ThenInclude(ov =&gt; ov.Owner)\n        .FirstOrDefaultAsync(p =&gt; p.IuguInvoiceId == iuguInvoiceId);\n\n    if (payment == null)\n    {\n        _logger.LogWarning(\"Payment n\u00e3o encontrado para invoice {InvoiceId}\", iuguInvoiceId);\n        return; // N\u00e3o falha, pode ser invoice de outra opera\u00e7\u00e3o\n    }\n\n    // Verificar se j\u00e1 foi processado (idempot\u00eancia)\n    if (payment.Status == PaymentStatusEnum.Paid)\n    {\n        _logger.LogInformation(\n            \"Payment {PaymentId} j\u00e1 confirmado anteriormente\",\n            payment.Id);\n        return;\n    }\n\n    using var transaction = await _context.Database.BeginTransactionAsync();\n    try\n    {\n        // 1. Atualizar payment\n        payment.Status = PaymentStatusEnum.Paid;\n        payment.IuguPaidAt = DateTime.UtcNow;\n        payment.UpdatedAt = DateTime.UtcNow;\n\n        // 2. Criar incomes\n        var incomes = CreateIncomesForOrder(payment.Order);\n        await _context.Incomes.AddRangeAsync(incomes);\n\n        // 3. Criar notifica\u00e7\u00e3o de confirma\u00e7\u00e3o\n        var notification = new Notification\n        {\n            Type = NotificationTypeEnum.PaymentConfirmed,\n            Channel = payment.Order.User.NotificationPreference,\n            MetadataJson = JsonSerializer.Serialize(new\n            {\n                Email = payment.Order.User.Email,\n                PhoneNumber = payment.Order.User.Telephone,\n                Name = payment.Order.User.FirstName,\n                VideoTitle = payment.Order.Video.Title,\n                Amount = payment.Order.Amount / 100m,\n                OrderId = payment.Order.Id\n            })\n        };\n\n        await _context.Notifications.AddAsync(notification);\n\n        await _context.SaveChangesAsync();\n        await transaction.CommitAsync();\n\n        _logger.LogInformation(\n            \"Payment {PaymentId} confirmado com sucesso. {IncomeCount} incomes criados\",\n            payment.Id, incomes.Count);\n    }\n    catch (Exception ex)\n    {\n        await transaction.RollbackAsync();\n        _logger.LogError(ex, \"Erro ao confirmar payment {PaymentId}\", payment.Id);\n        throw;\n    }\n}\n\nprivate List&lt;Income&gt; CreateIncomesForOrder(Order order)\n{\n    var incomes = new List&lt;Income&gt;();\n\n    // Plataforma\n    incomes.Add(new Income\n    {\n        OrderId = order.Id,\n        OwnerId = null,\n        Amount = order.PlatformAmount,\n        Type = IncomeTypeEnum.Platform,\n        Description = \"Comiss\u00e3o da plataforma\",\n        CreatedAt = DateTime.UtcNow\n    });\n\n    // Owner (Influencer)\n    var owner = order.Video.OwnerVideos.First().Owner;\n    incomes.Add(new Income\n    {\n        OrderId = order.Id,\n        OwnerId = owner.Id,\n        Amount = order.OwnerAmount,\n        Type = IncomeTypeEnum.Owner,\n        Description = $\"Venda: {order.Video.Title}\",\n        CreatedAt = DateTime.UtcNow\n    });\n\n    // Promoter (se houver)\n    if (order.PromoterId.HasValue &amp;&amp; order.PromoterAmount &gt; 0)\n    {\n        incomes.Add(new Income\n        {\n            OrderId = order.Id,\n            OwnerId = order.PromoterId.Value,\n            Amount = order.PromoterAmount,\n            Type = IncomeTypeEnum.Promoter,\n            Description = $\"Comiss\u00e3o: {order.Video.Title}\",\n            CreatedAt = DateTime.UtcNow\n        });\n    }\n\n    return incomes;\n}\n</code></pre>"},{"location":"pagamentos/webhooks/#idempotencia","title":"Idempot\u00eancia","text":"<p>\u00c9 crucial garantir que o mesmo webhook n\u00e3o seja processado m\u00faltiplas vezes:</p> <pre><code>// Verificar status antes de processar\nif (payment.Status == PaymentStatusEnum.Paid)\n{\n    _logger.LogInformation(\"Payment j\u00e1 processado, ignorando\");\n    return; // N\u00e3o processa novamente\n}\n\n// Usar transa\u00e7\u00e3o para garantir atomicidade\nusing var transaction = await _context.Database.BeginTransactionAsync();\ntry\n{\n    // Processar\n    await _context.SaveChangesAsync();\n    await transaction.CommitAsync();\n}\ncatch\n{\n    await transaction.RollbackAsync();\n    throw;\n}\n</code></pre>"},{"location":"pagamentos/webhooks/#retry-automatico-do-iugu","title":"Retry Autom\u00e1tico do Iugu","text":"<p>Se o endpoint n\u00e3o responder 200 OK:</p> <pre><code>graph TD\n    A[Webhook Falha] --&gt; B[Aguarda 1 hora]\n    B --&gt; C[Retry 1]\n    C --&gt; D{200 OK?}\n    D --&gt;|Sim| E[Sucesso]\n    D --&gt;|N\u00e3o| F[Aguarda 6 horas]\n    F --&gt; G[Retry 2]\n    G --&gt; H{200 OK?}\n    H --&gt;|Sim| E\n    H --&gt;|N\u00e3o| I[Aguarda 24 horas]\n    I --&gt; J[Retry 3]\n    J --&gt; K{200 OK?}\n    K --&gt;|Sim| E\n    K --&gt;|N\u00e3o| L[Desiste]</code></pre> <p>Importante:  - Responder 200 OK rapidamente (&lt; 5 segundos) - Processar de forma ass\u00edncrona se necess\u00e1rio - Log detalhado para debug</p>"},{"location":"pagamentos/webhooks/#logging-de-webhooks","title":"Logging de Webhooks","text":"<pre><code>// Middleware para log\napp.Use(async (context, next) =&gt;\n{\n    if (context.Request.Path.StartsWithSegments(\"/api/webhook\"))\n    {\n        context.Request.EnableBuffering();\n        var body = await new StreamReader(context.Request.Body).ReadToEndAsync();\n        context.Request.Body.Position = 0;\n\n        _logger.LogInformation(\n            \"Webhook recebido: {Method} {Path}\\nHeaders: {Headers}\\nBody: {Body}\",\n            context.Request.Method,\n            context.Request.Path,\n            JsonSerializer.Serialize(context.Request.Headers),\n            body\n        );\n    }\n\n    await next();\n});\n</code></pre>"},{"location":"pagamentos/webhooks/#testando-webhooks","title":"Testando Webhooks","text":""},{"location":"pagamentos/webhooks/#1-usar-ngrok-para-dev-local","title":"1. Usar Ngrok para Dev Local","text":"<pre><code># Terminal 1: Rodar aplica\u00e7\u00e3o\ndotnet run\n\n# Terminal 2: Expor localhost\nngrok http 7080\n\n# Copiar URL: https://abc123.ngrok.io\n# Configurar no Iugu: https://abc123.ngrok.io/api/webhook/iugu\n</code></pre>"},{"location":"pagamentos/webhooks/#2-simular-webhook-manualmente","title":"2. Simular Webhook Manualmente","text":"<pre><code>curl -X POST https://localhost:7080/api/webhook/iugu \\\n  -H \"Content-Type: application/json\" \\\n  -H \"X-Hub-Signature: sha256=SEU_HASH_AQUI\" \\\n  -d '{\n    \"event\": \"invoice.status_changed\",\n    \"data\": {\n      \"id\": \"INVOICE_ID_AQUI\",\n      \"status\": \"paid\",\n      \"total_cents\": 10000,\n      \"paid_at\": \"2025-10-16T10:00:00Z\"\n    }\n  }'\n</code></pre>"},{"location":"pagamentos/webhooks/#3-usar-ferramentas-do-iugu","title":"3. Usar Ferramentas do Iugu","text":"<p>Dashboard Iugu &gt; Webhooks &gt; Ver Eventos: - Ver webhooks enviados - Status de entrega - Retry manual - Payload completo</p>"},{"location":"pagamentos/webhooks/#seguranca","title":"Seguran\u00e7a","text":""},{"location":"pagamentos/webhooks/#validacao-de-assinatura","title":"Valida\u00e7\u00e3o de Assinatura","text":"<pre><code>private static bool ValidateSignature(string body, string signature, string secret)\n{\n    // Iugu usa HMAC-SHA256\n    var expectedHash = signature.Replace(\"sha256=\", \"\");\n\n    using var hmac = new HMACSHA256(Encoding.UTF8.GetBytes(secret));\n    var hash = hmac.ComputeHash(Encoding.UTF8.GetBytes(body));\n    var computedHash = BitConverter.ToString(hash)\n        .Replace(\"-\", \"\")\n        .ToLower();\n\n    return computedHash.Equals(expectedHash, StringComparison.OrdinalIgnoreCase);\n}\n</code></pre>"},{"location":"pagamentos/webhooks/#whitelist-de-ips-opcional","title":"Whitelist de IPs (Opcional)","text":"<pre><code>// Middleware para validar IP\napp.Use(async (context, next) =&gt;\n{\n    if (context.Request.Path.StartsWithSegments(\"/api/webhook/iugu\"))\n    {\n        var remoteIp = context.Connection.RemoteIpAddress?.ToString();\n        var allowedIps = new[] { \"18.231.194.64\", \"18.231.194.65\" }; // IPs do Iugu\n\n        if (!allowedIps.Contains(remoteIp))\n        {\n            context.Response.StatusCode = 403;\n            return;\n        }\n    }\n\n    await next();\n});\n</code></pre>"},{"location":"pagamentos/webhooks/#monitoramento","title":"Monitoramento","text":""},{"location":"pagamentos/webhooks/#alertas","title":"Alertas","text":"<ul> <li>\u274c Webhook falhou 3x seguidas</li> <li>\u274c Nenhum webhook recebido em 24h (se houver vendas esperadas)</li> <li>\u26a0\ufe0f Tempo de processamento &gt; 3 segundos</li> <li>\u26a0\ufe0f Valida\u00e7\u00e3o de assinatura falhou</li> </ul>"},{"location":"pagamentos/webhooks/#metricas","title":"M\u00e9tricas","text":"<pre><code>// Prometheus ou Application Insights\n_metrics.IncrementCounter(\"webhooks_received_total\", \n    new[] { \"event\", webhook.Event });\n\n_metrics.RecordHistogram(\"webhook_processing_duration_seconds\", \n    duration.TotalSeconds);\n\n_metrics.IncrementCounter(\"webhook_errors_total\",\n    new[] { \"event\", webhook.Event, \"error\", ex.GetType().Name });\n</code></pre>"},{"location":"pagamentos/webhooks/#troubleshooting","title":"Troubleshooting","text":""},{"location":"pagamentos/webhooks/#webhook-nao-chegou","title":"Webhook n\u00e3o chegou","text":"<ul> <li>\u2705 Verificar URL configurada no Iugu</li> <li>\u2705 Verificar se aplica\u00e7\u00e3o est\u00e1 acess\u00edvel (firewall, DNS)</li> <li>\u2705 Checar logs do Iugu (Dashboard &gt; Webhooks)</li> <li>\u2705 Usar ngrok para testar localmente</li> </ul>"},{"location":"pagamentos/webhooks/#webhook-falhou","title":"Webhook falhou","text":"<ul> <li>\u2705 Ver logs detalhados</li> <li>\u2705 Verificar se valida\u00e7\u00e3o de assinatura est\u00e1 OK</li> <li>\u2705 Garantir resposta 200 OK r\u00e1pida</li> <li>\u2705 Checar timeout (&lt; 5s)</li> </ul>"},{"location":"pagamentos/webhooks/#processamento-duplicado","title":"Processamento duplicado","text":"<ul> <li>\u2705 Implementar idempot\u00eancia</li> <li>\u2705 Verificar status antes de processar</li> <li>\u2705 Usar transa\u00e7\u00f5es</li> </ul>"},{"location":"pagamentos/webhooks/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<ul> <li>Veja Casos de Uso &gt; Compra de V\u00eddeo para fluxo completo</li> <li>Entenda o Split de Pagamento executado ap\u00f3s webhook</li> <li>Consulte Fluxos &gt; Compra para contexto</li> </ul>"},{"location":"perfis-de-usuario/admin/","title":"Perfil: Admin","text":""},{"location":"perfis-de-usuario/admin/#descricao","title":"Descri\u00e7\u00e3o","text":"<p>O Admin \u00e9 o administrador da plataforma Amasso, com acesso total ao sistema para gerenciar usu\u00e1rios, v\u00eddeos, configura\u00e7\u00f5es e aprovar processos de KYC.</p>"},{"location":"perfis-de-usuario/admin/#caracteristicas","title":"Caracter\u00edsticas","text":"<ul> <li>\u2705 Acesso Total: Todas as funcionalidades da plataforma</li> <li>\u2705 Gest\u00e3o de Usu\u00e1rios: Criar, editar, desativar usu\u00e1rios</li> <li>\u2705 Gest\u00e3o de V\u00eddeos: Upload, configura\u00e7\u00e3o de pre\u00e7os e comiss\u00f5es</li> <li>\u2705 Aprova\u00e7\u00e3o de KYC: Revisar e aprovar documentos de Promoters/Influencers</li> <li>\u2705 Relat\u00f3rios Financeiros: Vis\u00e3o completa de vendas e comiss\u00f5es</li> <li>\u274c N\u00e3o Recebe Comiss\u00f5es: N\u00e3o participa do split de pagamento</li> </ul>"},{"location":"perfis-de-usuario/admin/#permissoes","title":"Permiss\u00f5es","text":""},{"location":"perfis-de-usuario/admin/#endpoints-exclusivos","title":"Endpoints Exclusivos","text":"<pre><code>// AdminEndpoints.cs\nvar group = app.MapGroup(\"/api/admin\")\n    .RequireAuthorization()\n    .RequireRole(\"Admin\"); // Apenas Admin pode acessar\n\n// Gest\u00e3o de Usu\u00e1rios\ngroup.MapGet(\"/users\", GetAllUsers);\ngroup.MapPut(\"/users/{id}/activate\", ActivateUser);\ngroup.MapPut(\"/users/{id}/deactivate\", DeactivateUser);\n\n// Gest\u00e3o de KYC\ngroup.MapGet(\"/kyc/pending\", GetPendingKyc);\ngroup.MapPost(\"/kyc/{ownerId}/approve\", ApproveKyc);\ngroup.MapPost(\"/kyc/{ownerId}/reject\", RejectKyc);\n\n// Gest\u00e3o de V\u00eddeos\ngroup.MapPost(\"/videos\", CreateVideo);\ngroup.MapPut(\"/videos/{id}\", UpdateVideo);\ngroup.MapDelete(\"/videos/{id}\", DeleteVideo);\ngroup.MapPost(\"/videos/{id}/revenue-config\", ConfigureRevenue);\n\n// Relat\u00f3rios\ngroup.MapGet(\"/reports/sales\", GetSalesReport);\ngroup.MapGet(\"/reports/commissions\", GetCommissionsReport);\n</code></pre>"},{"location":"perfis-de-usuario/admin/#dashboard","title":"Dashboard","text":"<pre><code>graph TD\n    A[Dashboard Admin] --&gt; B[Usu\u00e1rios]\n    A --&gt; C[V\u00eddeos]\n    A --&gt; D[KYC Pendentes]\n    A --&gt; E[Vendas]\n    A --&gt; F[Comiss\u00f5es]\n    A --&gt; G[Configura\u00e7\u00f5es]\n\n    B --&gt; B1[Listar Usu\u00e1rios]\n    B --&gt; B2[Criar Usu\u00e1rio]\n    B --&gt; B3[Ativar/Desativar]\n\n    C --&gt; C1[Listar V\u00eddeos]\n    C --&gt; C2[Upload V\u00eddeo]\n    C --&gt; C3[Configurar Pre\u00e7o]\n    C --&gt; C4[Configurar Comiss\u00f5es]\n\n    D --&gt; D1[Revisar Documentos]\n    D --&gt; D2[Aprovar KYC]\n    D --&gt; D3[Rejeitar KYC]\n\n    E --&gt; E1[Total de Vendas]\n    E --&gt; E2[Vendas por V\u00eddeo]\n    E --&gt; E3[Vendas por Per\u00edodo]\n\n    F --&gt; F1[Total de Comiss\u00f5es]\n    F --&gt; F2[Por Promoter]\n    F --&gt; F3[Por Influencer]</code></pre>"},{"location":"perfis-de-usuario/admin/#principais-funcionalidades","title":"Principais Funcionalidades","text":""},{"location":"perfis-de-usuario/admin/#1-gestao-de-usuarios","title":"1. Gest\u00e3o de Usu\u00e1rios","text":""},{"location":"perfis-de-usuario/admin/#listar-todos-os-usuarios","title":"Listar Todos os Usu\u00e1rios","text":"<pre><code>// Frontend - AdminUsers.tsx\nexport const AdminUsers: React.FC = () =&gt; {\n  const [users, setUsers] = useState&lt;User[]&gt;([]);\n  const [filters, setFilters] = useState({\n    type: 'all', // all, Admin, Default, Promoter, Influencer\n    status: 'all', // all, active, inactive\n    search: ''\n  });\n\n  useEffect(() =&gt; {\n    const fetchUsers = async () =&gt; {\n      const data = await adminApi.getUsers(filters);\n      setUsers(data);\n    };\n    fetchUsers();\n  }, [filters]);\n\n  return (\n    &lt;Box&gt;\n      &lt;Typography variant=\"h4\"&gt;Gerenciar Usu\u00e1rios&lt;/Typography&gt;\n\n      &lt;Box sx={{ mb: 2 }}&gt;\n        &lt;TextField \n          label=\"Buscar\" \n          value={filters.search}\n          onChange={(e) =&gt; setFilters({...filters, search: e.target.value})}\n        /&gt;\n        &lt;Select \n          value={filters.type}\n          onChange={(e) =&gt; setFilters({...filters, type: e.target.value})}\n        &gt;\n          &lt;MenuItem value=\"all\"&gt;Todos&lt;/MenuItem&gt;\n          &lt;MenuItem value=\"Default\"&gt;Default&lt;/MenuItem&gt;\n          &lt;MenuItem value=\"Promoter\"&gt;Promoter&lt;/MenuItem&gt;\n          &lt;MenuItem value=\"Influencer\"&gt;Influencer&lt;/MenuItem&gt;\n        &lt;/Select&gt;\n      &lt;/Box&gt;\n\n      &lt;TableContainer&gt;\n        &lt;Table&gt;\n          &lt;TableHead&gt;\n            &lt;TableRow&gt;\n              &lt;TableCell&gt;ID&lt;/TableCell&gt;\n              &lt;TableCell&gt;Nome&lt;/TableCell&gt;\n              &lt;TableCell&gt;Email&lt;/TableCell&gt;\n              &lt;TableCell&gt;Tipo&lt;/TableCell&gt;\n              &lt;TableCell&gt;Status&lt;/TableCell&gt;\n              &lt;TableCell&gt;A\u00e7\u00f5es&lt;/TableCell&gt;\n            &lt;/TableRow&gt;\n          &lt;/TableHead&gt;\n          &lt;TableBody&gt;\n            {users.map(user =&gt; (\n              &lt;TableRow key={user.id}&gt;\n                &lt;TableCell&gt;{user.id}&lt;/TableCell&gt;\n                &lt;TableCell&gt;{user.fullname}&lt;/TableCell&gt;\n                &lt;TableCell&gt;{user.email}&lt;/TableCell&gt;\n                &lt;TableCell&gt;\n                  &lt;Chip label={user.type} color=\"primary\" /&gt;\n                &lt;/TableCell&gt;\n                &lt;TableCell&gt;\n                  &lt;Chip \n                    label={user.isActive ? 'Ativo' : 'Inativo'} \n                    color={user.isActive ? 'success' : 'default'}\n                  /&gt;\n                &lt;/TableCell&gt;\n                &lt;TableCell&gt;\n                  &lt;IconButton onClick={() =&gt; handleEdit(user.id)}&gt;\n                    &lt;EditIcon /&gt;\n                  &lt;/IconButton&gt;\n                  &lt;IconButton onClick={() =&gt; handleToggleStatus(user.id)}&gt;\n                    {user.isActive ? &lt;BlockIcon /&gt; : &lt;CheckIcon /&gt;}\n                  &lt;/IconButton&gt;\n                &lt;/TableCell&gt;\n              &lt;/TableRow&gt;\n            ))}\n          &lt;/TableBody&gt;\n        &lt;/Table&gt;\n      &lt;/TableContainer&gt;\n    &lt;/Box&gt;\n  );\n};\n</code></pre>"},{"location":"perfis-de-usuario/admin/#2-aprovacao-de-kyc","title":"2. Aprova\u00e7\u00e3o de KYC","text":""},{"location":"perfis-de-usuario/admin/#listar-kycs-pendentes","title":"Listar KYCs Pendentes","text":"<pre><code>// Frontend - AdminKyc.tsx\nexport const AdminKyc: React.FC = () =&gt; {\n  const [pendingKycs, setPendingKycs] = useState&lt;KycPending[]&gt;([]);\n  const [selectedKyc, setSelectedKyc] = useState&lt;KycPending | null&gt;(null);\n\n  const handleApprove = async (ownerId: number) =&gt; {\n    if (!confirm('Aprovar este KYC?')) return;\n\n    try {\n      await adminApi.approveKyc(ownerId);\n      toast.success('KYC aprovado!');\n      fetchPendingKycs(); // Recarregar lista\n    } catch (error) {\n      toast.error('Erro ao aprovar KYC');\n    }\n  };\n\n  const handleReject = async (ownerId: number) =&gt; {\n    const reason = prompt('Motivo da rejei\u00e7\u00e3o:');\n    if (!reason) return;\n\n    try {\n      await adminApi.rejectKyc(ownerId, reason);\n      toast.success('KYC rejeitado');\n      fetchPendingKycs();\n    } catch (error) {\n      toast.error('Erro ao rejeitar KYC');\n    }\n  };\n\n  return (\n    &lt;Grid container spacing={2}&gt;\n      &lt;Grid item xs={12} md={6}&gt;\n        &lt;Typography variant=\"h5\"&gt;KYCs Pendentes&lt;/Typography&gt;\n        &lt;List&gt;\n          {pendingKycs.map(kyc =&gt; (\n            &lt;ListItem key={kyc.ownerId}&gt;\n              &lt;ListItemText\n                primary={kyc.name}\n                secondary={`${kyc.type} - ${kyc.email}`}\n              /&gt;\n              &lt;Button onClick={() =&gt; setSelectedKyc(kyc)}&gt;\n                Revisar\n              &lt;/Button&gt;\n            &lt;/ListItem&gt;\n          ))}\n        &lt;/List&gt;\n      &lt;/Grid&gt;\n\n      &lt;Grid item xs={12} md={6}&gt;\n        {selectedKyc &amp;&amp; (\n          &lt;Paper sx={{ p: 2 }}&gt;\n            &lt;Typography variant=\"h6\"&gt;Documentos de {selectedKyc.name}&lt;/Typography&gt;\n\n            &lt;Box sx={{ my: 2 }}&gt;\n              &lt;Typography variant=\"subtitle2\"&gt;CPF&lt;/Typography&gt;\n              &lt;img src={selectedKyc.documentUrls.cpf} alt=\"CPF\" width=\"100%\" /&gt;\n            &lt;/Box&gt;\n\n            &lt;Box sx={{ my: 2 }}&gt;\n              &lt;Typography variant=\"subtitle2\"&gt;RG / CNH&lt;/Typography&gt;\n              &lt;img src={selectedKyc.documentUrls.rg} alt=\"RG\" width=\"100%\" /&gt;\n            &lt;/Box&gt;\n\n            &lt;Box sx={{ my: 2 }}&gt;\n              &lt;Typography variant=\"subtitle2\"&gt;Comprovante de Resid\u00eancia&lt;/Typography&gt;\n              &lt;img src={selectedKyc.documentUrls.addressProof} alt=\"Comprovante\" width=\"100%\" /&gt;\n            &lt;/Box&gt;\n\n            &lt;Box sx={{ my: 2 }}&gt;\n              &lt;Typography variant=\"subtitle2\"&gt;Selfie com Documento&lt;/Typography&gt;\n              &lt;img src={selectedKyc.documentUrls.selfie} alt=\"Selfie\" width=\"100%\" /&gt;\n            &lt;/Box&gt;\n\n            &lt;Box sx={{ my: 2 }}&gt;\n              &lt;Typography variant=\"subtitle2\"&gt;Dados Banc\u00e1rios&lt;/Typography&gt;\n              &lt;Typography&gt;Banco: {selectedKyc.bankData.bankCode}&lt;/Typography&gt;\n              &lt;Typography&gt;Ag\u00eancia: {selectedKyc.bankData.agency}&lt;/Typography&gt;\n              &lt;Typography&gt;Conta: {selectedKyc.bankData.account}&lt;/Typography&gt;\n              &lt;Typography&gt;Tipo: {selectedKyc.bankData.accountType}&lt;/Typography&gt;\n            &lt;/Box&gt;\n\n            &lt;Box sx={{ display: 'flex', gap: 2, mt: 3 }}&gt;\n              &lt;Button \n                variant=\"contained\" \n                color=\"success\"\n                onClick={() =&gt; handleApprove(selectedKyc.ownerId)}\n              &gt;\n                Aprovar KYC\n              &lt;/Button&gt;\n              &lt;Button \n                variant=\"contained\" \n                color=\"error\"\n                onClick={() =&gt; handleReject(selectedKyc.ownerId)}\n              &gt;\n                Rejeitar KYC\n              &lt;/Button&gt;\n            &lt;/Box&gt;\n          &lt;/Paper&gt;\n        )}\n      &lt;/Grid&gt;\n    &lt;/Grid&gt;\n  );\n};\n</code></pre>"},{"location":"perfis-de-usuario/admin/#3-gestao-de-videos","title":"3. Gest\u00e3o de V\u00eddeos","text":""},{"location":"perfis-de-usuario/admin/#upload-e-configuracao","title":"Upload e Configura\u00e7\u00e3o","text":"<pre><code>// Frontend - AdminVideoForm.tsx\nexport const AdminVideoForm: React.FC = () =&gt; {\n  const [formData, setFormData] = useState({\n    title: '',\n    description: '',\n    price: 0,\n    releaseDate: '',\n    videoFile: null as File | null,\n    thumbFile: null as File | null,\n    trailerFile: null as File | null,\n    // Comiss\u00f5es\n    platformPercentage: 20,\n    ownerPercentage: 50,\n    promoterPercentage: 30, // 0 = n\u00e3o dispon\u00edvel para links\n  });\n\n  const handleSubmit = async (e: React.FormEvent) =&gt; {\n    e.preventDefault();\n\n    // Validar percentuais somam 100\n    const total = formData.platformPercentage + \n                  formData.ownerPercentage + \n                  formData.promoterPercentage;\n\n    if (total !== 100) {\n      toast.error('Percentuais devem somar 100%');\n      return;\n    }\n\n    try {\n      const video = await adminApi.createVideo(formData);\n      toast.success('V\u00eddeo criado!');\n      navigate('/admin/videos');\n    } catch (error) {\n      toast.error('Erro ao criar v\u00eddeo');\n    }\n  };\n\n  return (\n    &lt;form onSubmit={handleSubmit}&gt;\n      &lt;TextField \n        label=\"T\u00edtulo\" \n        value={formData.title}\n        onChange={(e) =&gt; setFormData({...formData, title: e.target.value})}\n        required\n      /&gt;\n\n      &lt;TextField \n        label=\"Descri\u00e7\u00e3o\" \n        multiline\n        rows={4}\n        value={formData.description}\n        onChange={(e) =&gt; setFormData({...formData, description: e.target.value})}\n        required\n      /&gt;\n\n      &lt;TextField \n        label=\"Pre\u00e7o (R$)\" \n        type=\"number\"\n        value={formData.price}\n        onChange={(e) =&gt; setFormData({...formData, price: parseFloat(e.target.value)})}\n        required\n      /&gt;\n\n      &lt;TextField \n        label=\"Data de Lan\u00e7amento\" \n        type=\"date\"\n        value={formData.releaseDate}\n        onChange={(e) =&gt; setFormData({...formData, releaseDate: e.target.value})}\n        InputLabelProps={{ shrink: true }}\n        required\n      /&gt;\n\n      &lt;Typography variant=\"h6\" sx={{ mt: 3 }}&gt;Arquivos&lt;/Typography&gt;\n\n      &lt;FileInput \n        label=\"V\u00eddeo Principal\"\n        onChange={(file) =&gt; setFormData({...formData, videoFile: file})}\n        accept=\"video/*\"\n        required\n      /&gt;\n\n      &lt;FileInput \n        label=\"Thumbnail\"\n        onChange={(file) =&gt; setFormData({...formData, thumbFile: file})}\n        accept=\"image/*\"\n        required\n      /&gt;\n\n      &lt;FileInput \n        label=\"Trailer (opcional)\"\n        onChange={(file) =&gt; setFormData({...formData, trailerFile: file})}\n        accept=\"video/*\"\n      /&gt;\n\n      &lt;Typography variant=\"h6\" sx={{ mt: 3 }}&gt;Configura\u00e7\u00e3o de Comiss\u00f5es&lt;/Typography&gt;\n\n      &lt;Typography variant=\"caption\" color=\"text.secondary\"&gt;\n        Se Promoter = 0%, o v\u00eddeo n\u00e3o aparecer\u00e1 para gera\u00e7\u00e3o de links de afiliado\n      &lt;/Typography&gt;\n\n      &lt;TextField \n        label=\"Plataforma (%)\" \n        type=\"number\"\n        value={formData.platformPercentage}\n        onChange={(e) =&gt; setFormData({...formData, platformPercentage: parseFloat(e.target.value)})}\n        inputProps={{ min: 0, max: 100 }}\n      /&gt;\n\n      &lt;TextField \n        label=\"Owner/Influencer (%)\" \n        type=\"number\"\n        value={formData.ownerPercentage}\n        onChange={(e) =&gt; setFormData({...formData, ownerPercentage: parseFloat(e.target.value)})}\n        inputProps={{ min: 0, max: 100 }}\n      /&gt;\n\n      &lt;TextField \n        label=\"Promoter (%)\" \n        type=\"number\"\n        value={formData.promoterPercentage}\n        onChange={(e) =&gt; setFormData({...formData, promoterPercentage: parseFloat(e.target.value)})}\n        inputProps={{ min: 0, max: 100 }}\n      /&gt;\n\n      &lt;Typography variant=\"body2\" sx={{ mt: 1 }}&gt;\n        Total: {formData.platformPercentage + formData.ownerPercentage + formData.promoterPercentage}%\n        {(formData.platformPercentage + formData.ownerPercentage + formData.promoterPercentage) !== 100 &amp;&amp; (\n          &lt;span style={{ color: 'red' }}&gt; (deve ser 100%)&lt;/span&gt;\n        )}\n      &lt;/Typography&gt;\n\n      &lt;Button type=\"submit\" variant=\"contained\" sx={{ mt: 3 }}&gt;\n        Criar V\u00eddeo\n      &lt;/Button&gt;\n    &lt;/form&gt;\n  );\n};\n</code></pre>"},{"location":"perfis-de-usuario/admin/#4-relatorios","title":"4. Relat\u00f3rios","text":""},{"location":"perfis-de-usuario/admin/#dashboard-com-metricas","title":"Dashboard com M\u00e9tricas","text":"<pre><code>// Frontend - AdminDashboard.tsx\nexport const AdminDashboard: React.FC = () =&gt; {\n  const [metrics, setMetrics] = useState({\n    totalUsers: 0,\n    totalVideos: 0,\n    totalSales: 0,\n    totalRevenue: 0,\n    pendingKycs: 0,\n    recentOrders: [],\n  });\n\n  return (\n    &lt;Box&gt;\n      &lt;Typography variant=\"h4\"&gt;Dashboard Admin&lt;/Typography&gt;\n\n      &lt;Grid container spacing={3} sx={{ mt: 2 }}&gt;\n        &lt;Grid item xs={12} md={3}&gt;\n          &lt;StatCard \n            title=\"Total de Usu\u00e1rios\"\n            value={metrics.totalUsers}\n            icon={&lt;PeopleIcon /&gt;}\n          /&gt;\n        &lt;/Grid&gt;\n\n        &lt;Grid item xs={12} md={3}&gt;\n          &lt;StatCard \n            title=\"Total de V\u00eddeos\"\n            value={metrics.totalVideos}\n            icon={&lt;VideoIcon /&gt;}\n          /&gt;\n        &lt;/Grid&gt;\n\n        &lt;Grid item xs={12} md={3}&gt;\n          &lt;StatCard \n            title=\"Total de Vendas\"\n            value={metrics.totalSales}\n            icon={&lt;ShoppingIcon /&gt;}\n          /&gt;\n        &lt;/Grid&gt;\n\n        &lt;Grid item xs={12} md={3}&gt;\n          &lt;StatCard \n            title=\"Receita Total\"\n            value={`R$ ${metrics.totalRevenue.toFixed(2)}`}\n            icon={&lt;MoneyIcon /&gt;}\n          /&gt;\n        &lt;/Grid&gt;\n\n        {metrics.pendingKycs &gt; 0 &amp;&amp; (\n          &lt;Grid item xs={12}&gt;\n            &lt;Alert severity=\"warning\"&gt;\n              Existem {metrics.pendingKycs} KYCs pendentes de aprova\u00e7\u00e3o\n              &lt;Button component={Link} to=\"/admin/kyc\"&gt;\n                Revisar Agora\n              &lt;/Button&gt;\n            &lt;/Alert&gt;\n          &lt;/Grid&gt;\n        )}\n\n        &lt;Grid item xs={12}&gt;\n          &lt;Typography variant=\"h6\"&gt;Vendas Recentes&lt;/Typography&gt;\n          &lt;RecentOrdersTable orders={metrics.recentOrders} /&gt;\n        &lt;/Grid&gt;\n      &lt;/Grid&gt;\n    &lt;/Box&gt;\n  );\n};\n</code></pre>"},{"location":"perfis-de-usuario/admin/#fluxos-tipicos","title":"Fluxos T\u00edpicos","text":""},{"location":"perfis-de-usuario/admin/#fluxo-aprovar-kyc-de-promoter","title":"Fluxo: Aprovar KYC de Promoter","text":"<pre><code>flowchart TD\n    A[Admin acessa Dashboard] --&gt; B[V\u00ea alerta de KYC pendente]\n    B --&gt; C[Clica em Revisar]\n    C --&gt; D[Lista de KYCs pendentes]\n    D --&gt; E[Seleciona um KYC]\n    E --&gt; F[Revisa documentos]\n    F --&gt; G{Documentos OK?}\n    G --&gt;|Sim| H[Clica em Aprovar]\n    G --&gt;|N\u00e3o| I[Clica em Rejeitar]\n    H --&gt; J[Confirma aprova\u00e7\u00e3o]\n    J --&gt; K[Sistema ativa subconta Iugu]\n    K --&gt; L[Promoter \u00e9 notificado]\n    L --&gt; M[Promoter pode operar]\n    I --&gt; N[Informa motivo]\n    N --&gt; O[Promoter \u00e9 notificado]\n    O --&gt; P[Promoter corrige e reenvia]</code></pre>"},{"location":"perfis-de-usuario/admin/#acesso-ao-sistema","title":"Acesso ao Sistema","text":""},{"location":"perfis-de-usuario/admin/#login","title":"Login","text":"<pre><code>const login = async () =&gt; {\n  const response = await authApi.login({\n    email: 'admin@amasso.com',\n    password: 'senha_segura',\n    signInWith: 'Admin' // Importante: tipo correto\n  });\n\n  // MFA ser\u00e1 solicitado\n  if (response.requiresMfa) {\n    // Redirecionar para tela de MFA\n  }\n};\n</code></pre>"},{"location":"perfis-de-usuario/admin/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<ul> <li>Veja outros perfis:</li> <li>Default - Usu\u00e1rio que compra v\u00eddeos</li> <li>Promoter - Divulgador com links de afiliado</li> <li>Influencer - Criador de conte\u00fado</li> <li>Consulte Casos de Uso &gt; Gest\u00e3o Admin</li> </ul>"},{"location":"perfis-de-usuario/default/","title":"Perfil: Usu\u00e1rio Default (Comprador)","text":""},{"location":"perfis-de-usuario/default/#descricao","title":"Descri\u00e7\u00e3o","text":"<p>O usu\u00e1rio Default \u00e9 o perfil padr\u00e3o da plataforma Amasso. Representa os compradores de v\u00eddeos que buscam conte\u00fado exclusivo e pagam para ter acesso.</p>"},{"location":"perfis-de-usuario/default/#caracteristicas","title":"Caracter\u00edsticas","text":"<ul> <li>\ud83d\uded2 Fun\u00e7\u00e3o principal: Comprar e assistir v\u00eddeos</li> <li>\ud83d\udce7 Email necess\u00e1rio: Sim (cadastro obrigat\u00f3rio)</li> <li>\ud83d\udd10 KYC necess\u00e1rio: N\u00e3o</li> <li>\ud83d\udcb3 Recebe comiss\u00f5es: N\u00e3o</li> <li>\ud83d\udcf1 Subconta Iugu: N\u00e3o</li> </ul>"},{"location":"perfis-de-usuario/default/#jornada-do-usuario","title":"Jornada do Usu\u00e1rio","text":"<pre><code>graph TD\n    A[Cadastro] --&gt; B[Ativa\u00e7\u00e3o por Email]\n    B --&gt; C[Login]\n    C --&gt; D{MFA Habilitado?}\n    D --&gt;|Sim| E[C\u00f3digo MFA]\n    D --&gt;|N\u00e3o| F[Dashboard]\n    E --&gt; F\n    F --&gt; G[Buscar V\u00eddeos]\n    G --&gt; H{Link de Afiliado?}\n    H --&gt;|Sim| I[Aplicar Link do Promoter]\n    H --&gt;|N\u00e3o| J[Compra Direta]\n    I --&gt; K[Ir para Checkout]\n    J --&gt; K\n    K --&gt; L[Pagamento Iugu]\n    L --&gt; M{Pagamento OK?}\n    M --&gt;|Sim| N[Acesso Liberado]\n    M --&gt;|N\u00e3o| O[Tentar Novamente]\n    N --&gt; P[Assistir V\u00eddeo]</code></pre>"},{"location":"perfis-de-usuario/default/#funcionalidades","title":"Funcionalidades","text":""},{"location":"perfis-de-usuario/default/#1-cadastro-e-autenticacao","title":"1. Cadastro e Autentica\u00e7\u00e3o","text":""},{"location":"perfis-de-usuario/default/#cadastro","title":"Cadastro","text":"<pre><code>// frontend-react/src/pages/Auth/Register.tsx\nconst handleRegister = async (data: RegisterDto) =&gt; {\n  const response = await authApi.register({\n    email: data.email,\n    password: data.password,\n    firstName: data.firstName,\n    lastName: data.lastName,\n    birthDate: data.birthDate,\n    cpf: data.cpf,\n    telephone: data.telephone,\n    type: UserTypeEnum.Default // Padr\u00e3o\n  });\n\n  toast.success(\"Cadastro realizado! Verifique seu email.\");\n  navigate(\"/auth/activate\");\n};\n</code></pre>"},{"location":"perfis-de-usuario/default/#ativacao","title":"Ativa\u00e7\u00e3o","text":"<ul> <li>Recebe c\u00f3digo de ativa\u00e7\u00e3o por email</li> <li>Validade: 24 horas</li> <li>Pode solicitar reenvio</li> </ul> <pre><code>// Backend: LoginEndpoints.cs\napp.MapPost(\"/api/signup/activate\", async (\n    ActivateAccountDto dto,\n    LoginService service) =&gt;\n{\n    await service.ActivateAccountAsync(dto.Email, dto.Code);\n    return Results.Ok(new { message = \"Conta ativada com sucesso!\" });\n});\n</code></pre>"},{"location":"perfis-de-usuario/default/#login","title":"Login","text":"<pre><code>// frontend-react/src/pages/Auth/Login.tsx\nconst handleLogin = async (data: LoginDto) =&gt; {\n  const response = await authApi.login({\n    email: data.email,\n    password: data.password\n  });\n\n  if (response.requireMfa) {\n    // Redirecionar para MFA\n    navigate(\"/auth/mfa\", { state: { email: data.email } });\n  } else {\n    // Salvar token e redirecionar\n    dispatch(setUser(response.user));\n    localStorage.setItem(\"token\", response.token);\n    navigate(\"/dashboard\");\n  }\n};\n</code></pre>"},{"location":"perfis-de-usuario/default/#2-buscar-e-explorar-videos","title":"2. Buscar e Explorar V\u00eddeos","text":""},{"location":"perfis-de-usuario/default/#listagem-de-videos","title":"Listagem de V\u00eddeos","text":"<pre><code>// frontend-react/src/pages/Videos/VideoList.tsx\nconst { data: videos } = useQuery({\n  queryKey: [\"videos\"],\n  queryFn: async () =&gt; {\n    const response = await videoApi.getAll();\n    return response.data;\n  }\n});\n\n// Filtros dispon\u00edveis\nconst filters = {\n  search: \"\", // Busca por t\u00edtulo\n  minPrice: 0,\n  maxPrice: 500,\n  sortBy: \"newest\" // newest, oldest, price_asc, price_desc\n};\n</code></pre>"},{"location":"perfis-de-usuario/default/#detalhes-do-video","title":"Detalhes do V\u00eddeo","text":"<pre><code>// frontend-react/src/pages/Videos/VideoDetail.tsx\nconst VideoDetail = () =&gt; {\n  const { videoId } = useParams();\n  const { data: video } = useQuery({\n    queryKey: [\"video\", videoId],\n    queryFn: async () =&gt; {\n      const response = await videoApi.getById(videoId);\n      return response.data;\n    }\n  });\n\n  // Verifica se usu\u00e1rio j\u00e1 possui o v\u00eddeo\n  const { data: userVideos } = useQuery({\n    queryKey: [\"user-videos\"],\n    queryFn: async () =&gt; {\n      const response = await orderApi.getMyOrders();\n      return response.data.filter(o =&gt; o.payment.status === \"Paid\");\n    }\n  });\n\n  const alreadyOwns = userVideos?.some(\n    o =&gt; o.videoId === parseInt(videoId)\n  );\n\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;{video.title}&lt;/h1&gt;\n      &lt;p&gt;{video.description}&lt;/p&gt;\n      &lt;p&gt;R$ {video.price.toFixed(2)}&lt;/p&gt;\n\n      {alreadyOwns ? (\n        &lt;Button onClick={() =&gt; navigate(`/videos/${videoId}/watch`)}&gt;\n          Assistir Agora\n        &lt;/Button&gt;\n      ) : (\n        &lt;Button onClick={handleBuy}&gt;\n          Comprar Agora\n        &lt;/Button&gt;\n      )}\n    &lt;/div&gt;\n  );\n};\n</code></pre>"},{"location":"perfis-de-usuario/default/#3-comprar-video","title":"3. Comprar V\u00eddeo","text":""},{"location":"perfis-de-usuario/default/#fluxo-de-compra","title":"Fluxo de Compra","text":"<pre><code>// frontend-react/src/pages/Checkout/VideoCheckout.tsx\nconst handleCheckout = async () =&gt; {\n  // Criar order\n  const order = await orderApi.create({\n    videoId: video.id,\n    promoterId: affiliateLinkPromoter?.id, // Se veio de link\n    videoAffiliateLinkId: affiliateLinkId\n  });\n\n  // Redirecionar para Iugu\n  window.location.href = order.payment.iuguSecureUrl;\n};\n</code></pre>"},{"location":"perfis-de-usuario/default/#confirmacao-de-pagamento","title":"Confirma\u00e7\u00e3o de Pagamento","text":"<ul> <li>Webhook do Iugu confirma automaticamente</li> <li>Usu\u00e1rio recebe notifica\u00e7\u00e3o por email/WhatsApp</li> <li>V\u00eddeo aparece em \"Meus V\u00eddeos\"</li> </ul> <pre><code>// Backend: PaymentEndpoints.cs\napp.MapPost(\"/api/webhooks/iugu\", async (\n    HttpRequest request,\n    PaymentService service) =&gt;\n{\n    var body = await new StreamReader(request.Body).ReadToEndAsync();\n    var signature = request.Headers[\"X-Iugu-Signature\"];\n\n    if (!ValidateSignature(body, signature))\n        return Results.Unauthorized();\n\n    var webhook = JsonSerializer.Deserialize&lt;IuguWebhook&gt;(body);\n\n    if (webhook.Event == \"invoice.status_changed\" &amp;&amp; \n        webhook.Data.Status == \"paid\")\n    {\n        await service.ConfirmPaymentAsync(webhook.Data.Id);\n    }\n\n    return Results.Ok();\n});\n</code></pre>"},{"location":"perfis-de-usuario/default/#4-assistir-videos","title":"4. Assistir V\u00eddeos","text":""},{"location":"perfis-de-usuario/default/#lista-de-videos-comprados","title":"Lista de V\u00eddeos Comprados","text":"<pre><code>// frontend-react/src/pages/MyVideos/MyVideosList.tsx\nconst { data: myVideos } = useQuery({\n  queryKey: [\"my-videos\"],\n  queryFn: async () =&gt; {\n    const orders = await orderApi.getMyOrders();\n    return orders\n      .filter(o =&gt; o.payment.status === \"Paid\")\n      .map(o =&gt; ({\n        ...o.video,\n        purchasedAt: o.payment.iuguPaidAt,\n        canWatch: !o.video.expirationViewDate || \n                  new Date(o.video.expirationViewDate) &gt;= new Date()\n      }));\n  }\n});\n</code></pre>"},{"location":"perfis-de-usuario/default/#player-de-video","title":"Player de V\u00eddeo","text":"<pre><code>// frontend-react/src/pages/MyVideos/VideoPlayer.tsx\nconst VideoPlayer = () =&gt; {\n  const { videoId } = useParams();\n  const { data: video } = useQuery({\n    queryKey: [\"my-video\", videoId],\n    queryFn: async () =&gt; {\n      // Verificar se usu\u00e1rio possui o v\u00eddeo\n      const orders = await orderApi.getMyOrders();\n      const order = orders.find(\n        o =&gt; o.videoId === parseInt(videoId) &amp;&amp;\n             o.payment.status === \"Paid\"\n      );\n\n      if (!order) throw new Error(\"Voc\u00ea n\u00e3o possui este v\u00eddeo\");\n\n      if (order.video.expirationViewDate &amp;&amp;\n          new Date(order.video.expirationViewDate) &lt; new Date()) {\n        throw new Error(\"Per\u00edodo de visualiza\u00e7\u00e3o expirado\");\n      }\n\n      return order.video;\n    }\n  });\n\n  // Cloudinary Video Player\n  const videoUrl = `https://res.cloudinary.com/${cloudName}/video/upload/${video.cloudinaryPublicId}`;\n\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;{video.title}&lt;/h1&gt;\n      &lt;video\n        controls\n        width=\"100%\"\n        src={videoUrl}\n        onPlay={handleLogView}\n      /&gt;\n    &lt;/div&gt;\n  );\n};\n</code></pre>"},{"location":"perfis-de-usuario/default/#5-dashboard","title":"5. Dashboard","text":"<pre><code>// frontend-react/src/pages/Dashboard/DefaultDashboard.tsx\nconst DefaultDashboard = () =&gt; {\n  const { data: stats } = useQuery({\n    queryKey: [\"my-stats\"],\n    queryFn: async () =&gt; {\n      const orders = await orderApi.getMyOrders();\n      const paid = orders.filter(o =&gt; o.payment.status === \"Paid\");\n\n      return {\n        videosOwned: paid.length,\n        totalSpent: paid.reduce((sum, o) =&gt; sum + o.amount, 0) / 100,\n        lastPurchase: paid[0]?.payment.iuguPaidAt,\n        recentVideos: paid.slice(0, 5)\n      };\n    }\n  });\n\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Meu Dashboard&lt;/h1&gt;\n\n      &lt;Card&gt;\n        &lt;h3&gt;Estat\u00edsticas&lt;/h3&gt;\n        &lt;p&gt;V\u00eddeos Comprados: {stats.videosOwned}&lt;/p&gt;\n        &lt;p&gt;Total Gasto: R$ {stats.totalSpent.toFixed(2)}&lt;/p&gt;\n        &lt;p&gt;\u00daltima Compra: {format(stats.lastPurchase)}&lt;/p&gt;\n      &lt;/Card&gt;\n\n      &lt;h3&gt;Compras Recentes&lt;/h3&gt;\n      &lt;VideoGrid videos={stats.recentVideos} /&gt;\n    &lt;/div&gt;\n  );\n};\n</code></pre>"},{"location":"perfis-de-usuario/default/#6-perfil-e-preferencias","title":"6. Perfil e Prefer\u00eancias","text":"<pre><code>// frontend-react/src/pages/Profile/UserProfile.tsx\nconst handleUpdateProfile = async (data: UpdateProfileDto) =&gt; {\n  await userApi.update({\n    firstName: data.firstName,\n    lastName: data.lastName,\n    telephone: data.telephone,\n    notificationPreference: data.notificationPreference // Email, WhatsApp, All\n  });\n\n  toast.success(\"Perfil atualizado!\");\n};\n</code></pre>"},{"location":"perfis-de-usuario/default/#permissoes","title":"Permiss\u00f5es","text":"A\u00e7\u00e3o Permitido Ver cat\u00e1logo de v\u00eddeos \u2705 Comprar v\u00eddeos \u2705 Assistir v\u00eddeos comprados \u2705 Gerar links de afiliado \u274c Receber comiss\u00f5es \u274c Acessar admin \u274c Enviar documentos KYC \u274c"},{"location":"perfis-de-usuario/default/#notificacoes-recebidas","title":"Notifica\u00e7\u00f5es Recebidas","text":"<ul> <li>\u2709\ufe0f Email de ativa\u00e7\u00e3o (NotificationTypeEnum.UserActivation)</li> <li>\ud83d\udd11 C\u00f3digo MFA (NotificationTypeEnum.MfaCode)</li> <li>\ud83d\udd12 Recupera\u00e7\u00e3o de senha (NotificationTypeEnum.ForgotPassword)</li> <li>\u2705 Pagamento confirmado (NotificationTypeEnum.PaymentConfirmed)</li> <li>\ud83c\udfac Lan\u00e7amento de v\u00eddeo (NotificationTypeEnum.VideoReleaseSchedule)</li> </ul>"},{"location":"perfis-de-usuario/default/#regras-de-negocio","title":"Regras de Neg\u00f3cio","text":"<ol> <li>Email \u00fanico: N\u00e3o pode haver dois usu\u00e1rios com mesmo email</li> <li>Ativa\u00e7\u00e3o obrigat\u00f3ria: Deve ativar conta antes de fazer login</li> <li>Compra \u00fanica: N\u00e3o pode comprar o mesmo v\u00eddeo duas vezes</li> <li>Expira\u00e7\u00e3o de visualiza\u00e7\u00e3o: Respeitar <code>expiration_view_date</code> do v\u00eddeo</li> <li>Senha segura: M\u00ednimo 8 caracteres, incluindo mai\u00fasculas e n\u00fameros</li> <li>Idade m\u00ednima: 18 anos (validado na data de nascimento)</li> </ol>"},{"location":"perfis-de-usuario/default/#endpoints-principais","title":"Endpoints Principais","text":"M\u00e9todo Endpoint Descri\u00e7\u00e3o POST <code>/api/signup</code> Cadastro POST <code>/api/signup/activate</code> Ativa\u00e7\u00e3o POST <code>/api/login</code> Login POST <code>/api/login/verify-mfa</code> Verificar MFA GET <code>/api/videos</code> Listar v\u00eddeos GET <code>/api/videos/:id</code> Detalhes do v\u00eddeo POST <code>/api/orders</code> Criar pedido GET <code>/api/orders/my-orders</code> Meus pedidos PUT <code>/api/users/me</code> Atualizar perfil"},{"location":"perfis-de-usuario/default/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<ul> <li>Veja Caso de Uso: Compra de V\u00eddeo</li> <li>Consulte Fluxo de Autentica\u00e7\u00e3o</li> <li>Entenda Perfil Promoter para gerar links</li> </ul>"},{"location":"perfis-de-usuario/influencer/","title":"Perfil: Influencer (Criador de Conte\u00fado)","text":""},{"location":"perfis-de-usuario/influencer/#descricao","title":"Descri\u00e7\u00e3o","text":"<p>O Influencer \u00e9 o criador de conte\u00fado que participa dos v\u00eddeos disponibilizados na plataforma e recebe comiss\u00f5es por cada venda realizada dos v\u00eddeos em que participa.</p>"},{"location":"perfis-de-usuario/influencer/#caracteristicas","title":"Caracter\u00edsticas","text":"<ul> <li>\ud83c\udfac Fun\u00e7\u00e3o principal: Participar de v\u00eddeos e receber comiss\u00f5es</li> <li>\ud83d\udce7 Email necess\u00e1rio: Sim</li> <li>\ud83d\udd10 KYC necess\u00e1rio: Sim (obrigat\u00f3rio para receber comiss\u00f5es)</li> <li>\ud83d\udcb0 Recebe comiss\u00f5es: Sim (ap\u00f3s KYC aprovado)</li> <li>\ud83c\udfe6 Subconta Iugu: Sim (criada ap\u00f3s envio de documentos)</li> <li>\ud83d\udcca Dashboard: Dashboard de rendimentos por v\u00eddeo</li> <li>\ud83c\udfa5 V\u00ednculo com v\u00eddeos: Via tabela <code>owner_videos</code></li> </ul>"},{"location":"perfis-de-usuario/influencer/#requisitos-para-receber-comissoes","title":"Requisitos para Receber Comiss\u00f5es","text":"<pre><code>stateDiagram-v2\n    [*] --&gt; Cadastrado: Registro como Influencer\n    Cadastrado --&gt; DocumentosEnviados: Enviar KYC\n    DocumentosEnviados --&gt; SubcontaCriada: Iugu cria subconta\n    SubcontaCriada --&gt; Pendente: Aguardando aprova\u00e7\u00e3o\n    Pendente --&gt; Aprovado: Admin aprova\n    Pendente --&gt; Rejeitado: Admin rejeita\n    Rejeitado --&gt; DocumentosEnviados: Reenviar documentos\n    Aprovado --&gt; PodeReceberComissoes: Comiss\u00f5es creditadas&lt;br/&gt;automaticamente</code></pre>"},{"location":"perfis-de-usuario/influencer/#jornada-do-influencer","title":"Jornada do Influencer","text":"<pre><code>graph TD\n    A[Cadastro como Influencer] --&gt; B[Enviar Documentos KYC]\n    B --&gt; C[Aguardar Aprova\u00e7\u00e3o]\n    C --&gt; D{Admin Aprovou?}\n    D --&gt;|N\u00e3o| E[Reenviar Documentos]\n    E --&gt; C\n    D --&gt;|Sim| F[Admin Cria V\u00eddeo]\n    F --&gt; G[Admin Vincula Influencer ao V\u00eddeo]\n    G --&gt; H[V\u00eddeo Publicado]\n    H --&gt; I[Usu\u00e1rio Compra V\u00eddeo]\n    I --&gt; J[Comiss\u00e3o Creditada Automaticamente]\n    J --&gt; K[Visualizar Dashboard]</code></pre>"},{"location":"perfis-de-usuario/influencer/#funcionalidades","title":"Funcionalidades","text":""},{"location":"perfis-de-usuario/influencer/#1-cadastro-e-kyc","title":"1. Cadastro e KYC","text":""},{"location":"perfis-de-usuario/influencer/#cadastro-como-influencer","title":"Cadastro como Influencer","text":"<pre><code>// frontend-react/src/pages/Auth/RegisterInfluencer.tsx\nconst handleRegisterInfluencer = async (data: RegisterDto) =&gt; {\n  await authApi.register({\n    ...data,\n    type: UserTypeEnum.Influencer\n  });\n\n  toast.success(\"Cadastro realizado! Envie seus documentos KYC.\");\n  navigate(\"/influencer/kyc\");\n};\n</code></pre>"},{"location":"perfis-de-usuario/influencer/#envio-de-documentos-kyc","title":"Envio de Documentos KYC","text":"<p>O processo \u00e9 id\u00eantico ao Promoter. Veja Perfil Promoter - KYC.</p> <pre><code>// Backend: OwnerEndpoints.cs\n// Mesmo endpoint usado por Promoters\napp.MapPost(\"/api/owners/kyc\", async (\n    HttpRequest request,\n    OwnerService service,\n    ICloudinaryService cloudinary) =&gt;\n{\n    // ... upload de documentos\n    // ... cria\u00e7\u00e3o/atualiza\u00e7\u00e3o de subconta Iugu\n\n    await service.SubmitKycAsync(ownerId, dto);\n\n    return Results.Ok(new { message = \"KYC enviado com sucesso!\" });\n})\n.RequireAuthorization()\n.DisableAntiforgery();\n</code></pre>"},{"location":"perfis-de-usuario/influencer/#2-dashboard-de-influencer","title":"2. Dashboard de Influencer","text":"<pre><code>// frontend-react/src/pages/Influencer/InfluencerDashboard.tsx\nconst InfluencerDashboard = () =&gt; {\n  const { data: dashboard } = useQuery({\n    queryKey: [\"influencer-dashboard\"],\n    queryFn: async () =&gt; {\n      const response = await influencerApi.getDashboard();\n      return response.data;\n    }\n  });\n\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Dashboard do Influencer&lt;/h1&gt;\n\n      &lt;Grid cols={4}&gt;\n        &lt;Card&gt;\n          &lt;h3&gt;Total de Comiss\u00f5es&lt;/h3&gt;\n          &lt;p className=\"text-3xl\"&gt;R$ {dashboard.totalEarnings.toFixed(2)}&lt;/p&gt;\n        &lt;/Card&gt;\n\n        &lt;Card&gt;\n          &lt;h3&gt;Meus V\u00eddeos&lt;/h3&gt;\n          &lt;p className=\"text-3xl\"&gt;{dashboard.totalVideos}&lt;/p&gt;\n        &lt;/Card&gt;\n\n        &lt;Card&gt;\n          &lt;h3&gt;Total de Vendas&lt;/h3&gt;\n          &lt;p className=\"text-3xl\"&gt;{dashboard.totalSales}&lt;/p&gt;\n        &lt;/Card&gt;\n\n        &lt;Card&gt;\n          &lt;h3&gt;Ticket M\u00e9dio&lt;/h3&gt;\n          &lt;p className=\"text-3xl\"&gt;R$ {dashboard.averagePerSale.toFixed(2)}&lt;/p&gt;\n        &lt;/Card&gt;\n      &lt;/Grid&gt;\n\n      &lt;h2&gt;Meus V\u00eddeos&lt;/h2&gt;\n      &lt;VideosPerformanceTable videos={dashboard.videos} /&gt;\n\n      &lt;h2&gt;\u00daltimas Vendas&lt;/h2&gt;\n      &lt;RecentSalesTable sales={dashboard.recentSales} /&gt;\n    &lt;/div&gt;\n  );\n};\n</code></pre> <pre><code>// Backend: InfluencerDashboardEndpoints.cs\napp.MapGet(\"/api/influencer/dashboard\", async (\n    HttpRequest request,\n    InfluencerDashboardService service,\n    ApplicationDbContext context) =&gt;\n{\n    var userId = GetUserIdFromToken(request);\n    var owner = await context.Owners\n        .FirstAsync(o =&gt; o.UserId == userId);\n\n    // Buscar v\u00eddeos do influencer\n    var videos = await context.OwnerVideos\n        .Include(ov =&gt; ov.Video)\n        .ThenInclude(v =&gt; v.Orders)\n        .ThenInclude(o =&gt; o.Payment)\n        .Where(ov =&gt; ov.OwnerId == owner.Id)\n        .Select(ov =&gt; new\n        {\n            Video = ov.Video,\n            Sales = ov.Video.Orders.Count(o =&gt; o.Payment.Status == PaymentStatusEnum.Paid),\n            Revenue = ov.Video.Orders\n                .Where(o =&gt; o.Payment.Status == PaymentStatusEnum.Paid)\n                .Sum(o =&gt; o.OwnerAmount) / 100m\n        })\n        .ToListAsync();\n\n    // Buscar comiss\u00f5es\n    var incomes = await context.Incomes\n        .Include(i =&gt; i.Order)\n        .ThenInclude(o =&gt; o.Video)\n        .Where(i =&gt; i.OwnerId == owner.Id &amp;&amp;\n                    i.Type == IncomeTypeEnum.Owner)\n        .ToListAsync();\n\n    var dashboard = new InfluencerDashboardDto\n    {\n        TotalEarnings = incomes.Sum(i =&gt; i.Amount) / 100m,\n        TotalVideos = videos.Count,\n        TotalSales = incomes.Count,\n        AveragePerSale = incomes.Any() \n            ? incomes.Average(i =&gt; i.Amount) / 100m \n            : 0,\n        Videos = videos.Select(v =&gt; new VideoPerformanceDto\n        {\n            VideoId = v.Video.Id,\n            Title = v.Video.Title,\n            Price = v.Video.Price,\n            Sales = v.Sales,\n            YourRevenue = v.Revenue\n        }).ToList(),\n        RecentSales = incomes\n            .OrderByDescending(i =&gt; i.CreatedAt)\n            .Take(10)\n            .Select(i =&gt; new SaleDto\n            {\n                Date = i.CreatedAt,\n                VideoTitle = i.Order.Video.Title,\n                Amount = i.Amount / 100m\n            })\n            .ToList()\n    };\n\n    return Results.Ok(dashboard);\n})\n.RequireAuthorization();\n</code></pre>"},{"location":"perfis-de-usuario/influencer/#3-videos-do-influencer","title":"3. V\u00eddeos do Influencer","text":""},{"location":"perfis-de-usuario/influencer/#listar-meus-videos","title":"Listar Meus V\u00eddeos","text":"<pre><code>// frontend-react/src/pages/Influencer/MyVideos.tsx\nconst MyVideos = () =&gt; {\n  const { data: videos } = useQuery({\n    queryKey: [\"my-influencer-videos\"],\n    queryFn: async () =&gt; {\n      const response = await influencerApi.getMyVideos();\n      return response.data;\n    }\n  });\n\n  return (\n    &lt;Table&gt;\n      &lt;thead&gt;\n        &lt;tr&gt;\n          &lt;th&gt;V\u00eddeo&lt;/th&gt;\n          &lt;th&gt;Pre\u00e7o&lt;/th&gt;\n          &lt;th&gt;Minha %&lt;/th&gt;\n          &lt;th&gt;Vendas&lt;/th&gt;\n          &lt;th&gt;Minha Receita&lt;/th&gt;\n          &lt;th&gt;Status&lt;/th&gt;\n        &lt;/tr&gt;\n      &lt;/thead&gt;\n      &lt;tbody&gt;\n        {videos.map(v =&gt; (\n          &lt;tr key={v.id}&gt;\n            &lt;td&gt;{v.title}&lt;/td&gt;\n            &lt;td&gt;R$ {v.price.toFixed(2)}&lt;/td&gt;\n            &lt;td&gt;{v.ownerPercentage}%&lt;/td&gt;\n            &lt;td&gt;{v.sales}&lt;/td&gt;\n            &lt;td&gt;R$ {v.myRevenue.toFixed(2)}&lt;/td&gt;\n            &lt;td&gt;\n              &lt;Badge color={v.isActive ? \"green\" : \"red\"}&gt;\n                {v.isActive ? \"Ativo\" : \"Inativo\"}\n              &lt;/Badge&gt;\n            &lt;/td&gt;\n          &lt;/tr&gt;\n        ))}\n      &lt;/tbody&gt;\n    &lt;/Table&gt;\n  );\n};\n</code></pre> <pre><code>// Backend: InfluencerDashboardEndpoints.cs\napp.MapGet(\"/api/influencer/videos\", async (\n    HttpRequest request,\n    ApplicationDbContext context) =&gt;\n{\n    var userId = GetUserIdFromToken(request);\n    var owner = await context.Owners.FirstAsync(o =&gt; o.UserId == userId);\n\n    var videos = await context.OwnerVideos\n        .Include(ov =&gt; ov.Video)\n        .ThenInclude(v =&gt; v.VideoRevenueConfig)\n        .Include(ov =&gt; ov.Video)\n        .ThenInclude(v =&gt; v.Orders)\n        .ThenInclude(o =&gt; o.Payment)\n        .Where(ov =&gt; ov.OwnerId == owner.Id)\n        .Select(ov =&gt; new InfluencerVideoDto\n        {\n            Id = ov.Video.Id,\n            Title = ov.Video.Title,\n            Description = ov.Video.Description,\n            Price = ov.Video.Price,\n            OwnerPercentage = ov.Video.VideoRevenueConfig.OwnerPercentage,\n            Sales = ov.Video.Orders.Count(o =&gt; o.Payment.Status == PaymentStatusEnum.Paid),\n            MyRevenue = ov.Video.Orders\n                .Where(o =&gt; o.Payment.Status == PaymentStatusEnum.Paid)\n                .Sum(o =&gt; o.OwnerAmount) / 100m,\n            IsActive = ov.Video.IsActive,\n            ReleaseDate = ov.Video.ReleaseDate,\n            ExpirationSaleDate = ov.Video.ExpirationSaleDate\n        })\n        .ToListAsync();\n\n    return Results.Ok(videos);\n})\n.RequireAuthorization();\n</code></pre>"},{"location":"perfis-de-usuario/influencer/#4-detalhes-de-performance-de-um-video","title":"4. Detalhes de Performance de um V\u00eddeo","text":"<pre><code>// frontend-react/src/pages/Influencer/VideoPerformance.tsx\nconst VideoPerformance = () =&gt; {\n  const { videoId } = useParams();\n  const { data: performance } = useQuery({\n    queryKey: [\"video-performance\", videoId],\n    queryFn: async () =&gt; {\n      const response = await influencerApi.getVideoPerformance(videoId);\n      return response.data;\n    }\n  });\n\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;{performance.videoTitle}&lt;/h1&gt;\n\n      &lt;Grid cols={3}&gt;\n        &lt;Card&gt;\n          &lt;h3&gt;Total de Vendas&lt;/h3&gt;\n          &lt;p&gt;{performance.totalSales}&lt;/p&gt;\n        &lt;/Card&gt;\n\n        &lt;Card&gt;\n          &lt;h3&gt;Receita Total do V\u00eddeo&lt;/h3&gt;\n          &lt;p&gt;R$ {performance.totalRevenue.toFixed(2)}&lt;/p&gt;\n        &lt;/Card&gt;\n\n        &lt;Card&gt;\n          &lt;h3&gt;Sua Comiss\u00e3o Total&lt;/h3&gt;\n          &lt;p&gt;R$ {performance.myCommission.toFixed(2)}&lt;/p&gt;\n        &lt;/Card&gt;\n      &lt;/Grid&gt;\n\n      &lt;h2&gt;Vendas por Per\u00edodo&lt;/h2&gt;\n      &lt;SalesChart data={performance.salesByMonth} /&gt;\n\n      &lt;h2&gt;\u00daltimas Vendas&lt;/h2&gt;\n      &lt;Table&gt;\n        &lt;thead&gt;\n          &lt;tr&gt;\n            &lt;th&gt;Data&lt;/th&gt;\n            &lt;th&gt;Valor da Venda&lt;/th&gt;\n            &lt;th&gt;Sua Comiss\u00e3o&lt;/th&gt;\n            &lt;th&gt;Promoter?&lt;/th&gt;\n          &lt;/tr&gt;\n        &lt;/thead&gt;\n        &lt;tbody&gt;\n          {performance.sales.map(s =&gt; (\n            &lt;tr key={s.orderId}&gt;\n              &lt;td&gt;{format(s.paidAt, \"dd/MM/yyyy HH:mm\")}&lt;/td&gt;\n              &lt;td&gt;R$ {s.amount.toFixed(2)}&lt;/td&gt;\n              &lt;td&gt;R$ {s.ownerCommission.toFixed(2)}&lt;/td&gt;\n              &lt;td&gt;{s.hasPromoter ? \"Sim\" : \"N\u00e3o\"}&lt;/td&gt;\n            &lt;/tr&gt;\n          ))}\n        &lt;/tbody&gt;\n      &lt;/Table&gt;\n    &lt;/div&gt;\n  );\n};\n</code></pre> <pre><code>// Backend: InfluencerDashboardEndpoints.cs\napp.MapGet(\"/api/influencer/videos/{videoId:long}/performance\", async (\n    long videoId,\n    HttpRequest request,\n    ApplicationDbContext context) =&gt;\n{\n    var userId = GetUserIdFromToken(request);\n    var owner = await context.Owners.FirstAsync(o =&gt; o.UserId == userId);\n\n    // Verificar se influencer est\u00e1 vinculado ao v\u00eddeo\n    var isLinked = await context.OwnerVideos\n        .AnyAsync(ov =&gt; ov.OwnerId == owner.Id &amp;&amp; ov.VideoId == videoId);\n\n    if (!isLinked)\n        return Results.Forbid();\n\n    var video = await context.Videos\n        .Include(v =&gt; v.VideoRevenueConfig)\n        .FirstAsync(v =&gt; v.Id == videoId);\n\n    var orders = await context.Orders\n        .Include(o =&gt; o.Payment)\n        .Include(o =&gt; o.Promoter)\n        .ThenInclude(p =&gt; p.User)\n        .Where(o =&gt; o.VideoId == videoId &amp;&amp;\n                    o.Payment.Status == PaymentStatusEnum.Paid)\n        .ToListAsync();\n\n    var performance = new VideoPerformanceDto\n    {\n        VideoId = video.Id,\n        VideoTitle = video.Title,\n        TotalSales = orders.Count,\n        TotalRevenue = orders.Sum(o =&gt; o.Amount) / 100m,\n        MyCommission = orders.Sum(o =&gt; o.OwnerAmount) / 100m,\n        SalesByMonth = orders\n            .GroupBy(o =&gt; new { o.Payment.IuguPaidAt.Value.Year, o.Payment.IuguPaidAt.Value.Month })\n            .Select(g =&gt; new\n            {\n                Month = $\"{g.Key.Year}-{g.Key.Month:D2}\",\n                Sales = g.Count(),\n                Revenue = g.Sum(o =&gt; o.OwnerAmount) / 100m\n            })\n            .ToList(),\n        Sales = orders\n            .OrderByDescending(o =&gt; o.Payment.IuguPaidAt)\n            .Take(50)\n            .Select(o =&gt; new\n            {\n                OrderId = o.Id,\n                PaidAt = o.Payment.IuguPaidAt,\n                Amount = o.Amount / 100m,\n                OwnerCommission = o.OwnerAmount / 100m,\n                HasPromoter = o.PromoterId.HasValue,\n                PromoterName = o.Promoter != null \n                    ? o.Promoter.User.FirstName + \" \" + o.Promoter.User.LastName \n                    : null\n            })\n            .ToList()\n    };\n\n    return Results.Ok(performance);\n})\n.RequireAuthorization();\n</code></pre>"},{"location":"perfis-de-usuario/influencer/#5-vinculo-com-videos-admin","title":"5. V\u00ednculo com V\u00eddeos (Admin)","text":"<p>O Admin \u00e9 respons\u00e1vel por vincular influencers aos v\u00eddeos:</p> <pre><code>// Backend: AdminEndpoints.cs\napp.MapPost(\"/api/admin/videos/{videoId:long}/add-influencer\", async (\n    long videoId,\n    AddInfluencerDto dto,\n    ApplicationDbContext context) =&gt;\n{\n    // Verificar se owner \u00e9 influencer e tem KYC aprovado\n    var owner = await context.Owners\n        .FirstOrDefaultAsync(o =&gt; o.Id == dto.InfluencerId &amp;&amp;\n                                  o.Type == OwnerTypeEnum.Influencer);\n\n    if (owner == null)\n        return Results.BadRequest(\"Owner n\u00e3o encontrado ou n\u00e3o \u00e9 influencer\");\n\n    if (owner.SubAccountStatus != OwnerSubAccountStatusEnum.Approved)\n        return Results.BadRequest(\"KYC do influencer n\u00e3o aprovado\");\n\n    // Verificar se j\u00e1 est\u00e1 vinculado\n    var existing = await context.OwnerVideos\n        .AnyAsync(ov =&gt; ov.VideoId == videoId &amp;&amp; ov.OwnerId == dto.InfluencerId);\n\n    if (existing)\n        return Results.BadRequest(\"Influencer j\u00e1 vinculado a este v\u00eddeo\");\n\n    // Criar v\u00ednculo\n    var ownerVideo = new OwnerVideo\n    {\n        VideoId = videoId,\n        OwnerId = dto.InfluencerId,\n        CreatedAt = DateTime.UtcNow\n    };\n\n    await context.OwnerVideos.AddAsync(ownerVideo);\n    await context.SaveChangesAsync();\n\n    return Results.Ok(new { message = \"Influencer vinculado com sucesso!\" });\n})\n.RequireAuthorization(\"Admin\");\n</code></pre>"},{"location":"perfis-de-usuario/influencer/#permissoes","title":"Permiss\u00f5es","text":"A\u00e7\u00e3o Permitido Ver cat\u00e1logo de v\u00eddeos \u2705 Comprar v\u00eddeos \u2705 Ver meus v\u00eddeos \u2705 Ver dashboard de rendimentos \u2705 Receber comiss\u00f5es \u2705 (ap\u00f3s KYC aprovado) Criar v\u00eddeos \u274c (admin faz) Vincular-se a v\u00eddeos \u274c (admin faz) Gerar links de afiliado \u274c Acessar admin \u274c"},{"location":"perfis-de-usuario/influencer/#regras-de-negocio","title":"Regras de Neg\u00f3cio","text":"<ol> <li>KYC obrigat\u00f3rio: Deve ter KYC aprovado para receber comiss\u00f5es</li> <li>V\u00ednculo via admin: Apenas admin pode vincular influencer a v\u00eddeo</li> <li>Subconta Iugu: Criada automaticamente ao enviar documentos KYC</li> <li>Comiss\u00e3o autom\u00e1tica: Creditada automaticamente em cada venda</li> <li>M\u00faltiplos v\u00eddeos: Influencer pode estar em v\u00e1rios v\u00eddeos</li> <li>M\u00faltiplos influencers: Um v\u00eddeo pode ter v\u00e1rios influencers (comiss\u00e3o dividida)</li> </ol>"},{"location":"perfis-de-usuario/influencer/#endpoints-principais","title":"Endpoints Principais","text":"M\u00e9todo Endpoint Descri\u00e7\u00e3o POST <code>/api/owners/kyc</code> Enviar documentos KYC GET <code>/api/owners/me</code> Ver status KYC GET <code>/api/influencer/dashboard</code> Dashboard GET <code>/api/influencer/videos</code> Meus v\u00eddeos GET <code>/api/influencer/videos/:id/performance</code> Performance de v\u00eddeo"},{"location":"perfis-de-usuario/influencer/#notificacoes-recebidas","title":"Notifica\u00e7\u00f5es Recebidas","text":"<ul> <li>\ud83d\udcc4 KYC enviado: Confirma\u00e7\u00e3o de envio</li> <li>\u2705 KYC aprovado: Pode come\u00e7ar a receber</li> <li>\u274c KYC rejeitado: Motivo da rejei\u00e7\u00e3o</li> <li>\ud83c\udfac Novo v\u00eddeo: Notifica\u00e7\u00e3o de novo v\u00eddeo vinculado</li> <li>\ud83d\udcb0 Nova venda: Notifica\u00e7\u00e3o de venda</li> </ul>"},{"location":"perfis-de-usuario/influencer/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<ul> <li>Veja Processo KYC completo</li> <li>Consulte Caso de Uso: Influencer Recebe Comiss\u00e3o</li> <li>Entenda Split de Pagamento</li> </ul>"},{"location":"perfis-de-usuario/promoter/","title":"Perfil: Promoter (Afiliado)","text":""},{"location":"perfis-de-usuario/promoter/#descricao","title":"Descri\u00e7\u00e3o","text":"<p>O Promoter \u00e9 um usu\u00e1rio afiliado que divulga v\u00eddeos da plataforma atrav\u00e9s de links exclusivos e recebe comiss\u00f5es por cada venda realizada atrav\u00e9s de seus links.</p>"},{"location":"perfis-de-usuario/promoter/#caracteristicas","title":"Caracter\u00edsticas","text":"<ul> <li>\ud83d\udd17 Fun\u00e7\u00e3o principal: Gerar links de afiliado e promover v\u00eddeos</li> <li>\ud83d\udce7 Email necess\u00e1rio: Sim</li> <li>\ud83d\udd10 KYC necess\u00e1rio: Sim (obrigat\u00f3rio para receber comiss\u00f5es)</li> <li>\ud83d\udcb0 Recebe comiss\u00f5es: Sim (ap\u00f3s KYC aprovado)</li> <li>\ud83c\udfe6 Subconta Iugu: Sim (criada ap\u00f3s envio de documentos)</li> <li>\ud83d\udcca Dashboard: Dashboard de convers\u00f5es e comiss\u00f5es</li> </ul>"},{"location":"perfis-de-usuario/promoter/#requisitos-para-operar","title":"Requisitos para Operar","text":"<pre><code>stateDiagram-v2\n    [*] --&gt; Cadastrado: Registro como Promoter\n    Cadastrado --&gt; DocumentosEnviados: Enviar KYC\n    DocumentosEnviados --&gt; SubcontaCriada: Iugu cria subconta\n    SubcontaCriada --&gt; Pendente: Aguardando aprova\u00e7\u00e3o\n    Pendente --&gt; Aprovado: Admin aprova\n    Pendente --&gt; Rejeitado: Admin rejeita\n    Rejeitado --&gt; DocumentosEnviados: Reenviar documentos\n    Aprovado --&gt; Operando: Pode gerar links&lt;br/&gt;e receber comiss\u00f5es</code></pre>"},{"location":"perfis-de-usuario/promoter/#jornada-do-promoter","title":"Jornada do Promoter","text":"<pre><code>graph TD\n    A[Cadastro como Promoter] --&gt; B[Enviar Documentos KYC]\n    B --&gt; C[Aguardar Aprova\u00e7\u00e3o]\n    C --&gt; D{Admin Aprovou?}\n    D --&gt;|N\u00e3o| E[Reenviar Documentos]\n    E --&gt; C\n    D --&gt;|Sim| F[Acesso Dashboard Promoter]\n    F --&gt; G[Buscar V\u00eddeos com Comiss\u00e3o &gt; 0%]\n    G --&gt; H[Gerar Link de Afiliado]\n    H --&gt; I[Divulgar Link]\n    I --&gt; J[Usu\u00e1rio Clica no Link]\n    J --&gt; K[Usu\u00e1rio Compra V\u00eddeo]\n    K --&gt; L[Comiss\u00e3o Creditada]\n    L --&gt; M[Visualizar Dashboard]</code></pre>"},{"location":"perfis-de-usuario/promoter/#funcionalidades","title":"Funcionalidades","text":""},{"location":"perfis-de-usuario/promoter/#1-cadastro-e-kyc","title":"1. Cadastro e KYC","text":""},{"location":"perfis-de-usuario/promoter/#cadastro-como-promoter","title":"Cadastro como Promoter","text":"<pre><code>// frontend-react/src/pages/Auth/RegisterPromoter.tsx\nconst handleRegisterPromoter = async (data: RegisterDto) =&gt; {\n  await authApi.register({\n    ...data,\n    type: UserTypeEnum.Promoter\n  });\n\n  toast.success(\"Cadastro realizado! Envie seus documentos KYC.\");\n  navigate(\"/promoter/kyc\");\n};\n</code></pre>"},{"location":"perfis-de-usuario/promoter/#envio-de-documentos-kyc","title":"Envio de Documentos KYC","text":"<pre><code>// frontend-react/src/pages/Promoter/KycSubmission.tsx\nconst handleSubmitKyc = async (data: KycDocumentsDto) =&gt; {\n  const formData = new FormData();\n  formData.append(\"cpf\", data.cpf);\n  formData.append(\"rg\", data.rg);\n  formData.append(\"birthDate\", data.birthDate);\n\n  // Documentos\n  formData.append(\"cpfFile\", data.cpfFile);\n  formData.append(\"rgFile\", data.rgFile);\n  formData.append(\"addressProofFile\", data.addressProofFile);\n  formData.append(\"selfieFile\", data.selfieFile);\n\n  // Endere\u00e7o\n  formData.append(\"addressStreet\", data.addressStreet);\n  formData.append(\"addressNumber\", data.addressNumber);\n  formData.append(\"addressCity\", data.addressCity);\n  formData.append(\"addressState\", data.addressState);\n  formData.append(\"addressZipcode\", data.addressZipcode);\n\n  // Dados banc\u00e1rios\n  formData.append(\"bankCode\", data.bankCode);\n  formData.append(\"bankAgency\", data.bankAgency);\n  formData.append(\"bankAccount\", data.bankAccount);\n  formData.append(\"bankAccountType\", data.bankAccountType);\n\n  await ownerApi.submitKyc(formData);\n\n  toast.success(\"Documentos enviados! Aguarde aprova\u00e7\u00e3o.\");\n};\n</code></pre> <pre><code>// Backend: OwnerEndpoints.cs\napp.MapPost(\"/api/owners/kyc\", async (\n    HttpRequest request,\n    OwnerService service,\n    ICloudinaryService cloudinary) =&gt;\n{\n    var form = await request.ReadFormAsync();\n    var ownerId = GetOwnerIdFromToken(request);\n\n    // Upload documentos para Cloudinary\n    var cpfUrl = await cloudinary.UploadAsync(form.Files[\"cpfFile\"]);\n    var rgUrl = await cloudinary.UploadAsync(form.Files[\"rgFile\"]);\n    var addressProofUrl = await cloudinary.UploadAsync(form.Files[\"addressProofFile\"]);\n    var selfieUrl = await cloudinary.UploadAsync(form.Files[\"selfieFile\"]);\n\n    var dto = new KycDocumentsDto\n    {\n        Cpf = form[\"cpf\"],\n        Rg = form[\"rg\"],\n        DocumentCpfUrl = cpfUrl,\n        DocumentRgUrl = rgUrl,\n        DocumentAddressProofUrl = addressProofUrl,\n        DocumentSelfieUrl = selfieUrl,\n        // ... outros campos\n    };\n\n    await service.SubmitKycAsync(ownerId, dto);\n\n    return Results.Ok(new { message = \"KYC enviado com sucesso!\" });\n})\n.RequireAuthorization()\n.DisableAntiforgery();\n</code></pre>"},{"location":"perfis-de-usuario/promoter/#2-dashboard-de-promoter","title":"2. Dashboard de Promoter","text":"<pre><code>// frontend-react/src/pages/Promoter/PromoterDashboard.tsx\nconst PromoterDashboard = () =&gt; {\n  const { data: dashboard } = useQuery({\n    queryKey: [\"promoter-dashboard\"],\n    queryFn: async () =&gt; {\n      const response = await promoterApi.getDashboard();\n      return response.data;\n    }\n  });\n\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Dashboard do Promoter&lt;/h1&gt;\n\n      &lt;Grid cols={4}&gt;\n        &lt;Card&gt;\n          &lt;h3&gt;Total de Comiss\u00f5es&lt;/h3&gt;\n          &lt;p className=\"text-3xl\"&gt;R$ {dashboard.totalEarnings.toFixed(2)}&lt;/p&gt;\n        &lt;/Card&gt;\n\n        &lt;Card&gt;\n          &lt;h3&gt;Total de Convers\u00f5es&lt;/h3&gt;\n          &lt;p className=\"text-3xl\"&gt;{dashboard.totalConversions}&lt;/p&gt;\n        &lt;/Card&gt;\n\n        &lt;Card&gt;\n          &lt;h3&gt;Total de Cliques&lt;/h3&gt;\n          &lt;p className=\"text-3xl\"&gt;{dashboard.totalClicks}&lt;/p&gt;\n        &lt;/Card&gt;\n\n        &lt;Card&gt;\n          &lt;h3&gt;Taxa de Convers\u00e3o&lt;/h3&gt;\n          &lt;p className=\"text-3xl\"&gt;{dashboard.conversionRate.toFixed(2)}%&lt;/p&gt;\n        &lt;/Card&gt;\n      &lt;/Grid&gt;\n\n      &lt;h2&gt;Meus Links de Afiliado&lt;/h2&gt;\n      &lt;AffiliateLinksTable links={dashboard.affiliateLinks} /&gt;\n\n      &lt;h2&gt;\u00daltimas Convers\u00f5es&lt;/h2&gt;\n      &lt;ConversionsTable conversions={dashboard.recentConversions} /&gt;\n    &lt;/div&gt;\n  );\n};\n</code></pre> <pre><code>// Backend: PromoterEndpoints.cs\napp.MapGet(\"/api/promoter/dashboard\", async (\n    HttpRequest request,\n    PromoterDashboardService service) =&gt;\n{\n    var userId = GetUserIdFromToken(request);\n    var owner = await _context.Owners\n        .FirstAsync(o =&gt; o.UserId == userId);\n\n    var dashboard = await service.GetDashboardAsync(owner.Id);\n\n    return Results.Ok(dashboard);\n})\n.RequireAuthorization();\n</code></pre>"},{"location":"perfis-de-usuario/promoter/#3-gerar-links-de-afiliado","title":"3. Gerar Links de Afiliado","text":""},{"location":"perfis-de-usuario/promoter/#listar-videos-disponiveis","title":"Listar V\u00eddeos Dispon\u00edveis","text":"<pre><code>// frontend-react/src/pages/Promoter/AvailableVideos.tsx\nconst { data: videos } = useQuery({\n  queryKey: [\"promoter-videos\"],\n  queryFn: async () =&gt; {\n    // Apenas v\u00eddeos com promoter_percentage &gt; 0%\n    const response = await videoApi.getForPromoters();\n    return response.data;\n  }\n});\n</code></pre> <pre><code>// Backend: VideoEndpoints.cs\napp.MapGet(\"/api/videos/for-promoters\", async (ApplicationDbContext context) =&gt;\n{\n    var videos = await context.Videos\n        .Include(v =&gt; v.VideoRevenueConfig)\n        .Where(v =&gt; v.IsActive &amp;&amp;\n                    v.VideoRevenueConfig.PromoterPercentage &gt; 0 &amp;&amp;\n                    (v.ReleaseDate == null || v.ReleaseDate &lt;= DateTime.Today) &amp;&amp;\n                    (v.ExpirationSaleDate == null || v.ExpirationSaleDate &gt;= DateTime.Today))\n        .Select(v =&gt; new VideoForPromoterDto\n        {\n            Id = v.Id,\n            Title = v.Title,\n            Price = v.Price,\n            PromoterPercentage = v.VideoRevenueConfig.PromoterPercentage,\n            PromoterCommission = v.Price * v.VideoRevenueConfig.PromoterPercentage / 100\n        })\n        .ToListAsync();\n\n    return Results.Ok(videos);\n})\n.RequireAuthorization();\n</code></pre>"},{"location":"perfis-de-usuario/promoter/#criar-link-de-afiliado","title":"Criar Link de Afiliado","text":"<pre><code>// frontend-react/src/pages/Promoter/CreateAffiliateLink.tsx\nconst handleCreateLink = async (videoId: number) =&gt; {\n  const response = await promoterApi.createAffiliateLink({ videoId });\n\n  const fullLink = `${window.location.origin}/videos/${videoId}?ref=${response.data.uniqueCode}`;\n\n  navigator.clipboard.writeText(fullLink);\n  toast.success(\"Link copiado para \u00e1rea de transfer\u00eancia!\");\n};\n</code></pre> <pre><code>// Backend: PromoterEndpoints.cs\napp.MapPost(\"/api/promoter/affiliate-links\", async (\n    CreateAffiliateLinkDto dto,\n    PromoterService service,\n    HttpRequest request) =&gt;\n{\n    var userId = GetUserIdFromToken(request);\n    var owner = await _context.Owners\n        .FirstAsync(o =&gt; o.UserId == userId);\n\n    // Verificar se promoter tem KYC aprovado\n    if (owner.SubAccountStatus != OwnerSubAccountStatusEnum.Approved)\n    {\n        return Results.BadRequest(\"KYC n\u00e3o aprovado\");\n    }\n\n    // Verificar se v\u00eddeo tem comiss\u00e3o para promoters\n    var video = await _context.Videos\n        .Include(v =&gt; v.VideoRevenueConfig)\n        .FirstAsync(v =&gt; v.Id == dto.VideoId);\n\n    if (video.VideoRevenueConfig.PromoterPercentage &lt;= 0)\n    {\n        return Results.BadRequest(\"Este v\u00eddeo n\u00e3o tem comiss\u00e3o para promoters\");\n    }\n\n    // Verificar se j\u00e1 existe link para este v\u00eddeo\n    var existingLink = await _context.VideoAffiliateLinks\n        .FirstOrDefaultAsync(l =&gt; l.OwnerId == owner.Id &amp;&amp; \n                                  l.VideoId == dto.VideoId);\n\n    if (existingLink != null)\n    {\n        return Results.Ok(existingLink);\n    }\n\n    // Criar novo link\n    var link = new VideoAffiliateLink\n    {\n        OwnerId = owner.Id,\n        VideoId = dto.VideoId,\n        UniqueCode = GenerateUniqueCode(), // Gera c\u00f3digo \u00fanico\n        Clicks = 0,\n        CreatedAt = DateTime.UtcNow\n    };\n\n    await _context.VideoAffiliateLinks.AddAsync(link);\n    await _context.SaveChangesAsync();\n\n    return Results.Ok(link);\n})\n.RequireAuthorization();\n\nprivate string GenerateUniqueCode()\n{\n    return Convert.ToBase64String(Guid.NewGuid().ToByteArray())\n        .Replace(\"+\", \"\").Replace(\"/\", \"\").Replace(\"=\", \"\")\n        .Substring(0, 8)\n        .ToUpper();\n}\n</code></pre>"},{"location":"perfis-de-usuario/promoter/#4-rastreamento-de-links","title":"4. Rastreamento de Links","text":""},{"location":"perfis-de-usuario/promoter/#registrar-clique","title":"Registrar Clique","text":"<pre><code>// frontend-react/src/pages/Videos/VideoDetail.tsx\nuseEffect(() =&gt; {\n  const searchParams = new URLSearchParams(window.location.search);\n  const refCode = searchParams.get(\"ref\");\n\n  if (refCode) {\n    // Salvar no localStorage para usar no checkout\n    localStorage.setItem(\"affiliateRef\", refCode);\n\n    // Registrar clique (sem autentica\u00e7\u00e3o)\n    videoApi.trackAffiliateClick(refCode);\n  }\n}, []);\n</code></pre> <pre><code>// Backend: VideoEndpoints.cs\napp.MapPost(\"/api/videos/affiliate-click/{uniqueCode}\", async (\n    string uniqueCode,\n    ApplicationDbContext context) =&gt;\n{\n    var link = await context.VideoAffiliateLinks\n        .FirstOrDefaultAsync(l =&gt; l.UniqueCode == uniqueCode);\n\n    if (link != null)\n    {\n        link.Clicks++;\n        link.UpdatedAt = DateTime.UtcNow;\n        await context.SaveChangesAsync();\n    }\n\n    return Results.Ok();\n})\n.AllowAnonymous();\n</code></pre>"},{"location":"perfis-de-usuario/promoter/#vincular-order-ao-link","title":"Vincular Order ao Link","text":"<pre><code>// Backend: OrderService.cs\npublic async Task&lt;Order&gt; CreateOrderAsync(CreateOrderDto dto, long userId)\n{\n    // ... criar order\n\n    // Se tem c\u00f3digo de afiliado\n    if (!string.IsNullOrEmpty(dto.AffiliateCode))\n    {\n        var link = await _context.VideoAffiliateLinks\n            .Include(l =&gt; l.Owner)\n            .FirstOrDefaultAsync(l =&gt; l.UniqueCode == dto.AffiliateCode &amp;&amp;\n                                      l.VideoId == dto.VideoId);\n\n        if (link != null &amp;&amp; \n            link.Owner.SubAccountStatus == OwnerSubAccountStatusEnum.Approved)\n        {\n            order.PromoterId = link.OwnerId;\n            order.VideoAffiliateLinkId = link.Id;\n\n            // Recalcular split incluindo promoter\n            var config = video.VideoRevenueConfig;\n            order.PromoterAmount = (int)(order.Amount * config.PromoterPercentage / 100);\n        }\n    }\n\n    return order;\n}\n</code></pre>"},{"location":"perfis-de-usuario/promoter/#5-tabela-de-conversoes","title":"5. Tabela de Convers\u00f5es","text":"<pre><code>// frontend-react/src/components/Promoter/ConversionsTable.tsx\nconst ConversionsTable = () =&gt; {\n  const { data: conversions } = useQuery({\n    queryKey: [\"promoter-conversions\"],\n    queryFn: async () =&gt; {\n      const response = await promoterApi.getConversions();\n      return response.data;\n    }\n  });\n\n  return (\n    &lt;Table&gt;\n      &lt;thead&gt;\n        &lt;tr&gt;\n          &lt;th&gt;Data&lt;/th&gt;\n          &lt;th&gt;V\u00eddeo&lt;/th&gt;\n          &lt;th&gt;Comprador&lt;/th&gt;\n          &lt;th&gt;Valor Venda&lt;/th&gt;\n          &lt;th&gt;Sua Comiss\u00e3o&lt;/th&gt;\n        &lt;/tr&gt;\n      &lt;/thead&gt;\n      &lt;tbody&gt;\n        {conversions.map(c =&gt; (\n          &lt;tr key={c.orderId}&gt;\n            &lt;td&gt;{format(c.paidAt, \"dd/MM/yyyy HH:mm\")}&lt;/td&gt;\n            &lt;td&gt;{c.videoTitle}&lt;/td&gt;\n            &lt;td&gt;{c.buyerName}&lt;/td&gt;\n            &lt;td&gt;R$ {c.orderAmount.toFixed(2)}&lt;/td&gt;\n            &lt;td&gt;R$ {c.commissionAmount.toFixed(2)}&lt;/td&gt;\n          &lt;/tr&gt;\n        ))}\n      &lt;/tbody&gt;\n    &lt;/Table&gt;\n  );\n};\n</code></pre> <pre><code>// Backend: PromoterEndpoints.cs\napp.MapGet(\"/api/promoter/conversions\", async (\n    HttpRequest request,\n    ApplicationDbContext context) =&gt;\n{\n    var userId = GetUserIdFromToken(request);\n    var owner = await context.Owners.FirstAsync(o =&gt; o.UserId == userId);\n\n    var conversions = await context.Incomes\n        .Include(i =&gt; i.Order)\n        .ThenInclude(o =&gt; o.Video)\n        .Include(i =&gt; i.Order)\n        .ThenInclude(o =&gt; o.User)\n        .Include(i =&gt; i.Order)\n        .ThenInclude(o =&gt; o.Payment)\n        .Where(i =&gt; i.OwnerId == owner.Id &amp;&amp;\n                    i.Type == IncomeTypeEnum.Promoter)\n        .OrderByDescending(i =&gt; i.CreatedAt)\n        .Select(i =&gt; new ConversionDto\n        {\n            OrderId = i.OrderId,\n            VideoTitle = i.Order.Video.Title,\n            BuyerName = i.Order.User.FirstName + \" \" + i.Order.User.LastName,\n            OrderAmount = i.Order.Amount / 100m,\n            CommissionAmount = i.Amount / 100m,\n            PaidAt = i.Order.Payment.IuguPaidAt\n        })\n        .ToListAsync();\n\n    return Results.Ok(conversions);\n})\n.RequireAuthorization();\n</code></pre>"},{"location":"perfis-de-usuario/promoter/#permissoes","title":"Permiss\u00f5es","text":"A\u00e7\u00e3o Permitido Ver cat\u00e1logo de v\u00eddeos \u2705 Comprar v\u00eddeos \u2705 Gerar links de afiliado \u2705 (ap\u00f3s KYC aprovado) Receber comiss\u00f5es \u2705 (ap\u00f3s KYC aprovado) Ver dashboard de promoter \u2705 Acessar admin \u274c Criar v\u00eddeos \u274c"},{"location":"perfis-de-usuario/promoter/#regras-de-negocio","title":"Regras de Neg\u00f3cio","text":"<ol> <li>KYC obrigat\u00f3rio: Deve ter KYC aprovado para operar</li> <li>V\u00eddeos com comiss\u00e3o &gt; 0%: S\u00f3 pode gerar links para v\u00eddeos com <code>promoter_percentage &gt; 0</code></li> <li>Link \u00fanico por v\u00eddeo: Cada promoter tem apenas 1 link por v\u00eddeo</li> <li>Subconta Iugu: Criada automaticamente ao enviar documentos KYC</li> <li>Aprova\u00e7\u00e3o admin: Admin deve aprovar KYC antes de promoter receber comiss\u00f5es</li> <li>Comiss\u00e3o calculada no order: Valor j\u00e1 definido no momento da compra</li> </ol>"},{"location":"perfis-de-usuario/promoter/#endpoints-principais","title":"Endpoints Principais","text":"M\u00e9todo Endpoint Descri\u00e7\u00e3o POST <code>/api/owners/kyc</code> Enviar documentos KYC GET <code>/api/owners/me</code> Ver status KYC GET <code>/api/promoter/dashboard</code> Dashboard GET <code>/api/videos/for-promoters</code> V\u00eddeos dispon\u00edveis POST <code>/api/promoter/affiliate-links</code> Criar link GET <code>/api/promoter/affiliate-links</code> Meus links GET <code>/api/promoter/conversions</code> Minhas convers\u00f5es POST <code>/api/videos/affiliate-click/:code</code> Registrar clique"},{"location":"perfis-de-usuario/promoter/#notificacoes-recebidas","title":"Notifica\u00e7\u00f5es Recebidas","text":"<ul> <li>\ud83d\udcc4 KYC enviado: Confirma\u00e7\u00e3o de envio</li> <li>\u2705 KYC aprovado: Pode come\u00e7ar a operar</li> <li>\u274c KYC rejeitado: Motivo da rejei\u00e7\u00e3o</li> <li>\ud83d\udcb0 Nova venda: Notifica\u00e7\u00e3o de convers\u00e3o</li> </ul>"},{"location":"perfis-de-usuario/promoter/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<ul> <li>Veja Processo KYC completo</li> <li>Consulte Caso de Uso: Promoter Gera Link</li> <li>Entenda Split de Pagamento</li> </ul>"},{"location":"visao-geral/conceitos-principais/","title":"Conceitos Principais","text":"<p>Este documento explica os conceitos fundamentais da plataforma Amasso.</p>"},{"location":"visao-geral/conceitos-principais/#videos","title":"V\u00eddeos","text":""},{"location":"visao-geral/conceitos-principais/#video-principal","title":"V\u00eddeo Principal","text":"<p>Conte\u00fado premium que os usu\u00e1rios compram para assistir. Caracter\u00edsticas: - Armazenado no Cloudinary com prote\u00e7\u00e3o - Possui pre\u00e7o configur\u00e1vel - Pode ter promo\u00e7\u00f5es tempor\u00e1rias - Tem data de lan\u00e7amento - Pode ter data de expira\u00e7\u00e3o para venda e visualiza\u00e7\u00e3o</p>"},{"location":"visao-geral/conceitos-principais/#trailer","title":"Trailer","text":"<p>Pr\u00e9via gratuita do v\u00eddeo principal para divulga\u00e7\u00e3o: - Dispon\u00edvel publicamente sem login - Usado para marketing - Pode ter m\u00faltiplos trailers por v\u00eddeo - Tipos: Teaser, Behind the Scenes, Highlights</p>"},{"location":"visao-geral/conceitos-principais/#videorevenueconfig","title":"VideoRevenueConfig","text":"<p>Configura\u00e7\u00e3o de comissionamento por v\u00eddeo: - Percentual da Plataforma: % que fica com o Amasso - Percentual do Owner: % para o criador/influencer - Percentual do Promoter: % para quem divulga (se houver) - Regra importante: Se promoter = 0%, o v\u00eddeo n\u00e3o aparece para gera\u00e7\u00e3o de links de afiliado</p>"},{"location":"visao-geral/conceitos-principais/#sistema-de-compra","title":"Sistema de Compra","text":""},{"location":"visao-geral/conceitos-principais/#order-pedido","title":"Order (Pedido)","text":"<p>Representa uma transa\u00e7\u00e3o de compra: - Vincula usu\u00e1rio + v\u00eddeo - Armazena valores separados (plataforma, owner, promoter) - Pode ter um promoter associado (via link de afiliado) - Rastreia link de afiliado usado</p>"},{"location":"visao-geral/conceitos-principais/#payment-pagamento","title":"Payment (Pagamento)","text":"<p>Detalha o pagamento de um pedido: - Status: Pendente, Pago, Cancelado, Estornado - ID da fatura Iugu - Data de pagamento - Dados do webhook</p>"},{"location":"visao-geral/conceitos-principais/#income-renda","title":"Income (Renda)","text":"<p>Registro individual de cada parte da comiss\u00e3o: - Um income por benefici\u00e1rio (plataforma, owner, promoter) - Valor espec\u00edfico de cada um - Ligado ao pedido e ao owner benefici\u00e1rio - Usado para relat\u00f3rios financeiros</p>"},{"location":"visao-geral/conceitos-principais/#links-de-afiliado","title":"Links de Afiliado","text":""},{"location":"visao-geral/conceitos-principais/#videoaffiliatelink","title":"VideoAffiliateLink","text":"<p>Link \u00fanico gerado por um promoter para divulgar um v\u00eddeo: - URL \u00fanica e rastre\u00e1vel - Vincula promoter + v\u00eddeo - Usado para calcular comiss\u00e3o - Rastreia convers\u00f5es</p>"},{"location":"visao-geral/conceitos-principais/#funcionamento","title":"Funcionamento","text":"<ol> <li>Promoter gera link para v\u00eddeo (se v\u00eddeo tiver comiss\u00e3o &gt; 0%)</li> <li>Compartilha o link</li> <li>Usu\u00e1rio acessa via link</li> <li>Ao comprar, o promoter \u00e9 vinculado ao pedido</li> <li>Na confirma\u00e7\u00e3o do pagamento, promoter recebe sua %</li> </ol>"},{"location":"visao-geral/conceitos-principais/#sistema-de-comissoes","title":"Sistema de Comiss\u00f5es","text":""},{"location":"visao-geral/conceitos-principais/#calculo-automatico","title":"C\u00e1lculo Autom\u00e1tico","text":"<p>Baseado no VideoRevenueConfig:</p> <p>Exemplo: V\u00eddeo de R$ 100,00 <pre><code>- Plataforma: 20% = R$ 20,00 (vai para conta master)\n- Owner (Influencer): 50% = R$ 50,00 (vai para subconta do influencer)\n- Promoter: 30% = R$ 30,00 (vai para subconta do promoter)\n</code></pre></p>"},{"location":"visao-geral/conceitos-principais/#split-no-iugu","title":"Split no Iugu","text":"<ul> <li>Configurado no momento da cria\u00e7\u00e3o da fatura</li> <li>Distribui\u00e7\u00e3o autom\u00e1tica ao confirmar pagamento</li> <li>Cada subconta recebe diretamente</li> <li>Plataforma recebe na conta master</li> </ul>"},{"location":"visao-geral/conceitos-principais/#videos-sem-comissao-para-promoter","title":"V\u00eddeos sem Comiss\u00e3o para Promoter","text":"<p>Se admin configurar promoter = 0%: - V\u00eddeo n\u00e3o aparece na listagem para promoters gerarem links - Apenas plataforma e owner recebem - Ideal para v\u00eddeos exclusivos sem programa de afiliados</p>"},{"location":"visao-geral/conceitos-principais/#gateway-iugu","title":"Gateway Iugu","text":""},{"location":"visao-geral/conceitos-principais/#conta-master","title":"Conta Master","text":"<ul> <li>Pertence \u00e0 plataforma Amasso</li> <li>Recebe todos os pagamentos</li> <li>Distribui via split para subcontas</li> <li>Centraliza gest\u00e3o financeira</li> </ul>"},{"location":"visao-geral/conceitos-principais/#subcontas","title":"Subcontas","text":"<p>Criadas para Promoters e Influencers: - Cada promoter/influencer tem uma subconta - Criada ap\u00f3s aprova\u00e7\u00e3o do KYC - Recebe pagamentos automaticamente via split - Pode sacar para conta banc\u00e1ria</p>"},{"location":"visao-geral/conceitos-principais/#split-de-pagamento","title":"Split de Pagamento","text":"<p>Divis\u00e3o autom\u00e1tica no momento da transa\u00e7\u00e3o: - Configurado na cria\u00e7\u00e3o da fatura - Executado quando pagamento confirma - Sem necessidade de transfer\u00eancias manuais - Transparente para todos os envolvidos</p>"},{"location":"visao-geral/conceitos-principais/#processo-kyc","title":"Processo KYC","text":""},{"location":"visao-geral/conceitos-principais/#o-que-e-kyc","title":"O que \u00e9 KYC","text":"<p>Know Your Customer - verifica\u00e7\u00e3o de identidade exigida por lei para transa\u00e7\u00f5es financeiras.</p>"},{"location":"visao-geral/conceitos-principais/#quem-precisa","title":"Quem Precisa","text":"<ul> <li>Promoters: Recebem comiss\u00e3o por vendas</li> <li>Influencers: Recebem por v\u00eddeos vendidos</li> <li>N\u00e3o precisam:</li> <li>Admin (n\u00e3o recebe dinheiro de vendas)</li> <li>Default (s\u00f3 compra, n\u00e3o recebe)</li> </ul>"},{"location":"visao-geral/conceitos-principais/#documentos-necessarios","title":"Documentos Necess\u00e1rios","text":"<ul> <li>CPF ou CNPJ</li> <li>RG ou CNH</li> <li>Comprovante de resid\u00eancia</li> <li>Dados banc\u00e1rios</li> <li>Selfie segurando documento (verifica\u00e7\u00e3o)</li> </ul>"},{"location":"visao-geral/conceitos-principais/#fluxo","title":"Fluxo","text":"<ol> <li>Usu\u00e1rio envia documentos</li> <li>Sistema registra (status: Pendente)</li> <li>Tenta criar subconta Iugu (pendente)</li> <li>Admin revisa</li> <li>Admin aprova ou rejeita</li> <li>Se aprovado: subconta ativada, usu\u00e1rio pode operar</li> <li>Se rejeitado: notifica\u00e7\u00e3o ao usu\u00e1rio</li> </ol>"},{"location":"visao-geral/conceitos-principais/#status","title":"Status","text":"<ul> <li>Pendente: Aguardando revis\u00e3o</li> <li>Aprovado: KYC aprovado, subconta ativa</li> <li>Rejeitado: Documentos n\u00e3o aprovados</li> </ul>"},{"location":"visao-geral/conceitos-principais/#notificacoes-multi-canal","title":"Notifica\u00e7\u00f5es Multi-canal","text":""},{"location":"visao-geral/conceitos-principais/#tipos-de-notificacao","title":"Tipos de Notifica\u00e7\u00e3o","text":"<ul> <li>MfaCode: C\u00f3digo de autentica\u00e7\u00e3o em duas etapas</li> <li>UserActivation: Ativa\u00e7\u00e3o de conta nova</li> <li>ForgotPassword: Recupera\u00e7\u00e3o de senha</li> <li>VideoReleaseSchedule: Notifica\u00e7\u00e3o de lan\u00e7amento de v\u00eddeo</li> </ul>"},{"location":"visao-geral/conceitos-principais/#canais","title":"Canais","text":"<ul> <li>Email: Via SMTP (AWS SES)</li> <li>WhatsApp: Via Z-API</li> <li>All: Envia para ambos os canais</li> </ul>"},{"location":"visao-geral/conceitos-principais/#sistema-assincrono","title":"Sistema Ass\u00edncrono","text":"<ul> <li>Notifica\u00e7\u00f5es gravadas no banco</li> <li>Jobs Hangfire processam em background</li> <li>Retry autom\u00e1tico em caso de falha (at\u00e9 3 tentativas)</li> <li>Templates personalizados (HTML para email, texto para WhatsApp)</li> </ul>"},{"location":"visao-geral/conceitos-principais/#perfis-de-usuario","title":"Perfis de Usu\u00e1rio","text":""},{"location":"visao-geral/conceitos-principais/#admin","title":"Admin","text":"<ul> <li>Administrador da plataforma</li> <li>Acesso total ao sistema</li> <li>Aprova KYC</li> <li>Configura v\u00eddeos e comiss\u00f5es</li> <li>Gerencia usu\u00e1rios</li> </ul>"},{"location":"visao-geral/conceitos-principais/#default","title":"Default","text":"<ul> <li>Usu\u00e1rio que compra v\u00eddeos</li> <li>N\u00e3o precisa de KYC</li> <li>Assiste conte\u00fado comprado</li> <li>Pode se tornar promoter ou influencer</li> </ul>"},{"location":"visao-geral/conceitos-principais/#promoter","title":"Promoter","text":"<ul> <li>Divulgador com links de afiliado</li> <li>Precisa de KYC aprovado</li> <li>Gera links \u00fanicos</li> <li>Recebe comiss\u00e3o em subconta</li> <li>Dashboard de vendas</li> <li>S\u00f3 v\u00ea v\u00eddeos com comiss\u00e3o &gt; 0%</li> </ul>"},{"location":"visao-geral/conceitos-principais/#influencer","title":"Influencer","text":"<ul> <li>Participa dos v\u00eddeos</li> <li>Precisa de KYC aprovado</li> <li>Vinculado a v\u00eddeos (OwnerVideo)</li> <li>Recebe comiss\u00e3o em subconta</li> <li>Dashboard de rendimentos</li> </ul>"},{"location":"visao-geral/conceitos-principais/#tabelas-principais","title":"Tabelas Principais","text":""},{"location":"visao-geral/conceitos-principais/#users","title":"Users","text":"<p>Todos os usu\u00e1rios da plataforma (Admin, Default, Promoter, Influencer)</p>"},{"location":"visao-geral/conceitos-principais/#owners","title":"Owners","text":"<p>Detalhes adicionais de Promoters e Influencers: - Dados de KYC - ID da subconta Iugu - Status do KYC - Documentos</p>"},{"location":"visao-geral/conceitos-principais/#videos_1","title":"Videos","text":"<p>V\u00eddeos dispon\u00edveis na plataforma</p>"},{"location":"visao-geral/conceitos-principais/#videorevenueconfig_1","title":"VideoRevenueConfig","text":"<p>Configura\u00e7\u00e3o de comiss\u00e3o por v\u00eddeo</p>"},{"location":"visao-geral/conceitos-principais/#orders","title":"Orders","text":"<p>Pedidos de compra</p>"},{"location":"visao-geral/conceitos-principais/#payments","title":"Payments","text":"<p>Pagamentos dos pedidos</p>"},{"location":"visao-geral/conceitos-principais/#income","title":"Income","text":"<p>Registro de comiss\u00f5es distribu\u00eddas</p>"},{"location":"visao-geral/conceitos-principais/#videoaffiliatelink_1","title":"VideoAffiliateLink","text":"<p>Links de afiliado dos promoters</p>"},{"location":"visao-geral/conceitos-principais/#notifications","title":"Notifications","text":"<p>Notifica\u00e7\u00f5es a serem enviadas</p>"},{"location":"visao-geral/conceitos-principais/#fluxo-completo-compra-com-afiliado","title":"Fluxo Completo: Compra com Afiliado","text":"<pre><code>sequenceDiagram\n    participant U as Usu\u00e1rio\n    participant P as Promoter\n    participant S as Sistema\n    participant I as Iugu\n    participant O as Owner\n\n    P-&gt;&gt;S: Gera link de afiliado (v\u00eddeo com comiss\u00e3o &gt; 0%)\n    P-&gt;&gt;U: Compartilha link\n    U-&gt;&gt;S: Acessa via link\n    U-&gt;&gt;S: Compra v\u00eddeo\n    S-&gt;&gt;I: Cria fatura com split\n    U-&gt;&gt;I: Paga\n    I-&gt;&gt;S: Webhook: pagamento confirmado\n    S-&gt;&gt;I: Distribui via split\n    I-&gt;&gt;S: Conta Master recebe\n    I-&gt;&gt;O: Subconta Owner recebe\n    I-&gt;&gt;P: Subconta Promoter recebe\n    S-&gt;&gt;S: Registra Income para todos</code></pre>"},{"location":"visao-geral/conceitos-principais/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<ul> <li>Consulte o Gloss\u00e1rio para termos t\u00e9cnicos</li> <li>Veja a Arquitetura detalhada</li> <li>Explore os Fluxos de Neg\u00f3cio completos</li> </ul>"},{"location":"visao-geral/glossario/","title":"Gloss\u00e1rio","text":""},{"location":"visao-geral/glossario/#a","title":"A","text":""},{"location":"visao-geral/glossario/#admin","title":"Admin","text":"<p>Administrador da plataforma com acesso total ao sistema. Respons\u00e1vel por aprovar KYC, configurar v\u00eddeos e gerenciar usu\u00e1rios.</p>"},{"location":"visao-geral/glossario/#afiliado","title":"Afiliado","text":"<p>Sin\u00f4nimo de Promoter. Usu\u00e1rio que divulga v\u00eddeos atrav\u00e9s de links rastre\u00e1veis e recebe comiss\u00e3o por vendas.</p>"},{"location":"visao-geral/glossario/#api","title":"API","text":"<p>Application Programming Interface. Interface de comunica\u00e7\u00e3o entre sistemas.</p>"},{"location":"visao-geral/glossario/#c","title":"C","text":""},{"location":"visao-geral/glossario/#cloudinary","title":"Cloudinary","text":"<p>Servi\u00e7o de CDN (Content Delivery Network) usado para armazenar e distribuir v\u00eddeos da plataforma.</p>"},{"location":"visao-geral/glossario/#comissao","title":"Comiss\u00e3o","text":"<p>Percentual do valor da venda destinado a um benefici\u00e1rio (plataforma, owner, promoter).</p>"},{"location":"visao-geral/glossario/#conta-master","title":"Conta Master","text":"<p>Conta principal do Iugu pertencente \u00e0 plataforma Amasso. Recebe todos os pagamentos e distribui para subcontas.</p>"},{"location":"visao-geral/glossario/#cpf","title":"CPF","text":"<p>Cadastro de Pessoa F\u00edsica. Documento brasileiro de identifica\u00e7\u00e3o exigido no processo de KYC.</p>"},{"location":"visao-geral/glossario/#d","title":"D","text":""},{"location":"visao-geral/glossario/#dashboard","title":"Dashboard","text":"<p>Painel de controle com m\u00e9tricas e informa\u00e7\u00f5es relevantes para cada perfil de usu\u00e1rio.</p>"},{"location":"visao-geral/glossario/#default","title":"Default","text":"<p>Perfil de usu\u00e1rio padr\u00e3o que compra v\u00eddeos para assistir. N\u00e3o recebe comiss\u00f5es e n\u00e3o precisa de KYC.</p>"},{"location":"visao-geral/glossario/#dto","title":"DTO","text":"<p>Data Transfer Object. Objeto usado para transferir dados entre camadas da aplica\u00e7\u00e3o.</p>"},{"location":"visao-geral/glossario/#e","title":"E","text":""},{"location":"visao-geral/glossario/#entity-framework-core","title":"Entity Framework Core","text":"<p>ORM (Object-Relational Mapper) usado no backend para interagir com o banco de dados PostgreSQL.</p>"},{"location":"visao-geral/glossario/#endpoint","title":"Endpoint","text":"<p>URL espec\u00edfica de uma API que responde a requisi\u00e7\u00f5es HTTP.</p>"},{"location":"visao-geral/glossario/#f","title":"F","text":""},{"location":"visao-geral/glossario/#frontend","title":"Frontend","text":"<p>Aplica\u00e7\u00e3o React + TypeScript que roda no navegador do usu\u00e1rio.</p>"},{"location":"visao-geral/glossario/#h","title":"H","text":""},{"location":"visao-geral/glossario/#hangfire","title":"Hangfire","text":"<p>Framework .NET para processamento de jobs em background, usado na Email API para enviar notifica\u00e7\u00f5es.</p>"},{"location":"visao-geral/glossario/#i","title":"I","text":""},{"location":"visao-geral/glossario/#income","title":"Income","text":"<p>Registro de renda/comiss\u00e3o recebida por um benefici\u00e1rio (plataforma, owner ou promoter).</p>"},{"location":"visao-geral/glossario/#influencer","title":"Influencer","text":"<p>Criador de conte\u00fado que participa dos v\u00eddeos. Recebe comiss\u00e3o quando seus v\u00eddeos s\u00e3o vendidos. Precisa de KYC aprovado.</p>"},{"location":"visao-geral/glossario/#iugu","title":"Iugu","text":"<p>Gateway de pagamento brasileiro usado pela plataforma. Oferece sistema de conta master e subcontas com split autom\u00e1tico.</p>"},{"location":"visao-geral/glossario/#j","title":"J","text":""},{"location":"visao-geral/glossario/#jwt","title":"JWT","text":"<p>JSON Web Token. Formato de token usado para autentica\u00e7\u00e3o na API.</p>"},{"location":"visao-geral/glossario/#k","title":"K","text":""},{"location":"visao-geral/glossario/#kyc","title":"KYC","text":"<p>Know Your Customer (Conhe\u00e7a Seu Cliente). Processo de verifica\u00e7\u00e3o de identidade exigido para usu\u00e1rios que recebem dinheiro (Promoters e Influencers).</p>"},{"location":"visao-geral/glossario/#m","title":"M","text":""},{"location":"visao-geral/glossario/#mfa","title":"MFA","text":"<p>Multi-Factor Authentication (Autentica\u00e7\u00e3o em M\u00faltiplos Fatores). Sistema de seguran\u00e7a que requer c\u00f3digo adicional al\u00e9m da senha.</p>"},{"location":"visao-geral/glossario/#migration","title":"Migration","text":"<p>Arquivo que descreve mudan\u00e7as na estrutura do banco de dados. Usado pelo Entity Framework para versionar o schema.</p>"},{"location":"visao-geral/glossario/#n","title":"N","text":""},{"location":"visao-geral/glossario/#notification","title":"Notification","text":"<p>Notifica\u00e7\u00e3o enviada ao usu\u00e1rio via email ou WhatsApp.</p>"},{"location":"visao-geral/glossario/#npgsql","title":"Npgsql","text":"<p>Driver .NET para conex\u00e3o com banco de dados PostgreSQL.</p>"},{"location":"visao-geral/glossario/#o","title":"O","text":""},{"location":"visao-geral/glossario/#order","title":"Order","text":"<p>Pedido de compra de um v\u00eddeo. Cont\u00e9m informa\u00e7\u00f5es do usu\u00e1rio, v\u00eddeo, valores e promoter (se houver).</p>"},{"location":"visao-geral/glossario/#owner","title":"Owner","text":"<p>Termo gen\u00e9rico para usu\u00e1rios que possuem dados adicionais: Promoters, Influencers, Partners, Agents. Tabela que armazena dados de KYC e subconta Iugu.</p>"},{"location":"visao-geral/glossario/#ownervideo","title":"OwnerVideo","text":"<p>Relacionamento entre Owner (Influencer) e Video. Indica quais influencers participam de quais v\u00eddeos.</p>"},{"location":"visao-geral/glossario/#p","title":"P","text":""},{"location":"visao-geral/glossario/#payment","title":"Payment","text":"<p>Pagamento de um pedido. Cont\u00e9m status, ID da fatura Iugu e dados do webhook.</p>"},{"location":"visao-geral/glossario/#postgresql","title":"PostgreSQL","text":"<p>Sistema de gerenciamento de banco de dados relacional usado pela plataforma.</p>"},{"location":"visao-geral/glossario/#promoter","title":"Promoter","text":"<p>Usu\u00e1rio que divulga v\u00eddeos atrav\u00e9s de links de afiliado e recebe comiss\u00e3o por vendas. Precisa de KYC aprovado. S\u00f3 v\u00ea v\u00eddeos com comiss\u00e3o configurada &gt; 0%.</p>"},{"location":"visao-geral/glossario/#r","title":"R","text":""},{"location":"visao-geral/glossario/#redux-toolkit","title":"Redux Toolkit","text":"<p>Biblioteca de gerenciamento de estado global usada no frontend React.</p>"},{"location":"visao-geral/glossario/#revenue","title":"Revenue","text":"<p>Receita ou renda gerada por vendas de v\u00eddeos.</p>"},{"location":"visao-geral/glossario/#s","title":"S","text":""},{"location":"visao-geral/glossario/#smtp","title":"SMTP","text":"<p>Simple Mail Transfer Protocol. Protocolo usado para envio de emails.</p>"},{"location":"visao-geral/glossario/#split-de-pagamento","title":"Split de Pagamento","text":"<p>Divis\u00e3o autom\u00e1tica do valor de uma venda entre m\u00faltiplos benefici\u00e1rios no momento da transa\u00e7\u00e3o.</p>"},{"location":"visao-geral/glossario/#subconta","title":"Subconta","text":"<p>Conta secund\u00e1ria vinculada \u00e0 conta master no Iugu. Criada para Promoters e Influencers ap\u00f3s aprova\u00e7\u00e3o do KYC.</p>"},{"location":"visao-geral/glossario/#t","title":"T","text":""},{"location":"visao-geral/glossario/#trailer","title":"Trailer","text":"<p>Pr\u00e9via gratuita de um v\u00eddeo, dispon\u00edvel publicamente para divulga\u00e7\u00e3o.</p>"},{"location":"visao-geral/glossario/#typescript","title":"TypeScript","text":"<p>Linguagem de programa\u00e7\u00e3o usada no frontend. Superconjunto do JavaScript com tipagem est\u00e1tica.</p>"},{"location":"visao-geral/glossario/#u","title":"U","text":""},{"location":"visao-geral/glossario/#user","title":"User","text":"<p>Entidade que representa todos os usu\u00e1rios da plataforma. Tipos: Admin, Default, Promoter, Influencer.</p>"},{"location":"visao-geral/glossario/#v","title":"V","text":""},{"location":"visao-geral/glossario/#videoaffiliatelink","title":"VideoAffiliateLink","text":"<p>Link \u00fanico gerado por um promoter para divulgar um v\u00eddeo espec\u00edfico.</p>"},{"location":"visao-geral/glossario/#videorevenueconfig","title":"VideoRevenueConfig","text":"<p>Configura\u00e7\u00e3o que define os percentuais de comiss\u00e3o para cada v\u00eddeo: - % Plataforma - % Owner - % Promoter (se 0%, v\u00eddeo n\u00e3o aparece para gera\u00e7\u00e3o de links)</p>"},{"location":"visao-geral/glossario/#videotrailer","title":"VideoTrailer","text":"<p>V\u00eddeo de pr\u00e9via/trailer associado a um v\u00eddeo principal.</p>"},{"location":"visao-geral/glossario/#w","title":"W","text":""},{"location":"visao-geral/glossario/#webhook","title":"Webhook","text":"<p>Mecanismo de notifica\u00e7\u00e3o autom\u00e1tica. O Iugu envia webhooks para informar mudan\u00e7as de status de pagamento.</p>"},{"location":"visao-geral/glossario/#whatsapp","title":"WhatsApp","text":"<p>Canal de notifica\u00e7\u00e3o adicional ao email. Integra\u00e7\u00e3o via Z-API.</p>"},{"location":"visao-geral/glossario/#z","title":"Z","text":""},{"location":"visao-geral/glossario/#z-api","title":"Z-API","text":"<p>Servi\u00e7o de integra\u00e7\u00e3o com WhatsApp usado para enviar notifica\u00e7\u00f5es.</p>"},{"location":"visao-geral/glossario/#siglas-tecnicas","title":"Siglas T\u00e9cnicas","text":"Sigla Significado Descri\u00e7\u00e3o API Application Programming Interface Interface de comunica\u00e7\u00e3o entre sistemas CDN Content Delivery Network Rede de distribui\u00e7\u00e3o de conte\u00fado CORS Cross-Origin Resource Sharing Mecanismo de seguran\u00e7a HTTP DTO Data Transfer Object Objeto de transfer\u00eancia de dados EF Core Entity Framework Core ORM para .NET ER Entity-Relationship Modelo Entidade-Relacionamento HTTP HyperText Transfer Protocol Protocolo de comunica\u00e7\u00e3o web JWT JSON Web Token Padr\u00e3o de token de autentica\u00e7\u00e3o KYC Know Your Customer Verifica\u00e7\u00e3o de identidade MFA Multi-Factor Authentication Autentica\u00e7\u00e3o em m\u00faltiplos fatores ORM Object-Relational Mapper Mapeador objeto-relacional SMTP Simple Mail Transfer Protocol Protocolo de envio de email UI User Interface Interface do usu\u00e1rio UX User Experience Experi\u00eancia do usu\u00e1rio"},{"location":"visao-geral/glossario/#termos-de-negocio","title":"Termos de Neg\u00f3cio","text":""},{"location":"visao-geral/glossario/#conversao","title":"Convers\u00e3o","text":"<p>Quando um clique em um link de afiliado resulta em uma venda.</p>"},{"location":"visao-geral/glossario/#comissionamento","title":"Comissionamento","text":"<p>Processo de calcular e distribuir comiss\u00f5es aos benefici\u00e1rios.</p>"},{"location":"visao-geral/glossario/#compliance","title":"Compliance","text":"<p>Conformidade com leis e regulamenta\u00e7\u00f5es, especialmente financeiras (KYC).</p>"},{"location":"visao-geral/glossario/#marketplace","title":"Marketplace","text":"<p>Modelo de neg\u00f3cio onde a plataforma conecta vendedores (creators) e compradores.</p>"},{"location":"visao-geral/glossario/#monetizacao","title":"Monetiza\u00e7\u00e3o","text":"<p>Gera\u00e7\u00e3o de receita a partir de conte\u00fado.</p>"},{"location":"visao-geral/glossario/#split","title":"Split","text":"<p>Divis\u00e3o de um pagamento entre m\u00faltiplas partes.</p>"},{"location":"visao-geral/glossario/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<ul> <li>Volte \u00e0 Introdu\u00e7\u00e3o para vis\u00e3o geral</li> <li>Explore os Conceitos Principais em detalhes</li> <li>Veja a Arquitetura do sistema</li> </ul>"},{"location":"visao-geral/introducao/","title":"Introdu\u00e7\u00e3o","text":""},{"location":"visao-geral/introducao/#o-que-e-a-plataforma-amasso","title":"O que \u00e9 a Plataforma Amasso?","text":"<p>O Amasso \u00e9 uma plataforma digital inovadora que conecta criadores de conte\u00fado, influencers, promoters e consumidores em um ecossistema de v\u00eddeos premium com sistema de monetiza\u00e7\u00e3o automatizado.</p>"},{"location":"visao-geral/introducao/#problema-que-resolve","title":"Problema que Resolve","text":""},{"location":"visao-geral/introducao/#para-criadores-de-conteudo","title":"Para Criadores de Conte\u00fado","text":"<ul> <li>Monetiza\u00e7\u00e3o facilitada: Venda de v\u00eddeos exclusivos diretamente aos f\u00e3s</li> <li>Gest\u00e3o simplificada: Upload, precifica\u00e7\u00e3o e distribui\u00e7\u00e3o em uma \u00fanica plataforma</li> <li>Pagamentos autom\u00e1ticos: Recebimento via Iugu sem burocracia</li> </ul>"},{"location":"visao-geral/introducao/#para-influencers","title":"Para Influencers","text":"<ul> <li>Comissionamento justo: Receba automaticamente por cada v\u00eddeo vendido</li> <li>Transpar\u00eancia total: Acompanhe ganhos em tempo real</li> <li>Conformidade legal: Sistema KYC integrado</li> </ul>"},{"location":"visao-geral/introducao/#para-promoters-afiliados","title":"Para Promoters (Afiliados)","text":"<ul> <li>Oportunidade de renda: Ganhe comiss\u00e3o divulgando v\u00eddeos</li> <li>Links rastre\u00e1veis: Sistema de afiliados robusto</li> <li>Dashboard completo: M\u00e9tricas de vendas e convers\u00f5es</li> </ul>"},{"location":"visao-geral/introducao/#para-consumidores","title":"Para Consumidores","text":"<ul> <li>Acesso a conte\u00fado exclusivo: V\u00eddeos \u00fanicos de seus criadores favoritos</li> <li>Pagamento seguro: Transa\u00e7\u00f5es protegidas via Iugu</li> <li>Experi\u00eancia simples: Compre e assista facilmente</li> </ul>"},{"location":"visao-geral/introducao/#principais-funcionalidades","title":"Principais Funcionalidades","text":""},{"location":"visao-geral/introducao/#sistema-de-videos","title":"\ud83c\udfac Sistema de V\u00eddeos","text":"<ul> <li>Upload e armazenamento na nuvem (Cloudinary)</li> <li>Trailers p\u00fablicos para divulga\u00e7\u00e3o</li> <li>Conte\u00fado premium protegido</li> <li>Agendamento de lan\u00e7amentos</li> <li>Configura\u00e7\u00e3o de pre\u00e7os e promo\u00e7\u00f5es</li> </ul>"},{"location":"visao-geral/introducao/#sistema-de-comissoes","title":"\ud83d\udcb0 Sistema de Comiss\u00f5es","text":"<ul> <li>Configura\u00e7\u00e3o flex\u00edvel: Admin define % por v\u00eddeo</li> <li>Visibilidade inteligente: V\u00eddeos com 0% para promoter n\u00e3o aparecem para links</li> <li>Distribui\u00e7\u00e3o autom\u00e1tica: Split no momento do pagamento</li> <li>M\u00faltiplos benefici\u00e1rios:</li> <li>Plataforma (conta master)</li> <li>Owner/Influencer (subconta)</li> <li>Promoter (subconta, se aplic\u00e1vel)</li> </ul>"},{"location":"visao-geral/introducao/#sistema-de-afiliados","title":"\ud83d\udd17 Sistema de Afiliados","text":"<ul> <li>Gera\u00e7\u00e3o de links \u00fanicos por promoter</li> <li>Rastreamento de cliques e convers\u00f5es</li> <li>Dashboard com m\u00e9tricas detalhadas</li> <li>Comiss\u00e3o calculada e paga automaticamente</li> </ul>"},{"location":"visao-geral/introducao/#pagamentos-seguros-iugu","title":"\ud83d\udcb3 Pagamentos Seguros (Iugu)","text":"<ul> <li>Conta Master: Plataforma gerencia transa\u00e7\u00f5es</li> <li>Subcontas: Promoters e Influencers recebem direto</li> <li>Split autom\u00e1tico: Distribui\u00e7\u00e3o no momento do pagamento</li> <li>Webhooks: Confirma\u00e7\u00e3o em tempo real</li> </ul>"},{"location":"visao-geral/introducao/#kyc-e-compliance","title":"\ud83d\udccb KYC e Compliance","text":"<ul> <li>Processo de verifica\u00e7\u00e3o para quem recebe dinheiro</li> <li>Valida\u00e7\u00e3o de documentos</li> <li>Aprova\u00e7\u00e3o por administradores</li> <li>Cria\u00e7\u00e3o autom\u00e1tica de subcontas Iugu</li> </ul>"},{"location":"visao-geral/introducao/#notificacoes-multi-canal","title":"\ud83d\udce7 Notifica\u00e7\u00f5es Multi-canal","text":"<ul> <li>E-mail via SMTP</li> <li>WhatsApp via Z-API</li> <li>Templates personalizados</li> <li>Sistema ass\u00edncrono com Hangfire</li> </ul>"},{"location":"visao-geral/introducao/#tecnologias-utilizadas","title":"Tecnologias Utilizadas","text":""},{"location":"visao-geral/introducao/#backend-api-net-8","title":"Backend API (.NET 8)","text":"<ul> <li>Framework: ASP.NET Core 8.0</li> <li>ORM: Entity Framework Core</li> <li>Banco de Dados: PostgreSQL 16</li> <li>Autentica\u00e7\u00e3o: JWT + MFA</li> <li>Padr\u00f5es: Clean Architecture, Repository, DTOs</li> </ul>"},{"location":"visao-geral/introducao/#email-api-net-8","title":"Email API (.NET 8)","text":"<ul> <li>Framework: ASP.NET Core 8.0</li> <li>Jobs: Hangfire</li> <li>E-mail: SMTP (AWS SES)</li> <li>WhatsApp: Z-API</li> <li>Templates: HTML + Texto</li> </ul>"},{"location":"visao-geral/introducao/#frontend-react-typescript","title":"Frontend (React + TypeScript)","text":"<ul> <li>Framework: React 18</li> <li>Linguagem: TypeScript</li> <li>Estado: Redux Toolkit</li> <li>Roteamento: React Router 6</li> <li>UI: Material-UI, Bootstrap</li> <li>Build: Vite</li> </ul>"},{"location":"visao-geral/introducao/#infraestrutura","title":"Infraestrutura","text":"<ul> <li>Hospedagem de V\u00eddeos: Cloudinary</li> <li>Gateway de Pagamento: Iugu</li> <li>Banco de Dados: PostgreSQL 16</li> <li>CI/CD: Azure Pipelines / GitHub Actions</li> </ul>"},{"location":"visao-geral/introducao/#fluxo-geral-da-plataforma","title":"Fluxo Geral da Plataforma","text":"<pre><code>graph LR\n    A[Criador] --&gt;|Faz upload| B[V\u00eddeo]\n    B --&gt;|Configura| C[Pre\u00e7o + Comiss\u00f5es]\n    D[Promoter] --&gt;|Gera| E[Link de Afiliado]\n    E --&gt;|Divulga| F[Consumidor]\n    F --&gt;|Compra| G[Pagamento Iugu]\n    G --&gt;|Split| H[Conta Master]\n    G --&gt;|Split| I[Subconta Influencer]\n    G --&gt;|Split| J[Subconta Promoter]\n    H --&gt;|Notifica| K[Todos Recebem]</code></pre>"},{"location":"visao-geral/introducao/#publico-alvo-da-documentacao","title":"P\u00fablico-Alvo da Documenta\u00e7\u00e3o","text":"<p>Esta documenta\u00e7\u00e3o \u00e9 destinada a:</p> <ul> <li>Desenvolvedores Backend: Trabalhar com .NET 8, EF Core, PostgreSQL</li> <li>Desenvolvedores Frontend: Trabalhar com React, TypeScript, Redux</li> <li>DevOps: Configurar ambientes e deploys</li> <li>Product Owners: Entender funcionalidades e regras de neg\u00f3cio</li> <li>Novos membros da equipe: Onboarding completo</li> </ul>"},{"location":"visao-geral/introducao/#estrutura-da-documentacao","title":"Estrutura da Documenta\u00e7\u00e3o","text":"<ol> <li>Vis\u00e3o Geral: Conceitos e gloss\u00e1rio (voc\u00ea est\u00e1 aqui)</li> <li>Arquitetura: Como os sistemas se comunicam</li> <li>Pagamentos: Sistema Iugu, KYC e split</li> <li>Banco de Dados: Modelo ER e tabelas</li> <li>Perfis de Usu\u00e1rio: Admin, Default, Promoter, Influencer</li> <li>Fluxos de Neg\u00f3cio: Jornadas completas</li> <li>APIs: Refer\u00eancia de endpoints</li> <li>Guias: Setup e desenvolvimento</li> <li>Casos de Uso: Exemplos pr\u00e1ticos com c\u00f3digo</li> </ol>"},{"location":"visao-geral/introducao/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<ul> <li>Leia os Conceitos Principais para entender termos-chave</li> <li>Explore a Arquitetura do sistema</li> <li>Configure seu Ambiente de Desenvolvimento</li> <li>Consulte os Casos de Uso para exemplos pr\u00e1ticos</li> </ul>"}]}